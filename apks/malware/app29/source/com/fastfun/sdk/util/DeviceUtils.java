package com.fastfun.sdk.util;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.URLEncoder;
import java.util.Enumeration;
import java.util.Locale;

public class DeviceUtils
{
  public DeviceUtils() {}
  
  public static void appendDeviceInfo(Context paramContext, StringBuffer paramStringBuffer)
  {
    int j = 0;
    paramStringBuffer.append("&").append("imei").append("=").append(getImei(paramContext));
    paramStringBuffer.append("&").append("imsi").append("=").append(getImsi(paramContext));
    StringBuffer localStringBuffer = paramStringBuffer.append("&").append("aimei").append("=");
    if (getImeiAuthenticity(paramContext)) {}
    for (int i = 1;; i = 0)
    {
      localStringBuffer.append(i);
      localStringBuffer = paramStringBuffer.append("&").append("aimsi").append("=");
      i = j;
      if (getImsiAuthenticity(paramContext)) {
        i = 1;
      }
      localStringBuffer.append(i);
      paramStringBuffer.append("&").append("iccid").append("=").append(getIccid(paramContext));
      paramStringBuffer.append("&").append("pmodel").append("=").append(encodeData(getModel()));
      paramStringBuffer.append("&").append("osversion").append("=").append(encodeData(getRelease()));
      paramStringBuffer.append("&").append("nwtype").append("=").append(encodeData(getNetWorkType(paramContext)));
      paramStringBuffer.append("&").append("ctech").append("=").append(encodeData(getNetworkClass(paramContext)));
      return;
    }
  }
  
  private static String emptyStr(String paramString)
  {
    String str = paramString;
    if (TextUtils.isEmpty(paramString)) {
      str = "";
    }
    return str;
  }
  
  private static String encodeData(String paramString)
  {
    try
    {
      paramString = URLEncoder.encode(paramString, "UTF-8");
      return paramString;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return "";
  }
  
  public static String getCarrierName(Context paramContext)
  {
    try
    {
      String str = ((TelephonyManager)paramContext.getSystemService("phone")).getNetworkOperatorName();
      return str;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return getImsi(paramContext);
  }
  
  public static String getCountryCode()
  {
    try
    {
      String str1 = Locale.getDefault().getCountry();
      return emptyStr(str1);
    }
    catch (Exception localException)
    {
      for (;;)
      {
        String str2 = "";
      }
    }
  }
  
  public static String getCpuRatioCur()
  {
    try
    {
      String str = new BufferedReader(new FileReader("/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq")).readLine().trim();
      return str;
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      localFileNotFoundException.printStackTrace();
      return "";
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        localIOException.printStackTrace();
      }
    }
  }
  
  public static String getCpuRatioMax()
  {
    for (String str1 = "";; str1 = str1 + new String(arrayOfByte))
    {
      try
      {
        InputStream localInputStream = new ProcessBuilder(new String[] { "/system/bin/cat", "/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq" }).start().getInputStream();
        arrayOfByte = new byte[24];
        if (localInputStream.read(arrayOfByte) != -1) {
          continue;
        }
        localInputStream.close();
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          byte[] arrayOfByte;
          localIOException.printStackTrace();
          String str2 = "N/A";
        }
      }
      return str1.trim();
    }
  }
  
  public static int getHeightPixels(Context paramContext)
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
    return localDisplayMetrics.heightPixels;
  }
  
  public static final String getIccid(Context paramContext)
  {
    try
    {
      paramContext = IccidUtil.getIccid(paramContext);
      return paramContext;
    }
    catch (Exception paramContext) {}
    return "";
  }
  
  public static String getImei(Context paramContext)
  {
    String str = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
    if ((str == null) || (str.length() != 15))
    {
      str = getImsi(paramContext);
      SharedUtil.editBoolean(paramContext, "device_authenticity", "Key_IMEI_A", false);
      return str;
    }
    SharedUtil.editBoolean(paramContext, "device_authenticity", "Key_IMEI_A", true);
    return str;
  }
  
  public static boolean getImeiAuthenticity(Context paramContext)
  {
    return SharedUtil.getBoolean(paramContext, "device_authenticity", "Key_IMEI_A", false);
  }
  
  public static final String getImsi(Context paramContext)
  {
    String str = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
    if ((str == null) || (str.length() != 15))
    {
      str = ImsiUtil.getImsi(paramContext);
      SharedUtil.editBoolean(paramContext, "device_authenticity", "Key_IMSI_A", false);
      return str;
    }
    SharedUtil.editBoolean(paramContext, "device_authenticity", "Key_IMSI_A", true);
    return str;
  }
  
  public static boolean getImsiAuthenticity(Context paramContext)
  {
    return SharedUtil.getBoolean(paramContext, "device_authenticity", "Key_IMSI_A", false);
  }
  
  public static String getIpAddress()
  {
    try
    {
      localObject = NetworkInterface.getNetworkInterfaces();
      boolean bool = ((Enumeration)localObject).hasMoreElements();
      if (bool) {
        break label18;
      }
    }
    catch (SocketException localSocketException)
    {
      for (;;)
      {
        Object localObject;
        label18:
        Enumeration localEnumeration;
        InetAddress localInetAddress;
        Log.e("WifiPreference IpAddress", localSocketException.toString());
      }
    }
    return "";
    localEnumeration = ((NetworkInterface)((Enumeration)localObject).nextElement()).getInetAddresses();
    do
    {
      if (!localEnumeration.hasMoreElements()) {
        break;
      }
      localInetAddress = (InetAddress)localEnumeration.nextElement();
    } while (localInetAddress.isLoopbackAddress());
    localObject = localInetAddress.getHostAddress().toString();
    return localObject;
  }
  
  public static String getLanguageCode()
  {
    try
    {
      String str1 = Locale.getDefault().getLanguage();
      return emptyStr(str1);
    }
    catch (Exception localException)
    {
      for (;;)
      {
        String str2 = "";
      }
    }
  }
  
  public static String getMacAddress(Context paramContext)
  {
    try
    {
      paramContext = ((WifiManager)paramContext.getSystemService("wifi")).getConnectionInfo().getMacAddress();
      if (paramContext != null) {}
      boolean bool;
      localException1.printStackTrace();
    }
    catch (Exception localException1)
    {
      try
      {
        bool = paramContext.equals("");
        if (bool) {
          paramContext = "unknown";
        }
        return paramContext;
      }
      catch (Exception localException2)
      {
        for (;;) {}
      }
      localException1 = localException1;
      paramContext = "unknown";
    }
    return paramContext;
  }
  
  public static String getManufacturer()
  {
    return Build.MANUFACTURER;
  }
  
  public static String getMenoryRatio()
  {
    try
    {
      String str = new BufferedReader(new FileReader("/proc/meminfo"), 8192).readLine();
      if (str != null)
      {
        str = str.substring(str.indexOf(":") + 2, str.indexOf("k") - 1).trim();
        return str;
      }
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return "";
  }
  
  public static String getModel()
  {
    return Build.MODEL;
  }
  
  public static String getNetWorkType(Context paramContext)
  {
    try
    {
      Object localObject = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if ((localObject != null) && (((NetworkInfo)localObject).isConnected()))
      {
        localObject = ((NetworkInfo)localObject).getTypeName();
        boolean bool = ((String)localObject).equalsIgnoreCase("WIFI");
        if (bool) {
          return "WIFI";
        }
        if (((String)localObject).equalsIgnoreCase("MOBILE"))
        {
          paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getNetworkType();
          return paramContext;
        }
        return "";
      }
    }
    catch (Exception paramContext)
    {
      return "";
    }
    return "";
  }
  
  public static String getNetworkClass(Context paramContext)
  {
    return NetworkClassUtil.getNetworkClass(getNetWorkType(paramContext));
  }
  
  public static String getNetworkTypeName(Context paramContext)
  {
    try
    {
      paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if (paramContext == null) {
        return "GPRS";
      }
      paramContext = paramContext.getTypeName();
      if (paramContext.compareTo("MOBILE") != 0)
      {
        int i = paramContext.compareTo("mobile");
        if (i != 0) {}
      }
      else
      {
        return "GPRS";
      }
      paramContext = paramContext.trim();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "GPRS";
  }
  
  public static String getRelease()
  {
    return Build.VERSION.RELEASE;
  }
  
  public static String getSSID(Context paramContext)
  {
    try
    {
      paramContext = ((WifiManager)paramContext.getSystemService("wifi")).getConnectionInfo().getSSID();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  public static int getScreenDensity(Context paramContext)
  {
    try
    {
      DisplayMetrics localDisplayMetrics = new DisplayMetrics();
      ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
      int i = localDisplayMetrics.densityDpi;
      return i;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return 0;
  }
  
  /* Error */
  public static long[] getTcpRxTxBytes(Context paramContext)
  {
    // Byte code:
    //   0: lconst_0
    //   1: lstore 8
    //   3: aconst_null
    //   4: astore 13
    //   6: aconst_null
    //   7: astore 15
    //   9: aconst_null
    //   10: astore 14
    //   12: aconst_null
    //   13: astore 10
    //   15: aload_0
    //   16: invokestatic 402	com/fastfun/sdk/util/DeviceUtils:getUid	(Landroid/content/Context;)I
    //   19: istore_1
    //   20: new 182	java/lang/StringBuilder
    //   23: dup
    //   24: ldc_w 404
    //   27: invokespecial 187	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   30: iload_1
    //   31: invokevirtual 407	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   34: ldc_w 409
    //   37: invokevirtual 193	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   40: invokevirtual 196	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   43: astore_0
    //   44: new 182	java/lang/StringBuilder
    //   47: dup
    //   48: ldc_w 404
    //   51: invokespecial 187	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   54: iload_1
    //   55: invokevirtual 407	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   58: ldc_w 411
    //   61: invokevirtual 193	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   64: invokevirtual 196	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   67: astore 17
    //   69: new 133	java/io/FileReader
    //   72: dup
    //   73: aload_0
    //   74: invokespecial 138	java/io/FileReader:<init>	(Ljava/lang/String;)V
    //   77: astore_0
    //   78: new 131	java/io/BufferedReader
    //   81: dup
    //   82: aload_0
    //   83: sipush 500
    //   86: invokespecial 328	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   89: astore 11
    //   91: aload 11
    //   93: invokevirtual 144	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   96: invokevirtual 283	java/lang/String:toString	()Ljava/lang/String;
    //   99: invokevirtual 149	java/lang/String:trim	()Ljava/lang/String;
    //   102: invokestatic 417	java/lang/Long:parseLong	(Ljava/lang/String;)J
    //   105: lstore 4
    //   107: aload_0
    //   108: ifnull +7 -> 115
    //   111: aload_0
    //   112: invokevirtual 418	java/io/FileReader:close	()V
    //   115: lload 4
    //   117: lstore_2
    //   118: aload 11
    //   120: ifnull +11 -> 131
    //   123: aload 11
    //   125: invokevirtual 419	java/io/BufferedReader:close	()V
    //   128: lload 4
    //   130: lstore_2
    //   131: new 133	java/io/FileReader
    //   134: dup
    //   135: aload 17
    //   137: invokespecial 138	java/io/FileReader:<init>	(Ljava/lang/String;)V
    //   140: astore_0
    //   141: new 131	java/io/BufferedReader
    //   144: dup
    //   145: aload_0
    //   146: sipush 500
    //   149: invokespecial 328	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   152: astore 10
    //   154: aload 10
    //   156: invokevirtual 144	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   159: invokevirtual 283	java/lang/String:toString	()Ljava/lang/String;
    //   162: invokevirtual 149	java/lang/String:trim	()Ljava/lang/String;
    //   165: invokestatic 417	java/lang/Long:parseLong	(Ljava/lang/String;)J
    //   168: lstore 6
    //   170: aload_0
    //   171: ifnull +7 -> 178
    //   174: aload_0
    //   175: invokevirtual 418	java/io/FileReader:close	()V
    //   178: lload 6
    //   180: lstore 4
    //   182: aload 10
    //   184: ifnull +12 -> 196
    //   187: aload 10
    //   189: invokevirtual 419	java/io/BufferedReader:close	()V
    //   192: lload 6
    //   194: lstore 4
    //   196: lload_2
    //   197: lstore 6
    //   199: lload_2
    //   200: lconst_0
    //   201: lcmp
    //   202: ifge +6 -> 208
    //   205: lconst_0
    //   206: lstore 6
    //   208: lload 4
    //   210: lconst_0
    //   211: lcmp
    //   212: ifge +353 -> 565
    //   215: lload 8
    //   217: lstore_2
    //   218: iconst_2
    //   219: newarray long
    //   221: dup
    //   222: iconst_0
    //   223: lload 6
    //   225: lastore
    //   226: dup
    //   227: iconst_1
    //   228: lload_2
    //   229: lastore
    //   230: areturn
    //   231: astore 11
    //   233: aconst_null
    //   234: astore_0
    //   235: aconst_null
    //   236: astore 10
    //   238: aload 11
    //   240: invokevirtual 98	java/lang/Exception:printStackTrace	()V
    //   243: aload 10
    //   245: ifnull +8 -> 253
    //   248: aload 10
    //   250: invokevirtual 418	java/io/FileReader:close	()V
    //   253: aload_0
    //   254: ifnull +317 -> 571
    //   257: aload_0
    //   258: invokevirtual 419	java/io/BufferedReader:close	()V
    //   261: lconst_0
    //   262: lstore_2
    //   263: goto -132 -> 131
    //   266: astore_0
    //   267: aload_0
    //   268: invokevirtual 98	java/lang/Exception:printStackTrace	()V
    //   271: lconst_0
    //   272: lstore_2
    //   273: goto -142 -> 131
    //   276: astore 12
    //   278: aconst_null
    //   279: astore 11
    //   281: aload 10
    //   283: astore_0
    //   284: aload 12
    //   286: astore 10
    //   288: aload_0
    //   289: ifnull +7 -> 296
    //   292: aload_0
    //   293: invokevirtual 418	java/io/FileReader:close	()V
    //   296: aload 11
    //   298: ifnull +8 -> 306
    //   301: aload 11
    //   303: invokevirtual 419	java/io/BufferedReader:close	()V
    //   306: aload 10
    //   308: athrow
    //   309: astore_0
    //   310: aload_0
    //   311: invokevirtual 98	java/lang/Exception:printStackTrace	()V
    //   314: goto -8 -> 306
    //   317: astore_0
    //   318: aload_0
    //   319: invokevirtual 98	java/lang/Exception:printStackTrace	()V
    //   322: lload 4
    //   324: lstore_2
    //   325: goto -194 -> 131
    //   328: astore 11
    //   330: aconst_null
    //   331: astore_0
    //   332: aload 13
    //   334: astore 10
    //   336: aload 11
    //   338: invokevirtual 98	java/lang/Exception:printStackTrace	()V
    //   341: aload_0
    //   342: ifnull +7 -> 349
    //   345: aload_0
    //   346: invokevirtual 418	java/io/FileReader:close	()V
    //   349: aload 10
    //   351: ifnull +208 -> 559
    //   354: aload 10
    //   356: invokevirtual 419	java/io/BufferedReader:close	()V
    //   359: lconst_0
    //   360: lstore 4
    //   362: goto -166 -> 196
    //   365: astore_0
    //   366: aload_0
    //   367: invokevirtual 98	java/lang/Exception:printStackTrace	()V
    //   370: lconst_0
    //   371: lstore 4
    //   373: goto -177 -> 196
    //   376: astore_0
    //   377: aconst_null
    //   378: astore 11
    //   380: aload 15
    //   382: astore 10
    //   384: aload 11
    //   386: astore 12
    //   388: aload 10
    //   390: astore 11
    //   392: aload_0
    //   393: astore 10
    //   395: aload 12
    //   397: astore_0
    //   398: aload_0
    //   399: ifnull +7 -> 406
    //   402: aload_0
    //   403: invokevirtual 418	java/io/FileReader:close	()V
    //   406: aload 11
    //   408: ifnull +8 -> 416
    //   411: aload 11
    //   413: invokevirtual 419	java/io/BufferedReader:close	()V
    //   416: aload 10
    //   418: athrow
    //   419: astore_0
    //   420: aload_0
    //   421: invokevirtual 98	java/lang/Exception:printStackTrace	()V
    //   424: goto -8 -> 416
    //   427: astore_0
    //   428: aload_0
    //   429: invokevirtual 98	java/lang/Exception:printStackTrace	()V
    //   432: lload 6
    //   434: lstore 4
    //   436: goto -240 -> 196
    //   439: astore 10
    //   441: aload 14
    //   443: astore 11
    //   445: goto -47 -> 398
    //   448: astore 11
    //   450: aload 10
    //   452: astore 12
    //   454: aload 11
    //   456: astore 10
    //   458: aload 12
    //   460: astore 11
    //   462: goto -64 -> 398
    //   465: astore 11
    //   467: aload 13
    //   469: astore 10
    //   471: goto -135 -> 336
    //   474: astore 11
    //   476: goto -140 -> 336
    //   479: astore 10
    //   481: aconst_null
    //   482: astore 11
    //   484: goto -196 -> 288
    //   487: astore 10
    //   489: goto -201 -> 288
    //   492: astore 11
    //   494: aconst_null
    //   495: astore 12
    //   497: aload_0
    //   498: astore 10
    //   500: aload 12
    //   502: astore_0
    //   503: goto -265 -> 238
    //   506: astore 16
    //   508: aload 11
    //   510: astore 10
    //   512: aload_0
    //   513: astore 12
    //   515: aload 16
    //   517: astore 11
    //   519: aload 10
    //   521: astore_0
    //   522: aload 12
    //   524: astore 10
    //   526: goto -288 -> 238
    //   529: astore 12
    //   531: aload_0
    //   532: astore 11
    //   534: aload 12
    //   536: astore_0
    //   537: goto -153 -> 384
    //   540: astore 11
    //   542: aload 10
    //   544: astore 12
    //   546: aload 11
    //   548: astore 10
    //   550: aload_0
    //   551: astore 11
    //   553: aload 12
    //   555: astore_0
    //   556: goto -268 -> 288
    //   559: lconst_0
    //   560: lstore 4
    //   562: goto -366 -> 196
    //   565: lload 4
    //   567: lstore_2
    //   568: goto -350 -> 218
    //   571: lconst_0
    //   572: lstore_2
    //   573: goto -442 -> 131
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	576	0	paramContext	Context
    //   19	36	1	i	int
    //   117	456	2	l1	long
    //   105	461	4	l2	long
    //   168	265	6	l3	long
    //   1	215	8	l4	long
    //   13	404	10	localObject1	Object
    //   439	12	10	localObject2	Object
    //   456	14	10	localObject3	Object
    //   479	1	10	localObject4	Object
    //   487	1	10	localObject5	Object
    //   498	51	10	localObject6	Object
    //   89	35	11	localBufferedReader	BufferedReader
    //   231	8	11	localException1	Exception
    //   279	23	11	localObject7	Object
    //   328	9	11	localException2	Exception
    //   378	66	11	localObject8	Object
    //   448	7	11	localObject9	Object
    //   460	1	11	localObject10	Object
    //   465	1	11	localException3	Exception
    //   474	1	11	localException4	Exception
    //   482	1	11	localObject11	Object
    //   492	17	11	localException5	Exception
    //   517	16	11	localObject12	Object
    //   540	7	11	localObject13	Object
    //   551	1	11	localContext	Context
    //   276	9	12	localObject14	Object
    //   386	137	12	localObject15	Object
    //   529	6	12	localObject16	Object
    //   544	10	12	localObject17	Object
    //   4	464	13	localObject18	Object
    //   10	432	14	localObject19	Object
    //   7	374	15	localObject20	Object
    //   506	10	16	localException6	Exception
    //   67	69	17	str	String
    // Exception table:
    //   from	to	target	type
    //   69	78	231	java/lang/Exception
    //   248	253	266	java/lang/Exception
    //   257	261	266	java/lang/Exception
    //   69	78	276	finally
    //   292	296	309	java/lang/Exception
    //   301	306	309	java/lang/Exception
    //   111	115	317	java/lang/Exception
    //   123	128	317	java/lang/Exception
    //   131	141	328	java/lang/Exception
    //   345	349	365	java/lang/Exception
    //   354	359	365	java/lang/Exception
    //   131	141	376	finally
    //   402	406	419	java/lang/Exception
    //   411	416	419	java/lang/Exception
    //   174	178	427	java/lang/Exception
    //   187	192	427	java/lang/Exception
    //   141	154	439	finally
    //   154	170	448	finally
    //   141	154	465	java/lang/Exception
    //   154	170	474	java/lang/Exception
    //   78	91	479	finally
    //   91	107	487	finally
    //   78	91	492	java/lang/Exception
    //   91	107	506	java/lang/Exception
    //   336	341	529	finally
    //   238	243	540	finally
  }
  
  private static int getUid(Context paramContext)
  {
    try
    {
      int i = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 1).uid;
      return i;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return -1;
  }
  
  public static int getVersionCode(Context paramContext)
  {
    try
    {
      int i = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 16384).versionCode;
      return i;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return 0;
  }
  
  public static int getWidthPixels(Context paramContext)
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
    return localDisplayMetrics.widthPixels;
  }
}
