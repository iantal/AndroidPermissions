package com.lepeng.fastjson.serializer;

import java.util.Iterator;
import java.util.List;

public class FilterUtils
{
  public FilterUtils() {}
  
  public static boolean apply(JSONSerializer paramJSONSerializer, Object paramObject1, String paramString, Object paramObject2)
  {
    paramJSONSerializer = paramJSONSerializer.getPropertyFiltersDirect();
    if (paramJSONSerializer == null) {}
    do
    {
      while (!paramJSONSerializer.hasNext())
      {
        return true;
        paramJSONSerializer = paramJSONSerializer.iterator();
      }
    } while (((PropertyFilter)paramJSONSerializer.next()).apply(paramObject1, paramString, paramObject2));
    return false;
  }
  
  public static boolean applyName(JSONSerializer paramJSONSerializer, Object paramObject, String paramString)
  {
    Object localObject = paramJSONSerializer.getPropertyPreFiltersDirect();
    if (localObject == null) {}
    do
    {
      while (!((Iterator)localObject).hasNext())
      {
        return true;
        localObject = ((List)localObject).iterator();
      }
    } while (((PropertyPreFilter)((Iterator)localObject).next()).apply(paramJSONSerializer, paramObject, paramString));
    return false;
  }
  
  public static String processKey(JSONSerializer paramJSONSerializer, Object paramObject1, String paramString, Object paramObject2)
  {
    List localList = paramJSONSerializer.getNameFiltersDirect();
    paramJSONSerializer = paramString;
    if (localList != null) {
      paramJSONSerializer = localList.iterator();
    }
    for (;;)
    {
      if (!paramJSONSerializer.hasNext())
      {
        paramJSONSerializer = paramString;
        return paramJSONSerializer;
      }
      paramString = ((NameFilter)paramJSONSerializer.next()).process(paramObject1, paramString, paramObject2);
    }
  }
  
  public static Object processValue(JSONSerializer paramJSONSerializer, Object paramObject1, String paramString, Object paramObject2)
  {
    List localList = paramJSONSerializer.getValueFiltersDirect();
    paramJSONSerializer = paramObject2;
    if (localList != null) {
      paramJSONSerializer = localList.iterator();
    }
    for (;;)
    {
      if (!paramJSONSerializer.hasNext())
      {
        paramJSONSerializer = paramObject2;
        return paramJSONSerializer;
      }
      paramObject2 = ((ValueFilter)paramJSONSerializer.next()).process(paramObject1, paramString, paramObject2);
    }
  }
}
