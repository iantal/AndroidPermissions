package com.lepeng.fastjson.serializer;

import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.List;

public final class ListSerializer
  implements ObjectSerializer
{
  public static final ListSerializer instance = new ListSerializer();
  
  public ListSerializer() {}
  
  public final void write(JSONSerializer paramJSONSerializer, Object paramObject1, Object paramObject2, Type paramType)
  {
    int i = 0;
    boolean bool = paramJSONSerializer.isEnabled(SerializerFeature.WriteClassName);
    SerializeWriter localSerializeWriter = paramJSONSerializer.getWriter();
    Object localObject1;
    int j;
    SerialContext localSerialContext;
    label153:
    Object localObject2;
    Object localObject3;
    if ((bool) && ((paramType instanceof ParameterizedType)))
    {
      paramType = ((ParameterizedType)paramType).getActualTypeArguments()[0];
      if (paramObject1 == null)
      {
        if (localSerializeWriter.isEnabled(SerializerFeature.WriteNullListAsEmpty))
        {
          localSerializeWriter.write("[]");
          return;
        }
        localSerializeWriter.writeNull();
        return;
      }
      localObject1 = (List)paramObject1;
      int k = ((List)localObject1).size();
      j = k - 1;
      if (j == -1)
      {
        localSerializeWriter.append("[]");
        return;
      }
      localSerialContext = paramJSONSerializer.getContext();
      paramJSONSerializer.setContext(localSerialContext, paramObject1, paramObject2);
      if (k > 1)
      {
        try
        {
          if (!localSerializeWriter.isEnabled(SerializerFeature.PrettyFormat)) {
            break label299;
          }
          localSerializeWriter.append('[');
          paramJSONSerializer.incrementIndent();
          if (i >= k)
          {
            paramJSONSerializer.decrementIdent();
            paramJSONSerializer.println();
            localSerializeWriter.append(']');
            return;
          }
          if (i != 0) {
            localSerializeWriter.append(',');
          }
          paramJSONSerializer.println();
          localObject2 = ((List)localObject1).get(i);
          if (localObject2 != null) {
            if (paramJSONSerializer.containsReference(localObject2))
            {
              paramJSONSerializer.writeReference(localObject2);
            }
            else
            {
              localObject3 = paramJSONSerializer.getObjectWriter(localObject2.getClass());
              paramJSONSerializer.setContext(new SerialContext(localSerialContext, paramObject1, paramObject2));
              ((ObjectSerializer)localObject3).write(paramJSONSerializer, localObject2, Integer.valueOf(i), paramType);
            }
          }
        }
        finally
        {
          paramJSONSerializer.setContext(localSerialContext);
        }
        paramJSONSerializer.getWriter().writeNull();
        break label689;
      }
      label299:
      localSerializeWriter.append('[');
      i = 0;
    }
    for (;;)
    {
      if (i >= j)
      {
        localObject1 = ((List)localObject1).get(j);
        if (localObject1 != null) {
          break label528;
        }
        localSerializeWriter.append("null]");
      }
      for (;;)
      {
        paramJSONSerializer.setContext(localSerialContext);
        return;
        localObject2 = ((List)localObject1).get(i);
        if (localObject2 == null)
        {
          localSerializeWriter.append("null,");
          break label698;
        }
        localObject3 = localObject2.getClass();
        if (localObject3 == Integer.class)
        {
          localSerializeWriter.writeIntAndChar(((Integer)localObject2).intValue(), ',');
          break label698;
        }
        if (localObject3 == Long.class)
        {
          long l = ((Long)localObject2).longValue();
          if (bool)
          {
            localSerializeWriter.writeLongAndChar(l, 'L');
            localSerializeWriter.write(',');
            break label698;
          }
          localSerializeWriter.writeLongAndChar(l, ',');
          break label698;
        }
        paramJSONSerializer.setContext(new SerialContext(localSerialContext, paramObject1, paramObject2));
        if (paramJSONSerializer.containsReference(localObject2)) {
          paramJSONSerializer.writeReference(localObject2);
        }
        for (;;)
        {
          localSerializeWriter.append(',');
          break;
          paramJSONSerializer.getObjectWriter(localObject2.getClass()).write(paramJSONSerializer, localObject2, Integer.valueOf(i), paramType);
        }
        label528:
        localObject2 = localObject1.getClass();
        if (localObject2 == Integer.class)
        {
          localSerializeWriter.writeIntAndChar(((Integer)localObject1).intValue(), ']');
        }
        else
        {
          if (localObject2 != Long.class) {
            break;
          }
          if (bool)
          {
            localSerializeWriter.writeLongAndChar(((Long)localObject1).longValue(), 'L');
            localSerializeWriter.write(']');
          }
          else
          {
            localSerializeWriter.writeLongAndChar(((Long)localObject1).longValue(), ']');
          }
        }
      }
      paramJSONSerializer.setContext(new SerialContext(localSerialContext, paramObject1, paramObject2));
      if (paramJSONSerializer.containsReference(localObject1)) {
        paramJSONSerializer.writeReference(localObject1);
      }
      for (;;)
      {
        localSerializeWriter.append(']');
        break;
        paramJSONSerializer.getObjectWriter(localObject1.getClass()).write(paramJSONSerializer, localObject1, Integer.valueOf(j), paramType);
      }
      paramType = null;
      break;
      label689:
      i += 1;
      break label153;
      label698:
      i += 1;
    }
  }
}
