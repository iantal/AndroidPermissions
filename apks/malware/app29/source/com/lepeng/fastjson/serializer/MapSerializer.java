package com.lepeng.fastjson.serializer;

import com.lepeng.fastjson.JSON;
import java.lang.reflect.Type;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;

public class MapSerializer
  implements ObjectSerializer
{
  public static MapSerializer instance = new MapSerializer();
  
  public MapSerializer() {}
  
  public void write(JSONSerializer paramJSONSerializer, Object paramObject1, Object paramObject2, Type paramType)
  {
    SerializeWriter localSerializeWriter = paramJSONSerializer.getWriter();
    if (paramObject1 == null)
    {
      localSerializeWriter.writeNull();
      return;
    }
    paramType = (Map)paramObject1;
    if ((localSerializeWriter.isEnabled(SerializerFeature.SortField)) && (!(paramType instanceof SortedMap)) && (!(paramType instanceof LinkedHashMap))) {}
    for (;;)
    {
      try
      {
        localObject1 = new TreeMap(paramType);
        paramType = (Type)localObject1;
      }
      catch (Exception localException)
      {
        Object localObject1;
        SerialContext localSerialContext;
        int i;
        Object localObject3;
        Object localObject2;
        Object localObject4;
        continue;
      }
      if (paramJSONSerializer.containsReference(paramObject1))
      {
        paramJSONSerializer.writeReference(paramObject1);
        return;
      }
      localSerialContext = paramJSONSerializer.getContext();
      paramJSONSerializer.setContext(localSerialContext, paramObject1, paramObject2);
      try
      {
        localSerializeWriter.write('{');
        paramJSONSerializer.incrementIndent();
        i = 1;
        if (localSerializeWriter.isEnabled(SerializerFeature.WriteClassName))
        {
          localSerializeWriter.writeFieldName(JSON.DEFAULT_TYPE_KEY);
          localSerializeWriter.writeString(paramObject1.getClass().getName());
          i = 0;
        }
        Iterator localIterator = paramType.entrySet().iterator();
        paramObject2 = null;
        localObject1 = null;
        boolean bool = localIterator.hasNext();
        if (!bool)
        {
          paramJSONSerializer.setContext(localSerialContext);
          paramJSONSerializer.decrementIdent();
          if ((localSerializeWriter.isEnabled(SerializerFeature.PrettyFormat)) && (paramType.size() > 0)) {
            paramJSONSerializer.println();
          }
          localSerializeWriter.write('}');
          return;
        }
        localObject3 = (Map.Entry)localIterator.next();
        localObject2 = ((Map.Entry)localObject3).getValue();
        localObject4 = ((Map.Entry)localObject3).getKey();
        if ((localObject4 == null) || ((localObject4 instanceof String)))
        {
          localObject3 = (String)localObject4;
          if ((!FilterUtils.applyName(paramJSONSerializer, paramObject1, (String)localObject3)) || (!FilterUtils.apply(paramJSONSerializer, paramObject1, (String)localObject3, localObject2))) {
            continue;
          }
          localObject3 = FilterUtils.processKey(paramJSONSerializer, paramObject1, (String)localObject3, localObject2);
          localObject2 = FilterUtils.processValue(paramJSONSerializer, paramObject1, (String)localObject3, localObject2);
          if ((localObject2 == null) && (!paramJSONSerializer.isEnabled(SerializerFeature.WriteMapNullValue))) {
            continue;
          }
          if (i == 0) {
            localSerializeWriter.write(',');
          }
          if (localSerializeWriter.isEnabled(SerializerFeature.PrettyFormat)) {
            paramJSONSerializer.println();
          }
          localSerializeWriter.writeFieldName((String)localObject3, true);
          if (localObject2 != null) {
            continue;
          }
          localSerializeWriter.writeNull();
          i = 0;
          continue;
        }
        if (i != 0) {
          continue;
        }
      }
      finally
      {
        paramJSONSerializer.setContext(localSerialContext);
      }
      localSerializeWriter.write(',');
      paramJSONSerializer.write(localObject4);
      localSerializeWriter.write(':');
      continue;
      localObject3 = localObject2.getClass();
      if (localObject3 == localObject1)
      {
        paramObject2.write(paramJSONSerializer, localObject2, localObject4, null);
        i = 0;
      }
      else
      {
        paramObject2 = paramJSONSerializer.getObjectWriter((Class)localObject3);
        paramObject2.write(paramJSONSerializer, localObject2, localObject4, null);
        localObject1 = localObject3;
        i = 0;
      }
    }
  }
}
