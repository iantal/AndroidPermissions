package com.lepeng.fastjson.serializer;

import com.lepeng.fastjson.JSONAware;
import com.lepeng.fastjson.JSONException;
import com.lepeng.fastjson.JSONStreamAware;
import java.io.IOException;
import java.io.Writer;
import java.lang.reflect.Proxy;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.IdentityHashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;

public class JSONSerializer
{
  private SerialContext jdField_a_of_type_ComLepengFastjsonSerializerSerialContext;
  private final SerializeConfig jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig;
  private DateFormat jdField_a_of_type_JavaTextDateFormat;
  private IdentityHashMap<Object, SerialContext> jdField_a_of_type_JavaUtilIdentityHashMap = null;
  private final SerializeWriter b;
  private List<PropertyFilter> d = null;
  private List<ValueFilter> e = null;
  private String jdField_f_of_type_JavaLangString;
  private List<NameFilter> jdField_f_of_type_JavaUtilList = null;
  private List<PropertyPreFilter> g = null;
  private String k = "\t";
  private int m = 0;
  
  public JSONSerializer()
  {
    this(new SerializeWriter(), SerializeConfig.getGlobalInstance());
  }
  
  @Deprecated
  public JSONSerializer(JSONSerializerMap paramJSONSerializerMap)
  {
    this(new SerializeWriter(), paramJSONSerializerMap);
  }
  
  public JSONSerializer(SerializeConfig paramSerializeConfig)
  {
    this(new SerializeWriter(), paramSerializeConfig);
  }
  
  public JSONSerializer(SerializeWriter paramSerializeWriter)
  {
    this(paramSerializeWriter, SerializeConfig.getGlobalInstance());
  }
  
  public JSONSerializer(SerializeWriter paramSerializeWriter, SerializeConfig paramSerializeConfig)
  {
    this.b = paramSerializeWriter;
    this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig = paramSerializeConfig;
  }
  
  public static final void write(SerializeWriter paramSerializeWriter, Object paramObject)
  {
    new JSONSerializer(paramSerializeWriter).write(paramObject);
  }
  
  public static final void write(Writer paramWriter, Object paramObject)
  {
    SerializeWriter localSerializeWriter = new SerializeWriter();
    try
    {
      new JSONSerializer(localSerializeWriter).write(paramObject);
      localSerializeWriter.writeTo(paramWriter);
      return;
    }
    catch (IOException paramWriter)
    {
      throw new JSONException(paramWriter.getMessage(), paramWriter);
    }
    finally
    {
      localSerializeWriter.close();
    }
  }
  
  public void close()
  {
    this.b.close();
  }
  
  public void config(SerializerFeature paramSerializerFeature, boolean paramBoolean)
  {
    this.b.config(paramSerializerFeature, paramBoolean);
  }
  
  public boolean containsReference(Object paramObject)
  {
    if (this.jdField_a_of_type_JavaUtilIdentityHashMap == null) {
      return false;
    }
    return this.jdField_a_of_type_JavaUtilIdentityHashMap.containsKey(paramObject);
  }
  
  public void decrementIdent()
  {
    this.m -= 1;
  }
  
  public SerialContext getContext()
  {
    return this.jdField_a_of_type_ComLepengFastjsonSerializerSerialContext;
  }
  
  public DateFormat getDateFormat()
  {
    if ((this.jdField_a_of_type_JavaTextDateFormat == null) && (this.jdField_f_of_type_JavaLangString != null)) {
      this.jdField_a_of_type_JavaTextDateFormat = new SimpleDateFormat(this.jdField_f_of_type_JavaLangString);
    }
    return this.jdField_a_of_type_JavaTextDateFormat;
  }
  
  public String getDateFormatPattern()
  {
    if ((this.jdField_a_of_type_JavaTextDateFormat instanceof SimpleDateFormat)) {
      return ((SimpleDateFormat)this.jdField_a_of_type_JavaTextDateFormat).toPattern();
    }
    return this.jdField_f_of_type_JavaLangString;
  }
  
  public int getIndentCount()
  {
    return this.m;
  }
  
  public SerializeConfig getMapping()
  {
    return this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig;
  }
  
  public List<NameFilter> getNameFilters()
  {
    if (this.jdField_f_of_type_JavaUtilList == null) {
      this.jdField_f_of_type_JavaUtilList = new ArrayList();
    }
    return this.jdField_f_of_type_JavaUtilList;
  }
  
  public List<NameFilter> getNameFiltersDirect()
  {
    return this.jdField_f_of_type_JavaUtilList;
  }
  
  public ObjectSerializer getObjectWriter(Class<?> paramClass)
  {
    int j = 0;
    ObjectSerializer localObjectSerializer = (ObjectSerializer)this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig.get(paramClass);
    Object localObject = localObjectSerializer;
    if (localObjectSerializer == null)
    {
      if (!Map.class.isAssignableFrom(paramClass)) {
        break label61;
      }
      this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig.put(paramClass, MapSerializer.instance);
    }
    for (;;)
    {
      localObject = (ObjectSerializer)this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig.get(paramClass);
      return localObject;
      label61:
      if (List.class.isAssignableFrom(paramClass))
      {
        this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig.put(paramClass, ListSerializer.instance);
      }
      else if (Collection.class.isAssignableFrom(paramClass))
      {
        this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig.put(paramClass, CollectionSerializer.instance);
      }
      else if (Date.class.isAssignableFrom(paramClass))
      {
        this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig.put(paramClass, DateSerializer.instance);
      }
      else if (JSONAware.class.isAssignableFrom(paramClass))
      {
        this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig.put(paramClass, JSONAwareSerializer.instance);
      }
      else if (JSONStreamAware.class.isAssignableFrom(paramClass))
      {
        this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig.put(paramClass, JSONStreamAwareSerializer.instance);
      }
      else if ((paramClass.isEnum()) || ((paramClass.getSuperclass() != null) && (paramClass.getSuperclass().isEnum())))
      {
        this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig.put(paramClass, EnumSerializer.instance);
      }
      else if (paramClass.isArray())
      {
        localObject = paramClass.getComponentType();
        localObjectSerializer = getObjectWriter((Class)localObject);
        this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig.put(paramClass, new ArraySerializer((Class)localObject, localObjectSerializer));
      }
      else if (Throwable.class.isAssignableFrom(paramClass))
      {
        this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig.put(paramClass, new ExceptionSerializer(paramClass));
      }
      else if (TimeZone.class.isAssignableFrom(paramClass))
      {
        this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig.put(paramClass, TimeZoneSerializer.instance);
      }
      else if (Charset.class.isAssignableFrom(paramClass))
      {
        this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig.put(paramClass, ToStringSerializer.instance);
      }
      else if (Enumeration.class.isAssignableFrom(paramClass))
      {
        this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig.put(paramClass, EnumerationSeriliazer.instance);
      }
      else if (Calendar.class.isAssignableFrom(paramClass))
      {
        this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig.put(paramClass, CalendarSerializer.instance);
      }
      else
      {
        localObject = paramClass.getInterfaces();
        int n = localObject.length;
        int i = 0;
        for (;;)
        {
          if (i >= n) {
            i = 0;
          }
          for (;;)
          {
            if ((j == 0) && (i == 0)) {
              break label495;
            }
            localObject = getObjectWriter(paramClass.getSuperclass());
            this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig.put(paramClass, localObject);
            return localObject;
            localObjectSerializer = localObject[i];
            if (localObjectSerializer.getName().equals("net.sf.cglib.proxy.Factory"))
            {
              i = 0;
              j = 1;
            }
            else
            {
              if (!localObjectSerializer.getName().equals("javassist.util.proxy.ProxyObject")) {
                break;
              }
              i = 1;
            }
          }
          i += 1;
        }
        label495:
        if (Proxy.isProxyClass(paramClass)) {
          this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig.put(paramClass, this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig.createJavaBeanSerializer(paramClass));
        } else {
          this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig.put(paramClass, this.jdField_a_of_type_ComLepengFastjsonSerializerSerializeConfig.createJavaBeanSerializer(paramClass));
        }
      }
    }
  }
  
  public List<PropertyFilter> getPropertyFilters()
  {
    if (this.d == null) {
      this.d = new ArrayList();
    }
    return this.d;
  }
  
  public List<PropertyFilter> getPropertyFiltersDirect()
  {
    return this.d;
  }
  
  public List<PropertyPreFilter> getPropertyPreFilters()
  {
    if (this.g == null) {
      this.g = new ArrayList();
    }
    return this.g;
  }
  
  public List<PropertyPreFilter> getPropertyPreFiltersDirect()
  {
    return this.g;
  }
  
  public SerialContext getSerialContext(Object paramObject)
  {
    if (this.jdField_a_of_type_JavaUtilIdentityHashMap == null) {
      return null;
    }
    return (SerialContext)this.jdField_a_of_type_JavaUtilIdentityHashMap.get(paramObject);
  }
  
  public List<ValueFilter> getValueFilters()
  {
    if (this.e == null) {
      this.e = new ArrayList();
    }
    return this.e;
  }
  
  public List<ValueFilter> getValueFiltersDirect()
  {
    return this.e;
  }
  
  public SerializeWriter getWriter()
  {
    return this.b;
  }
  
  public void incrementIndent()
  {
    this.m += 1;
  }
  
  public boolean isEnabled(SerializerFeature paramSerializerFeature)
  {
    return this.b.isEnabled(paramSerializerFeature);
  }
  
  public final boolean isWriteClassName(Type paramType, Object paramObject)
  {
    if (!this.b.isEnabled(SerializerFeature.WriteClassName)) {}
    for (;;)
    {
      return false;
      if ((paramType == null) && (isEnabled(SerializerFeature.NotWriteRootClassName))) {
        if (this.jdField_a_of_type_ComLepengFastjsonSerializerSerialContext.getParent() != null) {
          break label47;
        }
      }
      label47:
      for (int i = 1; i == 0; i = 0) {
        return true;
      }
    }
  }
  
  public void println()
  {
    this.b.write('\n');
    int i = 0;
    for (;;)
    {
      if (i >= this.m) {
        return;
      }
      this.b.write(this.k);
      i += 1;
    }
  }
  
  public void setContext(SerialContext paramSerialContext)
  {
    this.jdField_a_of_type_ComLepengFastjsonSerializerSerialContext = paramSerialContext;
  }
  
  public void setContext(SerialContext paramSerialContext, Object paramObject1, Object paramObject2)
  {
    if (isEnabled(SerializerFeature.DisableCircularReferenceDetect)) {
      return;
    }
    this.jdField_a_of_type_ComLepengFastjsonSerializerSerialContext = new SerialContext(paramSerialContext, paramObject1, paramObject2);
    if (this.jdField_a_of_type_JavaUtilIdentityHashMap == null) {
      this.jdField_a_of_type_JavaUtilIdentityHashMap = new IdentityHashMap();
    }
    this.jdField_a_of_type_JavaUtilIdentityHashMap.put(paramObject1, this.jdField_a_of_type_ComLepengFastjsonSerializerSerialContext);
  }
  
  public void setDateFormat(String paramString)
  {
    this.jdField_f_of_type_JavaLangString = paramString;
    if (this.jdField_a_of_type_JavaTextDateFormat != null) {
      this.jdField_a_of_type_JavaTextDateFormat = null;
    }
  }
  
  public void setDateFormat(DateFormat paramDateFormat)
  {
    this.jdField_a_of_type_JavaTextDateFormat = paramDateFormat;
    if (this.jdField_f_of_type_JavaLangString != null) {
      this.jdField_f_of_type_JavaLangString = null;
    }
  }
  
  public String toString()
  {
    return this.b.toString();
  }
  
  public final void write(Object paramObject)
  {
    if (paramObject == null)
    {
      this.b.writeNull();
      return;
    }
    ObjectSerializer localObjectSerializer = getObjectWriter(paramObject.getClass());
    try
    {
      localObjectSerializer.write(this, paramObject, null, null);
      return;
    }
    catch (IOException paramObject)
    {
      throw new JSONException(paramObject.getMessage(), paramObject);
    }
  }
  
  public final void write(String paramString)
  {
    StringSerializer.instance.write(this, paramString);
  }
  
  public void writeNull()
  {
    this.b.writeNull();
  }
  
  public void writeReference(Object paramObject)
  {
    SerialContext localSerialContext2 = getContext();
    if (paramObject == localSerialContext2.getObject())
    {
      this.b.write("{\"$ref\":\"@\"}");
      return;
    }
    SerialContext localSerialContext3 = localSerialContext2.getParent();
    SerialContext localSerialContext1 = localSerialContext2;
    if (localSerialContext3 != null)
    {
      localSerialContext1 = localSerialContext2;
      if (paramObject == localSerialContext3.getObject())
      {
        this.b.write("{\"$ref\":\"..\"}");
        return;
      }
    }
    while (localSerialContext1.getParent() != null) {
      localSerialContext1 = localSerialContext1.getParent();
    }
    if (paramObject == localSerialContext1.getObject())
    {
      this.b.write("{\"$ref\":\"$\"}");
      return;
    }
    paramObject = getSerialContext(paramObject).getPath();
    this.b.write("{\"$ref\":\"");
    this.b.write(paramObject);
    this.b.write("\"}");
  }
  
  public final void writeWithFieldName(Object paramObject1, Object paramObject2)
  {
    writeWithFieldName(paramObject1, paramObject2, null);
  }
  
  public final void writeWithFieldName(Object paramObject1, Object paramObject2, Type paramType)
  {
    if (paramObject1 == null) {}
    try
    {
      this.b.writeNull();
      return;
    }
    catch (IOException paramObject1)
    {
      throw new JSONException(paramObject1.getMessage(), paramObject1);
    }
    getObjectWriter(paramObject1.getClass()).write(this, paramObject1, paramObject2, paramType);
  }
  
  public final void writeWithFormat(Object paramObject, String paramString)
  {
    if ((paramObject instanceof Date))
    {
      DateFormat localDateFormat = getDateFormat();
      Object localObject = localDateFormat;
      if (localDateFormat == null) {
        localObject = new SimpleDateFormat(paramString);
      }
      paramObject = ((DateFormat)localObject).format((Date)paramObject);
      this.b.writeString(paramObject);
      return;
    }
    write(paramObject);
  }
}
