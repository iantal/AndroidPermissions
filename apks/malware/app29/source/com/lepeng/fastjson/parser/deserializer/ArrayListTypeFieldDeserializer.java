package com.lepeng.fastjson.parser.deserializer;

import com.lepeng.fastjson.JSONException;
import com.lepeng.fastjson.parser.DefaultJSONParser;
import com.lepeng.fastjson.parser.Feature;
import com.lepeng.fastjson.parser.JSONLexer;
import com.lepeng.fastjson.parser.JSONToken;
import com.lepeng.fastjson.parser.ParseContext;
import com.lepeng.fastjson.parser.ParserConfig;
import com.lepeng.fastjson.util.FieldInfo;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;

public class ArrayListTypeFieldDeserializer
  extends FieldDeserializer
{
  private ObjectDeserializer jdField_a_of_type_ComLepengFastjsonParserDeserializerObjectDeserializer;
  private final Type jdField_a_of_type_JavaLangReflectType;
  private int l;
  
  public ArrayListTypeFieldDeserializer(ParserConfig paramParserConfig, Class<?> paramClass, FieldInfo paramFieldInfo)
  {
    super(paramClass, paramFieldInfo);
    if ((getFieldType() instanceof ParameterizedType))
    {
      this.jdField_a_of_type_JavaLangReflectType = ((ParameterizedType)getFieldType()).getActualTypeArguments()[0];
      return;
    }
    this.jdField_a_of_type_JavaLangReflectType = Object.class;
  }
  
  public int getFastMatchToken()
  {
    return 14;
  }
  
  public final void parseArray(DefaultJSONParser paramDefaultJSONParser, Type paramType, Collection paramCollection)
  {
    Object localObject2 = this.jdField_a_of_type_JavaLangReflectType;
    Object localObject3 = this.jdField_a_of_type_ComLepengFastjsonParserDeserializerObjectDeserializer;
    Object localObject1 = localObject2;
    TypeVariable localTypeVariable;
    ParameterizedType localParameterizedType;
    if ((localObject2 instanceof TypeVariable))
    {
      localObject1 = localObject2;
      if ((paramType instanceof ParameterizedType))
      {
        localTypeVariable = (TypeVariable)localObject2;
        localParameterizedType = (ParameterizedType)paramType;
        if (!(localParameterizedType.getRawType() instanceof Class)) {
          break label429;
        }
      }
    }
    label99:
    label422:
    label429:
    for (localObject1 = (Class)localParameterizedType.getRawType();; localObject1 = null)
    {
      int i;
      if (localObject1 != null)
      {
        int j = ((Class)localObject1).getTypeParameters().length;
        i = 0;
        if (i < j) {}
      }
      else
      {
        i = -1;
        localObject1 = localObject2;
        if (i == -1) {
          break label422;
        }
        localObject2 = localParameterizedType.getActualTypeArguments()[i];
        localObject1 = localObject2;
        if (localObject2.equals(this.jdField_a_of_type_JavaLangReflectType)) {
          break label422;
        }
        localObject3 = paramDefaultJSONParser.getConfig().getDeserializer((Type)localObject2);
        localObject1 = localObject2;
      }
      for (localObject2 = localObject3;; localObject2 = localObject3)
      {
        localObject3 = paramDefaultJSONParser.getLexer();
        if (((JSONLexer)localObject3).token() != 14)
        {
          paramCollection = "exepct '[', but " + JSONToken.name(((JSONLexer)localObject3).token());
          paramDefaultJSONParser = paramCollection;
          if (paramType != null) {
            paramDefaultJSONParser = paramCollection + ", type : " + paramType;
          }
          throw new JSONException(paramDefaultJSONParser);
          if (localObject1.getTypeParameters()[i].getName().equals(localTypeVariable.getName())) {
            break label99;
          }
          i += 1;
          break;
        }
        paramType = (Type)localObject2;
        if (localObject2 == null)
        {
          paramType = paramDefaultJSONParser.getConfig().getDeserializer((Type)localObject1);
          this.jdField_a_of_type_ComLepengFastjsonParserDeserializerObjectDeserializer = paramType;
          this.l = this.jdField_a_of_type_ComLepengFastjsonParserDeserializerObjectDeserializer.getFastMatchToken();
        }
        ((JSONLexer)localObject3).nextToken(this.l);
        i = 0;
        for (;;)
        {
          if (((JSONLexer)localObject3).isEnabled(Feature.AllowArbitraryCommas)) {}
          for (;;)
          {
            if (((JSONLexer)localObject3).token() != 16)
            {
              if (((JSONLexer)localObject3).token() != 15) {
                break;
              }
              ((JSONLexer)localObject3).nextToken(16);
              return;
            }
            ((JSONLexer)localObject3).nextToken();
          }
          paramCollection.add(paramType.deserialze(paramDefaultJSONParser, (Type)localObject1, Integer.valueOf(i)));
          paramDefaultJSONParser.checkListResolve(paramCollection);
          if (((JSONLexer)localObject3).token() == 16) {
            ((JSONLexer)localObject3).nextToken(this.l);
          }
          i += 1;
        }
      }
    }
  }
  
  public void parseField(DefaultJSONParser paramDefaultJSONParser, Object paramObject, Type paramType, Map<String, Object> paramMap)
  {
    if (paramDefaultJSONParser.getLexer().token() == 8)
    {
      setValue(paramObject, null);
      return;
    }
    ArrayList localArrayList = new ArrayList();
    ParseContext localParseContext = paramDefaultJSONParser.getContext();
    paramDefaultJSONParser.setContext(localParseContext, paramObject, this.fieldInfo.getName());
    parseArray(paramDefaultJSONParser, paramType, localArrayList);
    paramDefaultJSONParser.setContext(localParseContext);
    if (paramObject == null)
    {
      paramMap.put(this.fieldInfo.getName(), localArrayList);
      return;
    }
    setValue(paramObject, localArrayList);
  }
}
