package com.lepeng.fastjson.parser.deserializer;

import com.lepeng.fastjson.JSONException;
import com.lepeng.fastjson.parser.DefaultJSONParser;
import com.lepeng.fastjson.parser.JSONLexer;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;

public class EnumDeserializer
  implements ObjectDeserializer
{
  private final Class<?> a;
  private final Map<Integer, Enum> b = new HashMap();
  private final Map<String, Enum> c = new HashMap();
  
  public EnumDeserializer(Class<?> paramClass)
  {
    this.a = paramClass;
    int j;
    int i;
    do
    {
      try
      {
        arrayOfObject = (Object[])paramClass.getMethod("values", new Class[0]).invoke(null, new Object[0]);
        j = arrayOfObject.length;
        i = 0;
      }
      catch (Exception localException)
      {
        Object[] arrayOfObject;
        Enum localEnum;
        throw new JSONException("init enum values error, " + paramClass.getName());
      }
      localEnum = (Enum)arrayOfObject[i];
      this.b.put(Integer.valueOf(localEnum.ordinal()), localEnum);
      this.c.put(localEnum.name(), localEnum);
      i += 1;
    } while (i < j);
  }
  
  public <T> T deserialze(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject)
  {
    try
    {
      paramType = paramDefaultJSONParser.getLexer();
      if (paramType.token() == 2)
      {
        paramDefaultJSONParser = Integer.valueOf(paramType.intValue());
        paramType.nextToken(16);
        paramType = this.b.get(paramDefaultJSONParser);
        if (paramType != null) {
          return paramType;
        }
        throw new JSONException("parse enum " + this.a.getName() + " error, value : " + paramDefaultJSONParser);
      }
    }
    catch (JSONException paramDefaultJSONParser)
    {
      throw paramDefaultJSONParser;
      if (paramType.token() == 4)
      {
        paramDefaultJSONParser = paramType.stringVal();
        paramType.nextToken(16);
        if (paramDefaultJSONParser.length() == 0) {
          return null;
        }
        this.c.get(paramDefaultJSONParser);
        return Enum.valueOf(this.a, paramDefaultJSONParser);
      }
      if (paramType.token() == 8)
      {
        paramType.nextToken(16);
        return null;
      }
    }
    catch (Throwable paramDefaultJSONParser)
    {
      throw new JSONException(paramDefaultJSONParser.getMessage(), paramDefaultJSONParser);
    }
    paramDefaultJSONParser = paramDefaultJSONParser.parse();
    throw new JSONException("parse enum " + this.a.getName() + " error, value : " + paramDefaultJSONParser);
    return paramType;
  }
  
  public int getFastMatchToken()
  {
    return 2;
  }
}
