package com.lepeng.fastjson.parser.deserializer;

import com.lepeng.fastjson.JSONException;
import com.lepeng.fastjson.parser.DefaultJSONParser;
import com.lepeng.fastjson.parser.JSONScanner;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;

public class DateDeserializer
  extends AbstractDateDeserializer
  implements ObjectDeserializer
{
  public static final DateDeserializer instance = new DateDeserializer();
  
  public DateDeserializer() {}
  
  protected <T> T cast(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject1, Object paramObject2)
  {
    paramObject1 = null;
    if (paramObject2 == null) {
      paramType = null;
    }
    do
    {
      do
      {
        return paramType;
        paramType = paramObject2;
      } while ((paramObject2 instanceof Date));
      if ((paramObject2 instanceof Number)) {
        return new Date(((Number)paramObject2).longValue());
      }
      if (!(paramObject2 instanceof String)) {
        break;
      }
      paramObject2 = (String)paramObject2;
      paramType = paramObject1;
    } while (paramObject2.length() == 0);
    paramType = new JSONScanner(paramObject2);
    try
    {
      if (paramType.scanISO8601DateIfMatch(false))
      {
        paramDefaultJSONParser = paramType.getCalendar().getTime();
        return paramDefaultJSONParser;
      }
    }
    finally
    {
      paramType.close();
    }
    paramType.close();
    paramDefaultJSONParser = paramDefaultJSONParser.getDateFormat();
    try
    {
      paramDefaultJSONParser = paramDefaultJSONParser.parse(paramObject2);
      return paramDefaultJSONParser;
    }
    catch (ParseException paramDefaultJSONParser)
    {
      return new Date(Long.parseLong(paramObject2));
    }
    throw new JSONException("parse error");
  }
  
  public int getFastMatchToken()
  {
    return 2;
  }
}
