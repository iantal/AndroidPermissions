package com.lepeng.fastjson.util;

import com.lepeng.fastjson.JSONException;
import com.lepeng.fastjson.annotation.JSONCreator;
import com.lepeng.fastjson.annotation.JSONField;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

public class DeserializeBeanInfo
{
  private Constructor<?> jdField_a_of_type_JavaLangReflectConstructor;
  private Method jdField_a_of_type_JavaLangReflectMethod;
  private Constructor<?> b;
  private final Class<?> clazz;
  private final List<FieldInfo> h = new ArrayList();
  
  public DeserializeBeanInfo(Class<?> paramClass)
  {
    this.clazz = paramClass;
  }
  
  public static DeserializeBeanInfo computeSetters(Class<?> paramClass, Type paramType)
  {
    DeserializeBeanInfo localDeserializeBeanInfo = new DeserializeBeanInfo(paramClass);
    Object localObject1 = getDefaultConstructor(paramClass);
    Object localObject2;
    int j;
    int i;
    int k;
    if (localObject1 != null)
    {
      ((Constructor)localObject1).setAccessible(true);
      localDeserializeBeanInfo.setDefaultConstructor((Constructor)localObject1);
      localObject2 = paramClass.getMethods();
      j = localObject2.length;
      i = 0;
      if (i >= j)
      {
        localObject3 = paramClass.getFields();
        k = localObject3.length;
        i = 0;
        if (i < k) {
          break label815;
        }
        localObject1 = paramClass.getMethods();
        j = localObject1.length;
        i = 0;
        if (i < j) {
          break label973;
        }
      }
    }
    else
    {
      for (;;)
      {
        return localDeserializeBeanInfo;
        if ((localObject1 != null) || (paramClass.isInterface()) || (Modifier.isAbstract(paramClass.getModifiers()))) {
          break;
        }
        localObject1 = getCreatorConstructor(paramClass);
        if (localObject1 != null)
        {
          ((Constructor)localObject1).setAccessible(true);
          localDeserializeBeanInfo.setCreatorConstructor((Constructor)localObject1);
          i = 0;
          while (i < ((Constructor)localObject1).getParameterTypes().length)
          {
            paramType = localObject1.getParameterAnnotations()[i];
            k = paramType.length;
            j = 0;
            for (;;)
            {
              if (j >= k) {}
              for (paramType = null;; paramType = (JSONField)localObject2)
              {
                if (paramType != null) {
                  break label213;
                }
                throw new JSONException("illegal json creator");
                localObject2 = paramType[j];
                if (!(localObject2 instanceof JSONField)) {
                  break;
                }
              }
              j += 1;
            }
            label213:
            localObject2 = localObject1.getParameterTypes()[i];
            localObject3 = localObject1.getGenericParameterTypes()[i];
            localObject4 = getField(paramClass, paramType.name());
            localDeserializeBeanInfo.add(new FieldInfo(paramType.name(), paramClass, (Class)localObject2, (Type)localObject3, (Field)localObject4));
            i += 1;
          }
        }
        else
        {
          localObject1 = getFactoryMethod(paramClass);
          if (localObject1 == null) {
            break label440;
          }
          ((Method)localObject1).setAccessible(true);
          localDeserializeBeanInfo.setFactoryMethod((Method)localObject1);
          i = 0;
          while (i < ((Method)localObject1).getParameterTypes().length)
          {
            paramType = localObject1.getParameterAnnotations()[i];
            k = paramType.length;
            j = 0;
            for (;;)
            {
              if (j >= k) {}
              for (paramType = null;; paramType = (JSONField)localObject2)
              {
                if (paramType != null) {
                  break label377;
                }
                throw new JSONException("illegal json creator");
                localObject2 = paramType[j];
                if (!(localObject2 instanceof JSONField)) {
                  break;
                }
              }
              j += 1;
            }
            label377:
            localObject2 = localObject1.getParameterTypes()[i];
            localObject3 = localObject1.getGenericParameterTypes()[i];
            localObject4 = getField(paramClass, paramType.name());
            localDeserializeBeanInfo.add(new FieldInfo(paramType.name(), paramClass, (Class)localObject2, (Type)localObject3, (Field)localObject4));
            i += 1;
          }
        }
      }
      label440:
      throw new JSONException("default constructor not found. " + paramClass);
    }
    Object localObject3 = localObject2[i];
    Object localObject4 = ((Method)localObject3).getName();
    if (((String)localObject4).length() < 4) {}
    label486:
    while ((Modifier.isStatic(((Method)localObject3).getModifiers())) || ((!((Method)localObject3).getReturnType().equals(Void.TYPE)) && (!((Method)localObject3).getReturnType().equals(paramClass))) || (((Method)localObject3).getParameterTypes().length != 1))
    {
      i += 1;
      break;
    }
    localObject1 = (JSONField)((Method)localObject3).getAnnotation(JSONField.class);
    if (localObject1 == null) {
      localObject1 = TypeUtils.getSupperMethodAnnotation(paramClass, (Method)localObject3);
    }
    for (;;)
    {
      if (localObject1 != null)
      {
        if (!((JSONField)localObject1).deserialize()) {
          break label486;
        }
        if (((JSONField)localObject1).name().length() != 0)
        {
          localDeserializeBeanInfo.add(new FieldInfo(((JSONField)localObject1).name(), (Method)localObject3, null, paramClass, paramType));
          ((Method)localObject3).setAccessible(true);
          break label486;
        }
      }
      if (!((String)localObject4).startsWith("set")) {
        break label486;
      }
      k = ((String)localObject4).charAt(3);
      if (k == 95) {
        localObject1 = ((String)localObject4).substring(4);
      }
      JSONField localJSONField;
      for (;;)
      {
        localObject4 = getField(paramClass, (String)localObject1);
        if (localObject4 == null) {
          break label786;
        }
        localJSONField = (JSONField)((Field)localObject4).getAnnotation(JSONField.class);
        if ((localJSONField == null) || (localJSONField.name().length() == 0)) {
          break label786;
        }
        localDeserializeBeanInfo.add(new FieldInfo(localJSONField.name(), (Method)localObject3, (Field)localObject4, paramClass, paramType));
        break;
        if (k == 102) {
          localObject1 = ((String)localObject4).substring(3);
        } else {
          localObject1 = Character.toLowerCase(((String)localObject4).charAt(3)) + ((String)localObject4).substring(4);
        }
      }
      label786:
      localDeserializeBeanInfo.add(new FieldInfo((String)localObject1, (Method)localObject3, null, paramClass, paramType));
      ((Method)localObject3).setAccessible(true);
      break label486;
      label815:
      localObject4 = localObject3[i];
      if (Modifier.isStatic(((Field)localObject4).getModifiers()))
      {
        i += 1;
        break;
      }
      localObject1 = localDeserializeBeanInfo.getFieldList().iterator();
      j = 0;
      for (;;)
      {
        if (!((Iterator)localObject1).hasNext())
        {
          if (j != 0) {
            break;
          }
          localObject2 = ((Field)localObject4).getName();
          localJSONField = (JSONField)((Field)localObject4).getAnnotation(JSONField.class);
          localObject1 = localObject2;
          if (localJSONField != null)
          {
            localObject1 = localObject2;
            if (localJSONField.name().length() != 0) {
              localObject1 = localJSONField.name();
            }
          }
          localDeserializeBeanInfo.add(new FieldInfo((String)localObject1, null, (Field)localObject4, paramClass, paramType));
          break;
        }
        if (((FieldInfo)((Iterator)localObject1).next()).getName().equals(((Field)localObject4).getName())) {
          j = 1;
        }
      }
      label973:
      localObject2 = localObject1[i];
      localObject3 = ((Method)localObject2).getName();
      if (((String)localObject3).length() < 4) {}
      for (;;)
      {
        i += 1;
        break;
        if ((!Modifier.isStatic(((Method)localObject2).getModifiers())) && (((String)localObject3).startsWith("get")) && (((Method)localObject2).getParameterTypes().length == 0) && ((Collection.class.isAssignableFrom(((Method)localObject2).getReturnType())) || (Map.class.isAssignableFrom(((Method)localObject2).getReturnType())) || (AtomicBoolean.class == ((Method)localObject2).getReturnType()) || (AtomicInteger.class == ((Method)localObject2).getReturnType()) || (AtomicLong.class == ((Method)localObject2).getReturnType())))
        {
          localObject3 = Character.toLowerCase(((String)localObject3).charAt(3)) + ((String)localObject3).substring(4);
          if (localDeserializeBeanInfo.getField((String)localObject3) == null)
          {
            localDeserializeBeanInfo.add(new FieldInfo((String)localObject3, (Method)localObject2, null, paramClass, paramType));
            ((Method)localObject2).setAccessible(true);
          }
        }
      }
    }
  }
  
  public static Constructor<?> getCreatorConstructor(Class<?> paramClass)
  {
    paramClass = paramClass.getDeclaredConstructors();
    int j = paramClass.length;
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return null;
      }
      Constructor<?> localConstructor = paramClass[i];
      if ((JSONCreator)localConstructor.getAnnotation(JSONCreator.class) != null) {
        return localConstructor;
      }
      i += 1;
    }
  }
  
  public static Constructor<?> getDefaultConstructor(Class<?> paramClass)
  {
    Object localObject1 = null;
    Object localObject2 = null;
    if (Modifier.isAbstract(paramClass.getModifiers())) {}
    label30:
    label35:
    do
    {
      do
      {
        do
        {
          return localObject2;
          arrayOfConstructor = paramClass.getDeclaredConstructors();
          j = arrayOfConstructor.length;
          i = 0;
          if (i < j) {
            break;
          }
          localObject2 = localObject1;
        } while (localObject1 != null);
        localObject2 = localObject1;
      } while (!paramClass.isMemberClass());
      localObject2 = localObject1;
    } while (Modifier.isStatic(paramClass.getModifiers()));
    Constructor[] arrayOfConstructor = paramClass.getDeclaredConstructors();
    int j = arrayOfConstructor.length;
    int i = 0;
    for (;;)
    {
      localObject2 = localObject1;
      if (i >= j) {
        break;
      }
      localObject2 = arrayOfConstructor[i];
      if ((((Constructor)localObject2).getParameterTypes().length == 1) && (localObject2.getParameterTypes()[0].equals(paramClass.getDeclaringClass())))
      {
        return localObject2;
        localObject2 = arrayOfConstructor[i];
        if (((Constructor)localObject2).getParameterTypes().length == 0)
        {
          localObject1 = localObject2;
          break label35;
        }
        i += 1;
        break label30;
      }
      i += 1;
    }
  }
  
  public static Method getFactoryMethod(Class<?> paramClass)
  {
    Method[] arrayOfMethod = paramClass.getDeclaredMethods();
    int j = arrayOfMethod.length;
    int i = 0;
    if (i >= j) {
      return null;
    }
    Method localMethod = arrayOfMethod[i];
    if (!Modifier.isStatic(localMethod.getModifiers())) {}
    while ((!paramClass.isAssignableFrom(localMethod.getReturnType())) || ((JSONCreator)localMethod.getAnnotation(JSONCreator.class) == null))
    {
      i += 1;
      break;
    }
    return localMethod;
  }
  
  public static Field getField(Class<?> paramClass, String paramString)
  {
    try
    {
      paramClass = paramClass.getDeclaredField(paramString);
      return paramClass;
    }
    catch (Exception paramClass) {}
    return null;
  }
  
  public boolean add(FieldInfo paramFieldInfo)
  {
    Iterator localIterator = this.h.iterator();
    do
    {
      if (!localIterator.hasNext())
      {
        this.h.add(paramFieldInfo);
        return true;
      }
    } while (!((FieldInfo)localIterator.next()).getName().equals(paramFieldInfo.getName()));
    return false;
  }
  
  public Class<?> getClazz()
  {
    return this.clazz;
  }
  
  public Constructor<?> getCreatorConstructor()
  {
    return this.b;
  }
  
  public Constructor<?> getDefaultConstructor()
  {
    return this.jdField_a_of_type_JavaLangReflectConstructor;
  }
  
  public Method getFactoryMethod()
  {
    return this.jdField_a_of_type_JavaLangReflectMethod;
  }
  
  public FieldInfo getField(String paramString)
  {
    Iterator localIterator = this.h.iterator();
    FieldInfo localFieldInfo;
    do
    {
      if (!localIterator.hasNext()) {
        return null;
      }
      localFieldInfo = (FieldInfo)localIterator.next();
    } while (!localFieldInfo.getName().equals(paramString));
    return localFieldInfo;
  }
  
  public List<FieldInfo> getFieldList()
  {
    return this.h;
  }
  
  public void setCreatorConstructor(Constructor<?> paramConstructor)
  {
    this.b = paramConstructor;
  }
  
  public void setDefaultConstructor(Constructor<?> paramConstructor)
  {
    this.jdField_a_of_type_JavaLangReflectConstructor = paramConstructor;
  }
  
  public void setFactoryMethod(Method paramMethod)
  {
    this.jdField_a_of_type_JavaLangReflectMethod = paramMethod;
  }
}
