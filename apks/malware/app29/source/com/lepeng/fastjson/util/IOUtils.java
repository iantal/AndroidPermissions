package com.lepeng.fastjson.util;

import com.lepeng.fastjson.JSONException;
import java.io.Closeable;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.CharacterCodingException;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CoderResult;

public class IOUtils
{
  static final int[] a = { 9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, Integer.MAX_VALUE };
  static final char[] b;
  static final char[] c;
  static final char[] digits = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122 };
  
  static
  {
    b = new char[] { 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57 };
    c = new char[] { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 };
  }
  
  public IOUtils() {}
  
  public static void close(Closeable paramCloseable)
  {
    if (paramCloseable != null) {}
    try
    {
      paramCloseable.close();
      return;
    }
    catch (Exception paramCloseable) {}
  }
  
  public static void decode(CharsetDecoder paramCharsetDecoder, ByteBuffer paramByteBuffer, CharBuffer paramCharBuffer)
  {
    try
    {
      paramByteBuffer = paramCharsetDecoder.decode(paramByteBuffer, paramCharBuffer, true);
      if (!paramByteBuffer.isUnderflow()) {
        paramByteBuffer.throwException();
      }
      paramCharsetDecoder = paramCharsetDecoder.flush(paramCharBuffer);
      if (!paramCharsetDecoder.isUnderflow()) {
        paramCharsetDecoder.throwException();
      }
      return;
    }
    catch (CharacterCodingException paramCharsetDecoder)
    {
      throw new JSONException(paramCharsetDecoder.getMessage(), paramCharsetDecoder);
    }
  }
  
  public static void getChars(byte paramByte, int paramInt, char[] paramArrayOfChar)
  {
    int i = 0;
    int j = paramByte;
    int k = paramInt;
    if (paramByte < 0)
    {
      i = 45;
      j = -paramByte;
      k = paramInt;
    }
    for (;;)
    {
      paramByte = 52429 * j >>> 19;
      k -= 1;
      paramArrayOfChar[k] = digits[(j - ((paramByte << 3) + (paramByte << 1)))];
      if (paramByte == 0)
      {
        if (i != 0) {
          paramArrayOfChar[(k - 1)] = i;
        }
        return;
      }
      j = paramByte;
    }
  }
  
  public static void getChars(int paramInt1, int paramInt2, char[] paramArrayOfChar)
  {
    int j;
    int i;
    if (paramInt1 < 0)
    {
      j = -paramInt1;
      i = 45;
      paramInt1 = paramInt2;
      paramInt2 = j;
    }
    for (;;)
    {
      if (paramInt2 < 65536) {}
      for (;;)
      {
        j = 52429 * paramInt2 >>> 19;
        paramInt1 -= 1;
        paramArrayOfChar[paramInt1] = digits[(paramInt2 - ((j << 3) + (j << 1)))];
        if (j == 0)
        {
          if (i != 0) {
            paramArrayOfChar[(paramInt1 - 1)] = i;
          }
          return;
          j = paramInt2 / 100;
          paramInt2 -= (j << 6) + (j << 5) + (j << 2);
          paramInt1 -= 1;
          paramArrayOfChar[paramInt1] = c[paramInt2];
          paramInt1 -= 1;
          paramArrayOfChar[paramInt1] = b[paramInt2];
          paramInt2 = j;
          break;
        }
        paramInt2 = j;
      }
      i = 0;
      j = paramInt1;
      paramInt1 = paramInt2;
      paramInt2 = j;
    }
  }
  
  public static void getChars(long paramLong, int paramInt, char[] paramArrayOfChar)
  {
    int i;
    if (paramLong < 0L)
    {
      paramLong = -paramLong;
      i = 45;
    }
    for (;;)
    {
      int k;
      int j;
      if (paramLong <= 2147483647L)
      {
        k = (int)paramLong;
        j = paramInt;
        paramInt = k;
        label31:
        if (paramInt >= 65536) {
          break label149;
        }
      }
      for (;;)
      {
        k = 52429 * paramInt >>> 19;
        j -= 1;
        paramArrayOfChar[j] = digits[(paramInt - ((k << 3) + (k << 1)))];
        if (k == 0)
        {
          if (i != 0) {
            paramArrayOfChar[(j - 1)] = i;
          }
          return;
          long l = paramLong / 100L;
          j = (int)(paramLong - ((l << 6) + (l << 5) + (l << 2)));
          paramInt -= 1;
          paramArrayOfChar[paramInt] = c[j];
          paramInt -= 1;
          paramArrayOfChar[paramInt] = b[j];
          paramLong = l;
          break;
          label149:
          k = paramInt / 100;
          paramInt -= (k << 6) + (k << 5) + (k << 2);
          j -= 1;
          paramArrayOfChar[j] = c[paramInt];
          j -= 1;
          paramArrayOfChar[j] = b[paramInt];
          paramInt = k;
          break label31;
        }
        paramInt = k;
      }
      i = 0;
    }
  }
  
  public static int stringSize(int paramInt)
  {
    int i = 0;
    for (;;)
    {
      if (paramInt <= a[i]) {
        return i + 1;
      }
      i += 1;
    }
  }
  
  public static int stringSize(long paramLong)
  {
    int i = 1;
    long l = 10L;
    for (;;)
    {
      if (i >= 19) {
        return 19;
      }
      if (paramLong < l) {
        break;
      }
      l *= 10L;
      i += 1;
    }
    return i;
  }
}
