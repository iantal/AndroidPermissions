package com.lepeng.utils.reflect;

import com.lepeng.utils.annotation.sqlite.Id;
import com.lepeng.utils.annotation.sqlite.Table;
import com.lepeng.utils.datastorage.db.table.ManyToOne;
import com.lepeng.utils.datastorage.db.table.OneToMany;
import com.lepeng.utils.datastorage.db.table.Property;
import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.util.ArrayList;
import java.util.List;

public class ClassUtils
{
  public ClassUtils() {}
  
  private static Field[] getFields(Class<?> paramClass)
  {
    Field[] arrayOfField1 = paramClass.getDeclaredFields();
    paramClass = paramClass.getSuperclass().getDeclaredFields();
    Field[] arrayOfField2 = new Field[arrayOfField1.length + paramClass.length];
    System.arraycopy(arrayOfField1, 0, arrayOfField2, 0, arrayOfField1.length);
    System.arraycopy(paramClass, 0, arrayOfField2, arrayOfField1.length, paramClass.length);
    return arrayOfField2;
  }
  
  public static List<ManyToOne> getManyToOneList(Class<?> paramClass)
  {
    ArrayList localArrayList = new ArrayList();
    int j;
    int i;
    do
    {
      try
      {
        arrayOfField = getFields(paramClass);
        j = arrayOfField.length;
        i = 0;
      }
      catch (Exception paramClass)
      {
        Field[] arrayOfField;
        Field localField;
        ManyToOne localManyToOne;
        throw new RuntimeException(paramClass.getMessage(), paramClass);
      }
      localField = arrayOfField[i];
      if ((!FieldUtils.isTransient(localField)) && (FieldUtils.isManyToOne(localField)))
      {
        localManyToOne = new ManyToOne();
        localManyToOne.setManyClass(localField.getType());
        localManyToOne.setColumn(FieldUtils.getColumnByField(localField));
        localManyToOne.setFieldName(localField.getName());
        localManyToOne.setDataType(localField.getType());
        localManyToOne.setSet(FieldUtils.getFieldSetMethod(paramClass, localField));
        localManyToOne.setGet(FieldUtils.getFieldGetMethod(paramClass, localField));
        localArrayList.add(localManyToOne);
      }
      i += 1;
    } while (i < j);
    return localArrayList;
  }
  
  public static List<OneToMany> getOneToManyList(Class<?> paramClass)
  {
    ArrayList localArrayList = new ArrayList();
    for (;;)
    {
      int j;
      int i;
      try
      {
        arrayOfField = getFields(paramClass);
        j = arrayOfField.length;
        i = 0;
      }
      catch (Exception paramClass)
      {
        Field[] arrayOfField;
        Field localField;
        OneToMany localOneToMany;
        Class localClass;
        throw new RuntimeException(paramClass.getMessage(), paramClass);
      }
      localField = arrayOfField[i];
      if ((!FieldUtils.isTransient(localField)) && (FieldUtils.isOneToMany(localField)))
      {
        localOneToMany = new OneToMany();
        localOneToMany.setColumn(FieldUtils.getColumnByField(localField));
        localOneToMany.setFieldName(localField.getName());
        if ((localField.getGenericType() instanceof ParameterizedType))
        {
          localClass = (Class)((ParameterizedType)localField.getGenericType()).getActualTypeArguments()[0];
          if (localClass != null) {
            localOneToMany.setOneClass(localClass);
          }
          localOneToMany.setDataType(localField.getClass());
          localOneToMany.setSet(FieldUtils.getFieldSetMethod(paramClass, localField));
          localOneToMany.setGet(FieldUtils.getFieldGetMethod(paramClass, localField));
          localArrayList.add(localOneToMany);
        }
        else
        {
          throw new IllegalArgumentException("getOneToManyList Exception:" + localField.getName() + "'s type is null");
        }
      }
      while (i >= j)
      {
        return localArrayList;
        i += 1;
      }
    }
  }
  
  private static String getPrimaryKeyColumn(Class<?> paramClass)
  {
    Object localObject2 = getFields(paramClass);
    if (localObject2 != null)
    {
      int j = localObject2.length;
      int i = 0;
      paramClass = null;
      for (;;)
      {
        Object localObject1;
        if (i >= j) {
          localObject1 = null;
        }
        do
        {
          if (paramClass == null) {
            break;
          }
          localObject2 = paramClass.column();
          if (localObject2 != null)
          {
            paramClass = (Class<?>)localObject2;
            if (((String)localObject2).trim().length() != 0) {}
          }
          else
          {
            paramClass = localObject1.getName();
          }
          return paramClass;
          localObject1 = localObject2[i];
          paramClass = (Id)localObject1.getAnnotation(Id.class);
        } while (paramClass != null);
        i += 1;
      }
      j = localObject2.length;
      i = 0;
      if (i >= j)
      {
        j = localObject2.length;
        i = 0;
      }
      for (;;)
      {
        if (i >= j) {
          break label194;
        }
        if ("id".equals(localObject2[i].getName()))
        {
          return "id";
          if ("_id".equals(localObject2[i].getName())) {
            return "_id";
          }
          i += 1;
          break;
        }
        i += 1;
      }
    }
    throw new RuntimeException("this model[" + paramClass + "] has no field");
    label194:
    return null;
  }
  
  public static Field getPrimaryKeyField(Class<?> paramClass)
  {
    Field[] arrayOfField = getFields(paramClass);
    int j = arrayOfField.length;
    int i = 0;
    paramClass = null;
    if (i >= j) {
      label19:
      if (paramClass == null)
      {
        j = arrayOfField.length;
        i = 0;
      }
    }
    for (;;)
    {
      Object localObject;
      if (i >= j) {
        localObject = paramClass;
      }
      Field localField;
      do
      {
        return localObject;
        localObject = arrayOfField[i];
        paramClass = (Class<?>)localObject;
        if (((Field)localObject).getAnnotation(Id.class) != null) {
          break label19;
        }
        i += 1;
        break;
        localField = arrayOfField[i];
        localObject = localField;
      } while ("table_id".equals(localField.getName()));
      i += 1;
    }
  }
  
  public static String getPrimaryKeyFieldName(Class<?> paramClass)
  {
    paramClass = getPrimaryKeyField(paramClass);
    if (paramClass == null) {
      return null;
    }
    return paramClass.getName();
  }
  
  public static Object getPrimaryKeyValue(Object paramObject)
  {
    return FieldUtils.getFieldValue(paramObject, getPrimaryKeyField(paramObject.getClass()));
  }
  
  public static List<Property> getPropertyList(Class<?> paramClass)
  {
    ArrayList localArrayList = new ArrayList();
    for (;;)
    {
      int j;
      int i;
      try
      {
        arrayOfField = getFields(paramClass);
        str = getPrimaryKeyFieldName(paramClass);
        j = arrayOfField.length;
        i = 0;
      }
      catch (Exception paramClass)
      {
        Field[] arrayOfField;
        String str;
        Field localField;
        Property localProperty;
        throw new RuntimeException(paramClass.getMessage(), paramClass);
      }
      localField = arrayOfField[i];
      if ((!FieldUtils.isTransient(localField)) && (FieldUtils.isBaseDateType(localField)) && (!localField.getName().equals(str)) && (!localField.getName().equals("serialVersionUID")))
      {
        localProperty = new Property();
        localProperty.setColumn(FieldUtils.getColumnByField(localField));
        localProperty.setFieldName(localField.getName());
        localProperty.setDataType(localField.getType());
        localProperty.setDefaultValue(FieldUtils.getPropertyDefaultValue(localField));
        localProperty.setSet(FieldUtils.getFieldSetMethod(paramClass, localField));
        localProperty.setGet(FieldUtils.getFieldGetMethod(paramClass, localField));
        localProperty.setField(localField);
        localArrayList.add(localProperty);
      }
      while (i >= j)
      {
        return localArrayList;
        i += 1;
      }
    }
  }
  
  public static String getTableName(Class<?> paramClass)
  {
    Table localTable = (Table)paramClass.getAnnotation(Table.class);
    if ((localTable == null) || (localTable.name().trim().length() == 0)) {
      return paramClass.getName().replace('.', '_');
    }
    return localTable.name();
  }
}
