package com.lepeng.utils.http.core;

import com.lepeng.utils.exception.CheckedExceptionHandler;
import com.lepeng.utils.http.core.entityhandler.StringEntityHandler;
import java.io.IOException;
import java.net.ConnectException;
import java.net.UnknownHostException;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpRequestRetryHandler;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.AbstractHttpClient;
import org.apache.http.protocol.HttpContext;

public class SyncRequestHandler
{
  private int C = 0;
  private final AbstractHttpClient a;
  private final StringEntityHandler jdField_b_of_type_ComLepengUtilsHttpCoreEntityhandlerStringEntityHandler = new StringEntityHandler();
  private final HttpContext jdField_b_of_type_OrgApacheHttpProtocolHttpContext;
  
  public SyncRequestHandler(AbstractHttpClient paramAbstractHttpClient, HttpContext paramHttpContext)
  {
    this.a = paramAbstractHttpClient;
    this.jdField_b_of_type_OrgApacheHttpProtocolHttpContext = paramHttpContext;
  }
  
  private Object a(HttpUriRequest paramHttpUriRequest)
  {
    HttpRequestRetryHandler localHttpRequestRetryHandler = this.a.getHttpRequestRetryHandler();
    boolean bool = true;
    Object localObject1 = null;
    for (;;)
    {
      if (!bool) {
        return null;
      }
      try
      {
        Object localObject2 = this.a.execute(paramHttpUriRequest, this.jdField_b_of_type_OrgApacheHttpProtocolHttpContext);
        localObject2 = this.jdField_b_of_type_ComLepengUtilsHttpCoreEntityhandlerStringEntityHandler.handleEntity(((HttpResponse)localObject2).getEntity(), null);
        return localObject2;
      }
      catch (IOException localIOException)
      {
        i = this.C + 1;
        this.C = i;
        bool = localHttpRequestRetryHandler.retryRequest(localIOException, i, this.jdField_b_of_type_OrgApacheHttpProtocolHttpContext);
      }
      catch (NullPointerException localNullPointerException)
      {
        int i = this.C + 1;
        this.C = i;
        bool = localHttpRequestRetryHandler.retryRequest(localIOException, i, this.jdField_b_of_type_OrgApacheHttpProtocolHttpContext);
      }
      catch (IllegalStateException paramHttpUriRequest)
      {
        paramHttpUriRequest.printStackTrace();
        return null;
      }
      catch (UnknownHostException paramHttpUriRequest) {}
    }
    return null;
  }
  
  public Object sendRequest(HttpUriRequest... paramVarArgs)
  {
    try
    {
      paramVarArgs = a(paramVarArgs[0]);
      return paramVarArgs;
    }
    catch (ConnectException paramVarArgs)
    {
      CheckedExceptionHandler.handleException(paramVarArgs);
    }
    return null;
  }
}
