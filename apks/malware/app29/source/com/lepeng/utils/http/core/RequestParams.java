package com.lepeng.utils.http.core;

import android.os.RecoverySystem.ProgressListener;
import com.lepeng.utils.StrUtil;
import com.lepeng.utils.exception.CheckedExceptionHandler;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.apache.http.HttpEntity;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.message.BasicNameValuePair;

public class RequestParams
{
  public HashMap<String, RequestParams.a> fileParams;
  public HashMap<String, String> urlParams;
  
  public RequestParams()
  {
    init();
  }
  
  public RequestParams(String paramString1, String paramString2)
  {
    init();
    put(paramString1, paramString2);
  }
  
  public RequestParams(Map<String, String> paramMap)
  {
    init();
    paramMap = paramMap.entrySet().iterator();
    for (;;)
    {
      if (!paramMap.hasNext()) {
        return;
      }
      Map.Entry localEntry = (Map.Entry)paramMap.next();
      put((String)localEntry.getKey(), (String)localEntry.getValue());
    }
  }
  
  public RequestParams(Object... paramVarArgs)
  {
    init();
    int j = paramVarArgs.length;
    if (j % 2 != 0) {
      CheckedExceptionHandler.handleException(new IllegalArgumentException("Supplied arguments must be even"));
    }
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return;
      }
      put(String.valueOf(paramVarArgs[i]), String.valueOf(paramVarArgs[(i + 1)]));
      i += 2;
    }
  }
  
  private void init()
  {
    this.urlParams = new HashMap();
    this.fileParams = new HashMap();
  }
  
  public String getParamString()
  {
    return URLEncodedUtils.format(getParamsList(), "utf-8");
  }
  
  protected List<BasicNameValuePair> getParamsList()
  {
    LinkedList localLinkedList = new LinkedList();
    Iterator localIterator = this.urlParams.entrySet().iterator();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return localLinkedList;
      }
      Map.Entry localEntry = (Map.Entry)localIterator.next();
      localLinkedList.add(new BasicNameValuePair((String)localEntry.getKey(), (String)localEntry.getValue()));
    }
  }
  
  public String getRequestString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    Iterator localIterator = this.urlParams.entrySet().iterator();
    if (!localIterator.hasNext()) {
      localIterator = this.fileParams.entrySet().iterator();
    }
    for (;;)
    {
      if (!localIterator.hasNext())
      {
        return localStringBuilder.toString();
        localEntry = (Map.Entry)localIterator.next();
        if (localStringBuilder.length() > 0) {
          localStringBuilder.append("&");
        }
        localStringBuilder.append((String)localEntry.getKey());
        localStringBuilder.append("=");
        localStringBuilder.append((String)localEntry.getValue());
        break;
      }
      Map.Entry localEntry = (Map.Entry)localIterator.next();
      if (localStringBuilder.length() > 0) {
        localStringBuilder.append("&");
      }
      localStringBuilder.append((String)localEntry.getKey());
      localStringBuilder.append("=");
      localStringBuilder.append("FILE");
    }
  }
  
  public HttpEntity gotHttpEntity()
  {
    Object localObject;
    if (!this.fileParams.isEmpty())
    {
      localObject = new a();
      Iterator localIterator = this.urlParams.entrySet().iterator();
      int j;
      int i;
      for (;;)
      {
        if (!localIterator.hasNext())
        {
          j = this.fileParams.entrySet().size();
          localIterator = this.fileParams.entrySet().iterator();
          i = 0;
          if (localIterator.hasNext()) {
            break;
          }
          return localObject;
        }
        localEntry = (Map.Entry)localIterator.next();
        ((a)localObject).addPart((String)localEntry.getKey(), (String)localEntry.getValue());
      }
      Map.Entry localEntry = (Map.Entry)localIterator.next();
      RequestParams.a localA = (RequestParams.a)localEntry.getValue();
      boolean bool;
      if (localA.inputStream != null)
      {
        if (i != j - 1) {
          break label212;
        }
        bool = true;
        label166:
        if (localA.contentType == null) {
          break label217;
        }
        ((a)localObject).addPart((String)localEntry.getKey(), localA.getFileName(), localA.inputStream, localA.contentType, bool);
      }
      for (;;)
      {
        i += 1;
        break;
        label212:
        bool = false;
        break label166;
        label217:
        ((a)localObject).addPart((String)localEntry.getKey(), localA.getFileName(), localA.inputStream, bool);
      }
    }
    try
    {
      localObject = new UrlEncodedFormEntity(getParamsList(), "utf-8");
      return localObject;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException)
    {
      localUnsupportedEncodingException.printStackTrace();
    }
    return null;
  }
  
  public void put(String paramString, File paramFile)
  {
    put(paramString, new FileInputStream(paramFile), paramFile.getName());
  }
  
  public void put(String paramString, InputStream paramInputStream)
  {
    put(paramString, paramInputStream, null);
  }
  
  public void put(String paramString1, InputStream paramInputStream, String paramString2) {}
  
  public void put(String paramString1, InputStream paramInputStream, String paramString2, String paramString3)
  {
    put(paramString1, paramInputStream, paramString2, paramString3, null);
  }
  
  public void put(String paramString1, InputStream paramInputStream, String paramString2, String paramString3, Long paramLong)
  {
    put(paramString1, paramInputStream, paramString2, paramString3, paramLong, null);
  }
  
  public void put(String paramString1, InputStream paramInputStream, String paramString2, String paramString3, Long paramLong, RecoverySystem.ProgressListener paramProgressListener)
  {
    if ((paramString1 != null) && (paramInputStream != null))
    {
      paramProgressListener = paramString3;
      if (StrUtil.isEmptyOrNull(paramString3)) {
        paramProgressListener = "application/octet-stream";
      }
    }
    try
    {
      int i = paramInputStream.available();
      l = i;
    }
    catch (IOException paramString3)
    {
      for (;;)
      {
        CheckedExceptionHandler.handleException(paramString3);
        long l = 0L;
      }
    }
    if (l == 0L) {
      paramLong.longValue();
    }
    this.fileParams.put(paramString1, new RequestParams.a(paramInputStream, paramString2, paramProgressListener));
  }
  
  public void put(String paramString1, String paramString2)
  {
    if ((paramString1 != null) && (paramString2 != null)) {
      this.urlParams.put(paramString1, paramString2);
    }
  }
  
  public void remove(String paramString)
  {
    this.urlParams.remove(paramString);
    this.fileParams.remove(paramString);
  }
}
