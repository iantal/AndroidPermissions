package com.lepeng.utils.http.core.entityhandler;

import android.text.TextUtils;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.http.HttpEntity;

public class FileEntityHandler
{
  private boolean o = false;
  
  public FileEntityHandler() {}
  
  public Object handleEntity(HttpEntity paramHttpEntity, EntityCallBack paramEntityCallBack, String paramString, boolean paramBoolean)
  {
    Object localObject;
    if ((TextUtils.isEmpty(paramString)) || (paramString.trim().length() == 0)) {
      localObject = null;
    }
    File localFile;
    long l1;
    label80:
    int i;
    InputStream localInputStream;
    long l2;
    do
    {
      do
      {
        do
        {
          do
          {
            return localObject;
            localFile = new File(paramString);
            if (!localFile.exists()) {
              localFile.createNewFile();
            }
            localObject = localFile;
          } while (this.o);
          if (!paramBoolean) {
            break;
          }
          l1 = localFile.length();
          paramString = new FileOutputStream(paramString, true);
          localObject = localFile;
        } while (this.o);
        if (paramHttpEntity.isChunked())
        {
          paramHttpEntity = paramHttpEntity.getContent();
          localObject = new byte['Ѐ'];
          for (;;)
          {
            if (!this.o)
            {
              i = paramHttpEntity.read((byte[])localObject, 0, 1024);
              if (i > 0) {}
            }
            else
            {
              paramEntityCallBack.callBack(100L, 100L, true);
              localObject = localFile;
              if (!this.o) {
                break;
              }
              localObject = localFile;
              if (l1 >= 0L) {
                break;
              }
              throw new IOException("user stop download thread");
              paramString = new FileOutputStream(paramString);
              l1 = 0L;
              break label80;
            }
            paramString.write((byte[])localObject, 0, i);
            paramEntityCallBack.callBack(0L, 100L, false);
          }
        }
        localInputStream = paramHttpEntity.getContent();
        l2 = paramHttpEntity.getContentLength() + l1;
        localObject = localFile;
      } while (l1 >= l2);
      localObject = localFile;
    } while (this.o);
    paramHttpEntity = new byte['Ѐ'];
    for (;;)
    {
      if ((!this.o) && (l1 < l2))
      {
        i = localInputStream.read(paramHttpEntity, 0, 1024);
        if (i > 0) {}
      }
      else
      {
        paramEntityCallBack.callBack(l2, l1, true);
        localObject = localFile;
        if (!this.o) {
          break;
        }
        localObject = localFile;
        if (l1 >= l2) {
          break;
        }
        throw new IOException("user stop download thread");
      }
      paramString.write(paramHttpEntity, 0, i);
      l1 += i;
      paramEntityCallBack.callBack(l2, l1, false);
    }
  }
  
  public boolean isStop()
  {
    return this.o;
  }
  
  public void setStop(boolean paramBoolean)
  {
    this.o = paramBoolean;
  }
}
