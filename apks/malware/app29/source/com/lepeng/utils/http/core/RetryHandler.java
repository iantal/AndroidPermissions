package com.lepeng.utils.http.core;

import android.os.SystemClock;
import com.lepeng.utils.L;
import com.lepeng.utils.exception.CheckedExceptionHandler;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.HashSet;
import javax.net.ssl.SSLHandshakeException;
import org.apache.http.NoHttpResponseException;
import org.apache.http.client.HttpRequestRetryHandler;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.protocol.HttpContext;

public class RetryHandler
  implements HttpRequestRetryHandler
{
  private static final int I = 2000;
  private static HashSet<Class<?>> a = new HashSet();
  private static HashSet<Class<?>> b = new HashSet();
  private final int J;
  
  static
  {
    a.add(NoHttpResponseException.class);
    a.add(UnknownHostException.class);
    a.add(SocketException.class);
    b.add(InterruptedIOException.class);
    b.add(SSLHandshakeException.class);
  }
  
  public RetryHandler(int paramInt)
  {
    this.J = paramInt;
  }
  
  public boolean retryRequest(IOException paramIOException, int paramInt, HttpContext paramHttpContext)
  {
    L.w("cause exception name = " + paramIOException.getClass().getSimpleName());
    L.w("connect retry number " + paramInt);
    Boolean localBoolean = (Boolean)paramHttpContext.getAttribute("http.request_sent");
    int i;
    boolean bool1;
    if ((localBoolean != null) && (localBoolean.booleanValue()))
    {
      i = 1;
      if (paramInt <= this.J) {
        break label130;
      }
      bool1 = false;
    }
    for (;;)
    {
      label84:
      boolean bool2 = bool1;
      if (bool1) {
        if ((HttpUriRequest)paramHttpContext.getAttribute("http.request") == null) {
          break label179;
        }
      }
      label130:
      label179:
      for (bool2 = true;; bool2 = false)
      {
        if (!bool2) {
          break label185;
        }
        SystemClock.sleep(2000L);
        return bool2;
        i = 0;
        break;
        if (b.contains(paramIOException.getClass()))
        {
          bool1 = false;
          break label84;
        }
        if (a.contains(paramIOException.getClass()))
        {
          bool1 = true;
          break label84;
        }
        if (i != 0) {
          break label192;
        }
        bool1 = true;
        break label84;
      }
      label185:
      CheckedExceptionHandler.handleException(paramIOException);
      return bool2;
      label192:
      bool1 = true;
    }
  }
}
