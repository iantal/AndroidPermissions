package com.lepeng.utils.datastorage.db.table;

import com.lepeng.utils.exception.CheckedExceptionHandler;
import com.lepeng.utils.reflect.ClassUtils;
import com.lepeng.utils.reflect.FieldUtils;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

public class TableInfo
{
  private static final HashMap<String, TableInfo> c = new HashMap();
  private Id a;
  private String className;
  private boolean j;
  public final HashMap<String, ManyToOne> manyToOneMap = new HashMap();
  public final HashMap<String, OneToMany> oneToManyMap = new HashMap();
  public final HashMap<String, Property> propertyMap = new HashMap();
  private String tableName;
  
  private TableInfo() {}
  
  public static TableInfo get(Class<?> paramClass)
  {
    if (paramClass == null) {
      throw new IllegalArgumentException("table info get error,because the clazz is null");
    }
    Object localObject2 = (TableInfo)c.get(paramClass.getName());
    Object localObject1 = localObject2;
    Object localObject3;
    if (localObject2 == null)
    {
      localObject1 = new TableInfo();
      ((TableInfo)localObject1).setTableName(ClassUtils.getTableName(paramClass));
      ((TableInfo)localObject1).setClassName(paramClass.getName());
      localObject2 = ClassUtils.getPrimaryKeyField(paramClass);
      if (localObject2 == null) {
        break label211;
      }
      localObject3 = new Id();
      ((Id)localObject3).setColumn(FieldUtils.getColumnByField((Field)localObject2));
      ((Id)localObject3).setFieldName(((Field)localObject2).getName());
      ((Id)localObject3).setSet(FieldUtils.getFieldSetMethod(paramClass, (Field)localObject2));
      ((Id)localObject3).setGet(FieldUtils.getFieldGetMethod(paramClass, (Field)localObject2));
      ((Id)localObject3).setDataType(((Field)localObject2).getType());
      ((TableInfo)localObject1).setId((Id)localObject3);
      localObject2 = ClassUtils.getPropertyList(paramClass);
      if (localObject2 != null)
      {
        localObject2 = ((List)localObject2).iterator();
        if (((Iterator)localObject2).hasNext()) {
          break label240;
        }
      }
      localObject2 = ClassUtils.getManyToOneList(paramClass);
      if (localObject2 != null)
      {
        localObject2 = ((List)localObject2).iterator();
        label163:
        if (((Iterator)localObject2).hasNext()) {
          break label270;
        }
      }
      localObject2 = ClassUtils.getOneToManyList(paramClass);
      if (localObject2 != null) {
        localObject2 = ((List)localObject2).iterator();
      }
    }
    for (;;)
    {
      if (!((Iterator)localObject2).hasNext())
      {
        c.put(paramClass.getName(), localObject1);
        return localObject1;
        label211:
        throw new IllegalArgumentException("the class[" + paramClass + "]'s idField is null");
        label240:
        localObject3 = (Property)((Iterator)localObject2).next();
        if (localObject3 == null) {
          break;
        }
        ((TableInfo)localObject1).propertyMap.put(((Property)localObject3).getColumn(), localObject3);
        break;
        label270:
        localObject3 = (ManyToOne)((Iterator)localObject2).next();
        if (localObject3 == null) {
          break label163;
        }
        ((TableInfo)localObject1).manyToOneMap.put(((ManyToOne)localObject3).getColumn(), localObject3);
        break label163;
      }
      localObject3 = (OneToMany)((Iterator)localObject2).next();
      if (localObject3 != null) {
        ((TableInfo)localObject1).oneToManyMap.put(((OneToMany)localObject3).getColumn(), localObject3);
      }
    }
  }
  
  public static TableInfo get(String paramString)
  {
    try
    {
      paramString = get(Class.forName(paramString));
      return paramString;
    }
    catch (ClassNotFoundException paramString)
    {
      CheckedExceptionHandler.handleException(paramString);
    }
    return null;
  }
  
  public String getClassName()
  {
    return this.className;
  }
  
  public Id getId()
  {
    return this.a;
  }
  
  public String getTableName()
  {
    return this.tableName;
  }
  
  public boolean isCheckDatabese()
  {
    return this.j;
  }
  
  public void setCheckDatabese(boolean paramBoolean)
  {
    this.j = paramBoolean;
  }
  
  public void setClassName(String paramString)
  {
    this.className = paramString;
  }
  
  public void setId(Id paramId)
  {
    this.a = paramId;
  }
  
  public void setTableName(String paramString)
  {
    this.tableName = paramString;
  }
}
