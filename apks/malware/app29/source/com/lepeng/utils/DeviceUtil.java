package com.lepeng.utils;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.net.Uri;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Environment;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.WindowManager;
import com.lepeng.data.UtilApplication;
import com.lepeng.utils.exception.CheckedExceptionHandler;
import java.lang.reflect.Field;

public class DeviceUtil
{
  public static final WindowManager wm = (WindowManager)UtilApplication.getInstance().ctx.getSystemService("window");
  
  public DeviceUtil() {}
  
  public static void call(Context paramContext, String paramString)
  {
    paramContext.startActivity(new Intent("android.intent.action.CALL", Uri.parse("tel:" + paramString)));
  }
  
  public static float getDeviceDensity()
  {
    return getDeviceMetrics().density;
  }
  
  public static int getDeviceDesityDpi()
  {
    return getDeviceMetrics().densityDpi;
  }
  
  public static int getDeviceHeight()
  {
    return getDeviceMetrics().heightPixels;
  }
  
  public static String getDeviceInfoByReflection()
  {
    StringBuffer localStringBuffer = new StringBuffer();
    for (;;)
    {
      try
      {
        arrayOfField = Build.class.getDeclaredFields();
        int j = arrayOfField.length;
        i = 0;
        if (i < j) {
          continue;
        }
      }
      catch (Exception localException)
      {
        Field[] arrayOfField;
        int i;
        Object localObject;
        String str;
        CheckedExceptionHandler.handleException(localException);
        continue;
      }
      return localStringBuffer.toString();
      localObject = arrayOfField[i];
      ((Field)localObject).setAccessible(true);
      str = ((Field)localObject).getName();
      localObject = ((Field)localObject).get(null).toString();
      localStringBuffer.append(str + "=" + (String)localObject);
      localStringBuffer.append("\n");
      i += 1;
    }
  }
  
  public static DisplayMetrics getDeviceMetrics()
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    wm.getDefaultDisplay().getMetrics(localDisplayMetrics);
    return localDisplayMetrics;
  }
  
  public static String getDeviceModel()
  {
    return Build.MODEL;
  }
  
  public static int getDeviceWidth()
  {
    return getDeviceMetrics().widthPixels;
  }
  
  public static int getOSSdkVersion()
  {
    return Build.VERSION.SDK_INT;
  }
  
  public static String getOSVersion()
  {
    return Build.VERSION.RELEASE;
  }
  
  public static Integer getVersionCode(Activity paramActivity)
  {
    PackageManager localPackageManager = paramActivity.getPackageManager();
    try
    {
      paramActivity = localPackageManager.getPackageInfo(paramActivity.getPackageName(), 0);
      return Integer.valueOf(paramActivity.versionCode);
    }
    catch (PackageManager.NameNotFoundException paramActivity)
    {
      for (;;)
      {
        paramActivity.printStackTrace();
        paramActivity = null;
      }
    }
  }
  
  public static String getVersionName(Activity paramActivity)
  {
    PackageManager localPackageManager = paramActivity.getPackageManager();
    try
    {
      paramActivity = localPackageManager.getPackageInfo(paramActivity.getPackageName(), 0);
      return paramActivity.versionName;
    }
    catch (PackageManager.NameNotFoundException paramActivity)
    {
      for (;;)
      {
        paramActivity.printStackTrace();
        paramActivity = null;
      }
    }
  }
  
  public static void goCallUI(Context paramContext, String paramString)
  {
    paramContext.startActivity(new Intent("android.intent.action.DIAL", Uri.parse("tel:" + paramString)));
  }
  
  public static boolean isSDCardAvailable()
  {
    return Environment.getExternalStorageState().equals("mounted");
  }
  
  public static void sms(Context paramContext, String paramString)
  {
    paramContext.startActivity(new Intent("android.intent.action.SENDTO", Uri.parse("smsto:" + paramString)));
  }
  
  public int getScreenWidth(Activity paramActivity)
  {
    paramActivity = paramActivity.getWindowManager();
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    paramActivity.getDefaultDisplay().getMetrics(localDisplayMetrics);
    return localDisplayMetrics.widthPixels;
  }
}
