package com.lepeng.utils;

import android.util.Log;
import com.lepeng.utils.exception.CheckedExceptionHandler;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.net.UnknownHostException;

public class LogContent
{
  public static String EMPTY = "";
  public static String NULL = "null";
  private LogContent.a jdField_a_of_type_ComLepengUtilsLogContent$a;
  private Throwable jdField_a_of_type_JavaLangThrowable = null;
  private String message;
  private String tag;
  
  public LogContent() {}
  
  public LogContent(LogContent.a paramA, String paramString)
  {
    this.jdField_a_of_type_ComLepengUtilsLogContent$a = paramA;
    this.message = paramString;
  }
  
  public LogContent(LogContent.a paramA, String paramString, Throwable paramThrowable)
  {
    this.jdField_a_of_type_ComLepengUtilsLogContent$a = paramA;
    this.message = paramString;
    this.jdField_a_of_type_JavaLangThrowable = paramThrowable;
  }
  
  private static StackTraceElement a(StackTraceElement[] paramArrayOfStackTraceElement)
  {
    Object localObject2 = null;
    int j = 0;
    int i = 0;
    if (j >= paramArrayOfStackTraceElement.length) {}
    StackTraceElement localStackTraceElement;
    for (paramArrayOfStackTraceElement = null;; paramArrayOfStackTraceElement = localStackTraceElement)
    {
      Object localObject1 = paramArrayOfStackTraceElement;
      do
      {
        return localObject1;
        localStackTraceElement = paramArrayOfStackTraceElement[j];
        localObject1 = localObject2;
      } while (localStackTraceElement == null);
      localObject1 = localStackTraceElement.getMethodName();
      if (i == 0)
      {
        if ((!((String)localObject1).equals("i")) && (!((String)localObject1).equals("e")) && (!((String)localObject1).equals("d")) && (!((String)localObject1).equals("v")) && (!((String)localObject1).equals("w")) && (!((String)localObject1).equals("handleException"))) {}
        for (i = 0;; i = 1)
        {
          j += 1;
          break;
        }
      }
    }
  }
  
  private static String a(StackTraceElement paramStackTraceElement)
  {
    return StrUtil.getShortClassName(paramStackTraceElement.getClassName()) + "." + paramStackTraceElement.getMethodName();
  }
  
  private static String b(StackTraceElement paramStackTraceElement)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(StrUtil.makeLongRepeatString(" ", 60));
    localStringBuilder.append("at ");
    localStringBuilder.append(paramStackTraceElement.getClassName());
    localStringBuilder.append(".");
    localStringBuilder.append(paramStackTraceElement.getMethodName());
    localStringBuilder.append("(");
    localStringBuilder.append(paramStackTraceElement.getFileName());
    localStringBuilder.append(":");
    localStringBuilder.append(paramStackTraceElement.getLineNumber());
    localStringBuilder.append(")");
    return localStringBuilder.toString();
  }
  
  public static String getThrowableString(Throwable paramThrowable)
  {
    if (paramThrowable == null) {
      return "";
    }
    for (Object localObject = paramThrowable;; localObject = ((Throwable)localObject).getCause()) {
      if (localObject == null)
      {
        localObject = new StringWriter();
        paramThrowable.printStackTrace(new PrintWriter((Writer)localObject));
        return ((StringWriter)localObject).toString();
      }
    }
  }
  
  public void flush()
  {
    for (;;)
    {
      try
      {
        localStackTraceElement = a(Thread.currentThread().getStackTrace());
        this.tag = a(localStackTraceElement);
        if (this.message == null) {
          this.message = NULL;
        }
        if ((this.jdField_a_of_type_JavaLangThrowable != null) && (!(this.jdField_a_of_type_JavaLangThrowable instanceof UnknownHostException))) {
          this.message = (this.message + " " + getThrowableString(this.jdField_a_of_type_JavaLangThrowable));
        }
      }
      catch (Exception localException)
      {
        StackTraceElement localStackTraceElement;
        this.tag = EMPTY;
        this.message = NULL;
        CheckedExceptionHandler.handleException(localException);
        continue;
        Log.e(this.tag, this.message);
        return;
      }
      switch (a()[this.jdField_a_of_type_ComLepengUtilsLogContent$a.ordinal()])
      {
      default: 
        return;
        this.message = (this.message + " " + b(localStackTraceElement));
      }
    }
    Log.w(this.tag, this.message);
    return;
    Log.i(this.tag, this.message);
    return;
    Log.d(this.tag, this.message);
    return;
    Log.v(this.tag, this.message);
  }
}
