package com.push2.sdk.util;

import java.io.ByteArrayOutputStream;
import java.security.KeyFactory;
import java.security.spec.PKCS8EncodedKeySpec;
import javax.crypto.Cipher;

public class m
{
  public static byte[] a(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    if (paramArrayOfByte2 == null) {
      return null;
    }
    paramArrayOfByte2 = KeyFactory.getInstance("RSA").generatePrivate(new PKCS8EncodedKeySpec(paramArrayOfByte2));
    Cipher localCipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
    localCipher.init(2, paramArrayOfByte2);
    int k = paramArrayOfByte1.length;
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    int i = 0;
    int j = 0;
    if (k - i <= 0)
    {
      paramArrayOfByte1 = localByteArrayOutputStream.toByteArray();
      localByteArrayOutputStream.close();
      return paramArrayOfByte1;
    }
    if (k - i > 128) {}
    for (paramArrayOfByte2 = localCipher.doFinal(paramArrayOfByte1, i, 128);; paramArrayOfByte2 = localCipher.doFinal(paramArrayOfByte1, i, k - i))
    {
      j += 1;
      localByteArrayOutputStream.write(paramArrayOfByte2, 0, paramArrayOfByte2.length);
      i = j * 128;
      break;
    }
  }
}
