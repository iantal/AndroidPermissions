package com.push2.sdk.util;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiManager;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class n
{
  private static Context b;
  
  static
  {
    if (!n.class.desiredAssertionStatus()) {}
    for (boolean bool = true;; bool = false)
    {
      a = bool;
      b = null;
      return;
    }
  }
  
  public n() {}
  
  public static void a()
  {
    NetworkInfo localNetworkInfo = ((ConnectivityManager)b.getSystemService("connectivity")).getActiveNetworkInfo();
    if ((localNetworkInfo != null) && (localNetworkInfo.getType() == 0) && (localNetworkInfo.isConnectedOrConnecting())) {
      return;
    }
    b(true);
  }
  
  public static void a(Context paramContext)
  {
    b = paramContext;
  }
  
  public static void a(boolean paramBoolean)
  {
    WifiManager localWifiManager = (WifiManager)b.getSystemService("wifi");
    if ((paramBoolean) && (!localWifiManager.isWifiEnabled())) {
      localWifiManager.setWifiEnabled(true);
    }
    while ((paramBoolean) || (!localWifiManager.isWifiEnabled())) {
      return;
    }
    localWifiManager.setWifiEnabled(false);
  }
  
  public static void b()
  {
    NetworkInfo localNetworkInfo = ((ConnectivityManager)b.getSystemService("connectivity")).getActiveNetworkInfo();
    if ((localNetworkInfo != null) && (localNetworkInfo.getType() == 1) && (localNetworkInfo.isConnectedOrConnecting())) {
      return;
    }
    a(true);
  }
  
  public static void b(boolean paramBoolean)
  {
    Object localObject1 = (ConnectivityManager)b.getSystemService("connectivity");
    try
    {
      Object localObject2 = Class.forName(localObject1.getClass().getName()).getDeclaredField("mService");
      ((Field)localObject2).setAccessible(true);
      localObject1 = ((Field)localObject2).get(localObject1);
      localObject2 = Class.forName(localObject1.getClass().getName()).getDeclaredMethod("setMobileDataEnabled", new Class[] { Boolean.TYPE });
      ((Method)localObject2).setAccessible(true);
      ((Method)localObject2).invoke(localObject1, new Object[] { Boolean.valueOf(paramBoolean) });
      return;
    }
    catch (ClassNotFoundException localClassNotFoundException)
    {
      i.b("setMobileDataEnabled", "ClassNotFoundException");
      return;
    }
    catch (NoSuchFieldException localNoSuchFieldException)
    {
      i.b("setMobileDataEnabled", "NoSuchFieldException");
      return;
    }
    catch (IllegalArgumentException localIllegalArgumentException)
    {
      i.b("setMobileDataEnabled", "IllegalArgumentException");
      return;
    }
    catch (IllegalAccessException localIllegalAccessException)
    {
      i.b("setMobileDataEnabled", "IllegalAccessException");
      return;
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      i.b("setMobileDataEnabled", "NoSuchMethodException");
      return;
    }
    catch (InvocationTargetException localInvocationTargetException)
    {
      i.b("setMobileDataEnabled", "InvocationTargetException");
    }
  }
  
  public static boolean c()
  {
    if ((!a) && (b == null)) {
      throw new AssertionError();
    }
    NetworkInfo localNetworkInfo = ((ConnectivityManager)b.getSystemService("connectivity")).getActiveNetworkInfo();
    return (localNetworkInfo != null) && (localNetworkInfo.getType() == 1);
  }
  
  public static boolean d()
  {
    if ((!a) && (b == null)) {
      throw new AssertionError();
    }
    NetworkInfo localNetworkInfo = ((ConnectivityManager)b.getSystemService("connectivity")).getActiveNetworkInfo();
    return (localNetworkInfo != null) && (localNetworkInfo.getType() == 0) && (localNetworkInfo.isConnectedOrConnecting());
  }
}
