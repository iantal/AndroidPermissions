package com.push2.sdk;

import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import com.push2.sdk.b.b;
import com.push2.sdk.util.PhoneUtil;
import com.push2.sdk.util.SMSUtil;
import com.push2.sdk.util.SMSUtil.a;
import com.push2.sdk.util.e;
import com.push2.sdk.util.i;
import com.push2.sdk.util.k;
import com.push2.sdk.util.r;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONException;

 enum a
{
  INSTANCE;
  
  private static String TAG = "AuthHandler";
  Handler authHandler = new a.2(this);
  private PushListener.OnAuthListener authListener;
  private Context context;
  private String cpId;
  private String cpKey;
  private final String extension = "auth";
  private final String num = "1";
  private final String payCode = "100";
  private PhoneUtil phoneUtil;
  private int requestAuth = 0;
  private k response2 = new k();
  private int sendSMSNum = 0;
  SMSUtil.a smsListener = new a.1(this);
  
  private void dealMMResult1(Message paramMessage)
  {
    paramMessage = (String)paramMessage.getData().get("result");
    String str = (String)k.b(paramMessage).get("result");
    if ("0".equals(str))
    {
      getPushDatawifiPayFlow1(paramMessage, 2);
      return;
    }
    if (("7".equals(str)) && (this.requestAuth < 5))
    {
      this.requestAuth += 1;
      getMMDataWifiPayFlow(this.response2.k(), this.response2.m(), this.response2.l(), 1, 3000L);
      return;
    }
    if ((!"0".equals(str)) && (this.sendSMSNum < 3))
    {
      this.sendSMSNum += 1;
      SMSUtil.a(getContext(), new String(this.response2.j()), this.response2.h());
      return;
    }
    i.d(TAG, "短信发送多次，发送失败，支付环境不稳定...");
    sendFailureData("短信发送多次，发送失败");
  }
  
  private void dealPushResult1(Message paramMessage)
  {
    paramMessage = (String)paramMessage.getData().get("result");
    b localB;
    try
    {
      boolean bool = this.response2.a(paramMessage);
      i.b(TAG, "dealPushResult1,falg1=" + bool);
      if (bool)
      {
        if ("sms".equals(this.response2.i()))
        {
          i.b(TAG, "dealPushResult1,send sms...");
          this.sendSMSNum += 1;
          SMSUtil.a(getContext(), new String(this.response2.j()), this.response2.h());
          return;
        }
        if ("post".equals(this.response2.f()))
        {
          i.b(TAG, "dealPushResult1,Direct distribution of props...");
          sendSuccessData(3, "验证成功");
          return;
        }
      }
    }
    catch (JSONException paramMessage)
    {
      localB = new b("-2003", paramMessage.getClass().getName(), paramMessage.getMessage());
    }
    try
    {
      e.a(localB);
      paramMessage.printStackTrace();
      sendFailureData("第一次,请求普石后台Json解析失败");
      return;
      sendFailureData("第一次,请求普石后台解析数据异常");
      return;
      sendFailureData("第一次,请求普石后台解析数据失败");
      return;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
      }
    }
  }
  
  private void dealPushResult2(Message paramMessage)
  {
    paramMessage = (String)paramMessage.getData().get("result");
    b localB;
    try
    {
      boolean bool = this.response2.a(paramMessage);
      i.b(TAG, "dealPushResult2,falg=" + bool);
      if (bool)
      {
        if ("post".equals(this.response2.f()))
        {
          sendSuccessData(3, "验证成功");
          return;
        }
        if (("sms".equals(this.response2.i())) && (this.sendSMSNum < 3))
        {
          Log.d(TAG, "dealPushResult2,repeat send sms...");
          SMSUtil.a(getContext(), new String(this.response2.j()), this.response2.h());
          return;
        }
      }
    }
    catch (JSONException paramMessage)
    {
      localB = new b("-2004", paramMessage.getClass().getName(), paramMessage.getMessage());
    }
    try
    {
      e.a(localB);
      paramMessage.printStackTrace();
      sendFailureData("第二次,请求普石后台Json解析失败");
      return;
      sendFailureData("第二次,请求普石后台解析数据异常");
      return;
      sendFailureData("第二次,请求普石后台解析数据失败");
      return;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
      }
    }
  }
  
  private PushListener.OnAuthListener getAuthListener()
  {
    return this.authListener;
  }
  
  private void getMMDataWifiPayFlow(String paramString1, byte[] paramArrayOfByte, String paramString2, int paramInt, long paramLong)
  {
    g.INSTANCE.getMMDataWifiPayFlow(paramString1, paramArrayOfByte, paramString2, paramLong, new a.4(this, paramInt), null);
  }
  
  private void getPushDatawifiPayFlow1(String paramString, int paramInt)
  {
    g.INSTANCE.getPushDatawifiPayFlow1(this.response2.d(), paramString, "100", "1", "auth", new a.3(this, paramInt));
  }
  
  private void sendFailureData(String paramString)
  {
    Message localMessage = this.authHandler.obtainMessage();
    Bundle localBundle = new Bundle();
    localBundle.putString("result", paramString);
    localMessage.what = 4;
    localMessage.setData(localBundle);
    this.authHandler.sendMessage(localMessage);
  }
  
  private void sendSuccessData(int paramInt, String paramString)
  {
    Message localMessage = this.authHandler.obtainMessage();
    Bundle localBundle = new Bundle();
    localBundle.putString("result", paramString);
    localMessage.what = paramInt;
    localMessage.setData(localBundle);
    this.authHandler.sendMessage(localMessage);
  }
  
  private void setAuthListener(PushListener.OnAuthListener paramOnAuthListener)
  {
    this.authListener = paramOnAuthListener;
  }
  
  public void doPayAuth(Context paramContext, PushListener.OnAuthListener paramOnAuthListener)
  {
    setContext(paramContext);
    setAuthListener(paramOnAuthListener);
    this.response2.a();
    this.sendSMSNum = 0;
    this.requestAuth = 0;
    SMSUtil.a(paramContext, this.smsListener);
    this.cpId = PushSDK.getCpId();
    this.cpKey = PushSDK.getCpKey();
    this.phoneUtil = PushSDK.INSTANCE.getPhoneUtil();
    if ((r.a(this.cpId)) || (r.a(this.cpKey)) || (r.a(this.phoneUtil.getImei())) || (r.a(this.phoneUtil.getImsi())) || (r.a(this.phoneUtil.e())) || (r.a(this.phoneUtil.f())))
    {
      paramContext = "Parameter is not complete! [cpid=" + this.cpId + ",cpkey=" + this.cpKey + ",imsi=" + this.phoneUtil.getImsi() + ",imei=" + this.phoneUtil.getImei() + ",手机型号=" + this.phoneUtil.e() + ",操作系统版本号=" + this.phoneUtil.f() + "]";
      i.d(TAG, paramContext);
      if (paramOnAuthListener != null)
      {
        HashMap localHashMap = new HashMap();
        localHashMap.put("code", "-5");
        localHashMap.put("msg", paramContext);
        paramOnAuthListener.onFailure(localHashMap);
      }
      return;
    }
    getPushDatawifiPayFlow1("", 0);
  }
  
  public Context getContext()
  {
    return this.context;
  }
  
  public void setContext(Context paramContext)
  {
    this.context = paramContext;
  }
}
