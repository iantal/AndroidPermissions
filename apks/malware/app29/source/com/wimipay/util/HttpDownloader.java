package com.wimipay.util;

import java.io.File;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;

public class HttpDownloader
{
  public HttpDownloader() {}
  
  /* Error */
  public static String download(String paramString)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_1
    //   2: aconst_null
    //   3: astore_3
    //   4: new 15	java/lang/StringBuffer
    //   7: dup
    //   8: invokespecial 16	java/lang/StringBuffer:<init>	()V
    //   11: astore 4
    //   13: new 18	java/io/BufferedReader
    //   16: dup
    //   17: new 20	java/io/InputStreamReader
    //   20: dup
    //   21: new 22	java/net/URL
    //   24: dup
    //   25: aload_0
    //   26: invokespecial 25	java/net/URL:<init>	(Ljava/lang/String;)V
    //   29: invokevirtual 29	java/net/URL:openConnection	()Ljava/net/URLConnection;
    //   32: checkcast 31	java/net/HttpURLConnection
    //   35: invokevirtual 35	java/net/HttpURLConnection:getInputStream	()Ljava/io/InputStream;
    //   38: invokespecial 38	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   41: invokespecial 41	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   44: astore_0
    //   45: aload_0
    //   46: invokevirtual 45	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   49: astore_1
    //   50: aload_1
    //   51: ifnonnull +17 -> 68
    //   54: aload_0
    //   55: ifnull +7 -> 62
    //   58: aload_0
    //   59: invokevirtual 48	java/io/BufferedReader:close	()V
    //   62: aload 4
    //   64: invokevirtual 51	java/lang/StringBuffer:toString	()Ljava/lang/String;
    //   67: areturn
    //   68: aload 4
    //   70: aload_1
    //   71: invokevirtual 55	java/lang/StringBuffer:append	(Ljava/lang/String;)Ljava/lang/StringBuffer;
    //   74: pop
    //   75: goto -30 -> 45
    //   78: astore_2
    //   79: aload_0
    //   80: astore_1
    //   81: aload_2
    //   82: invokevirtual 58	java/lang/Exception:printStackTrace	()V
    //   85: aload_0
    //   86: ifnull -24 -> 62
    //   89: aload_0
    //   90: invokevirtual 48	java/io/BufferedReader:close	()V
    //   93: goto -31 -> 62
    //   96: astore_0
    //   97: aload_0
    //   98: invokevirtual 58	java/lang/Exception:printStackTrace	()V
    //   101: goto -39 -> 62
    //   104: astore_2
    //   105: aload_1
    //   106: astore_0
    //   107: aload_2
    //   108: astore_1
    //   109: aload_0
    //   110: ifnull +7 -> 117
    //   113: aload_0
    //   114: invokevirtual 48	java/io/BufferedReader:close	()V
    //   117: aload_1
    //   118: athrow
    //   119: astore_0
    //   120: aload_0
    //   121: invokevirtual 58	java/lang/Exception:printStackTrace	()V
    //   124: goto -7 -> 117
    //   127: astore_0
    //   128: aload_0
    //   129: invokevirtual 58	java/lang/Exception:printStackTrace	()V
    //   132: goto -70 -> 62
    //   135: astore_2
    //   136: aload_3
    //   137: astore_0
    //   138: goto -59 -> 79
    //   141: astore_1
    //   142: goto -33 -> 109
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	145	0	paramString	String
    //   1	117	1	localObject1	Object
    //   141	1	1	localObject2	Object
    //   78	4	2	localException1	Exception
    //   104	4	2	localObject3	Object
    //   135	1	2	localException2	Exception
    //   3	134	3	localObject4	Object
    //   11	58	4	localStringBuffer	StringBuffer
    // Exception table:
    //   from	to	target	type
    //   45	50	78	java/lang/Exception
    //   68	75	78	java/lang/Exception
    //   89	93	96	java/lang/Exception
    //   13	45	104	finally
    //   81	85	104	finally
    //   113	117	119	java/lang/Exception
    //   58	62	127	java/lang/Exception
    //   13	45	135	java/lang/Exception
    //   45	50	141	finally
    //   68	75	141	finally
  }
  
  public static int downloadFile(String paramString1, String paramString2, boolean paramBoolean)
  {
    int i = -1;
    Object localObject = null;
    String str = null;
    File localFile = new File(paramString2);
    do
    {
      for (;;)
      {
        try
        {
          paramString1 = getInputStreamFromUrl(paramString1);
          str = paramString1;
          localObject = paramString1;
          boolean bool = localFile.exists();
          if (!bool) {
            continue;
          }
          if (paramBoolean) {
            continue;
          }
          if (paramString1 == null) {}
        }
        catch (Exception paramString1)
        {
          localObject = str;
          paramString1.printStackTrace();
          if (str == null) {
            continue;
          }
          try
          {
            str.close();
            return -1;
          }
          catch (Exception paramString1)
          {
            paramString1.printStackTrace();
            return -1;
          }
        }
        finally
        {
          if (localObject == null) {
            continue;
          }
          try
          {
            ((InputStream)localObject).close();
            throw paramString1;
          }
          catch (Exception paramString2)
          {
            paramString2.printStackTrace();
            continue;
          }
          if (paramString1 == null) {
            break label167;
          }
        }
        try
        {
          paramString1.close();
          i = 1;
          return i;
        }
        catch (Exception paramString1)
        {
          paramString1.printStackTrace();
        }
      }
      str = paramString1;
      localObject = paramString1;
      localFile.delete();
      str = paramString1;
      localObject = paramString1;
      paramString2 = FileUtils.writeFileFromInput(paramString2, paramString1);
      if (paramString2 != null) {
        break label159;
      }
    } while (paramString1 == null);
    try
    {
      paramString1.close();
      return -1;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
      return -1;
    }
    try
    {
      label159:
      paramString1.close();
      label167:
      return 0;
    }
    catch (Exception paramString1)
    {
      for (;;)
      {
        paramString1.printStackTrace();
      }
    }
  }
  
  public static int downloadFile2SD(String paramString1, String paramString2, String paramString3, boolean paramBoolean)
  {
    Object localObject4 = null;
    Object localObject3 = null;
    Object localObject2 = localObject3;
    Object localObject1 = localObject4;
    try
    {
      if (FileUtils.isFileExist2SD(paramString2 + paramString3))
      {
        if (!paramBoolean) {
          return 1;
        }
        localObject2 = localObject3;
        localObject1 = localObject4;
        FileUtils.DeleteFile2SD(paramString2 + paramString3);
      }
      localObject2 = localObject3;
      localObject1 = localObject4;
      paramString1 = getInputStreamFromUrl(paramString1);
      localObject2 = paramString1;
      localObject1 = paramString1;
      paramString2 = FileUtils.write2SDFromInput(paramString2, paramString3, paramString1);
      if (paramString2 == null)
      {
        if (paramString1 == null) {
          break label187;
        }
        try
        {
          paramString1.close();
          return -1;
        }
        catch (Exception paramString1)
        {
          paramString1.printStackTrace();
          return -1;
        }
      }
      return -1;
    }
    catch (Exception paramString1)
    {
      localObject1 = localObject2;
      paramString1.printStackTrace();
      if (localObject2 != null) {
        try
        {
          ((InputStream)localObject2).close();
          return -1;
        }
        catch (Exception paramString1)
        {
          paramString1.printStackTrace();
          return -1;
        }
      }
    }
    finally
    {
      if (localObject1 != null) {}
      try
      {
        ((InputStream)localObject1).close();
        throw paramString1;
      }
      catch (Exception paramString2)
      {
        for (;;)
        {
          paramString2.printStackTrace();
        }
      }
      if (paramString1 != null) {}
      try
      {
        paramString1.close();
        return 0;
      }
      catch (Exception paramString1)
      {
        for (;;)
        {
          paramString1.printStackTrace();
        }
      }
    }
  }
  
  public static InputStream getInputStreamFromUrl(String paramString)
  {
    return ((HttpURLConnection)new URL(paramString).openConnection()).getInputStream();
  }
}
