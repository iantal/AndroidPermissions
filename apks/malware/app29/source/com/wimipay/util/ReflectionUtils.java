package com.wimipay.util;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class ReflectionUtils
{
  public ReflectionUtils() {}
  
  public static Class<?> CreateClass(String paramString)
  {
    try
    {
      paramString = Class.forName(paramString);
      return paramString;
    }
    catch (ClassNotFoundException paramString) {}
    return null;
  }
  
  private static Method getMethod(Class<?> paramClass, String paramString, Class<?>[] paramArrayOfClass)
  {
    try
    {
      Method localMethod = paramClass.getDeclaredMethod(paramString, paramArrayOfClass);
      return localMethod;
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      paramClass = paramClass.getSuperclass();
      if (paramClass != null) {
        return getMethod(paramClass, paramString, paramArrayOfClass);
      }
    }
    return null;
  }
  
  private static Object invokeMethod(Object paramObject, Class<?> paramClass, boolean paramBoolean, String paramString, Class<?>[] paramArrayOfClass, Object[] paramArrayOfObject)
  {
    if (!paramBoolean) {}
    try
    {
      paramClass = paramObject.getClass();
      paramClass = getMethod(paramClass, paramString, paramArrayOfClass);
      paramClass.setAccessible(true);
      if (paramBoolean) {
        return paramClass.invoke(null, paramArrayOfObject);
      }
      paramObject = paramClass.invoke(paramObject, paramArrayOfObject);
      return paramObject;
    }
    catch (IllegalArgumentException paramObject)
    {
      paramObject.printStackTrace();
      return null;
    }
    catch (IllegalAccessException paramObject)
    {
      paramObject.printStackTrace();
      return null;
    }
    catch (InvocationTargetException paramObject)
    {
      paramObject.printStackTrace();
    }
    return null;
  }
  
  public static Object invokeMethod(Object paramObject, String paramString, Class<?>[] paramArrayOfClass, Object[] paramArrayOfObject)
  {
    return invokeMethod(paramObject, null, false, paramString, paramArrayOfClass, paramArrayOfObject);
  }
  
  public static Object invokeStaticMethod(Class<?> paramClass, String paramString, Class<?>[] paramArrayOfClass, Object[] paramArrayOfObject)
  {
    return invokeMethod(null, paramClass, true, paramString, paramArrayOfClass, paramArrayOfObject);
  }
  
  public static <T> T newInstance(Class<T> paramClass)
  {
    return newInstance(paramClass, null, null);
  }
  
  public static <T> T newInstance(Class<T> paramClass, Class<?>[] paramArrayOfClass, Object[] paramArrayOfObject)
  {
    if ((paramArrayOfClass == null) || (paramArrayOfObject == null)) {}
    try
    {
      paramClass = paramClass.getConstructor(new Class[0]);
      paramClass.setAccessible(true);
      return paramClass.newInstance(new Object[0]);
    }
    catch (IllegalArgumentException paramClass)
    {
      paramClass.printStackTrace();
      return null;
    }
    catch (InstantiationException paramClass)
    {
      for (;;)
      {
        paramClass.printStackTrace();
      }
    }
    catch (IllegalAccessException paramClass)
    {
      for (;;)
      {
        paramClass.printStackTrace();
      }
    }
    catch (InvocationTargetException paramClass)
    {
      for (;;)
      {
        paramClass.printStackTrace();
      }
    }
    catch (NoSuchMethodException paramClass)
    {
      for (;;)
      {
        paramClass.printStackTrace();
      }
    }
    paramClass = paramClass.getConstructor(paramArrayOfClass);
    paramClass.setAccessible(true);
    paramClass = paramClass.newInstance(paramArrayOfObject);
    return paramClass;
  }
}
