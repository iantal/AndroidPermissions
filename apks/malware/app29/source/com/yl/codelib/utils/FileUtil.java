package com.yl.codelib.utils;

import android.content.Context;
import android.content.res.AssetManager;
import android.content.res.Resources;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigInteger;
import java.security.MessageDigest;
import org.apache.http.util.EncodingUtils;

public class FileUtil
{
  public FileUtil() {}
  
  private static String a(InputStream paramInputStream)
  {
    byte[] arrayOfByte = new byte[paramInputStream.available()];
    paramInputStream.read(arrayOfByte);
    paramInputStream.close();
    return EncodingUtils.getString(arrayOfByte, "UTF-8");
  }
  
  public static boolean copyFileToDate(Context paramContext, String paramString1, String paramString2)
  {
    paramString1 = new File(paramString1);
    new StringBuilder(String.valueOf(paramContext.getApplicationContext().getFilesDir().getAbsolutePath())).append("/").append(paramString2);
    paramString1.exists();
    return false;
  }
  
  public static String getFileMD5(File paramFile)
  {
    if ((!paramFile.exists()) || (!paramFile.isFile())) {
      return null;
    }
    byte[] arrayOfByte = new byte['Ð€'];
    try
    {
      MessageDigest localMessageDigest = MessageDigest.getInstance("MD5");
      paramFile = new FileInputStream(paramFile);
      for (;;)
      {
        int i = paramFile.read(arrayOfByte, 0, 1024);
        if (i == -1)
        {
          paramFile.close();
          return new BigInteger(1, localMessageDigest.digest()).toString(16);
        }
        localMessageDigest.update(arrayOfByte, 0, i);
      }
      return null;
    }
    catch (Exception paramFile) {}
  }
  
  /* Error */
  public static String readDateFile(String paramString, Context paramContext)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_3
    //   2: aload_1
    //   3: aload_0
    //   4: invokevirtual 121	android/content/Context:openFileInput	(Ljava/lang/String;)Ljava/io/FileInputStream;
    //   7: astore_0
    //   8: aload_0
    //   9: astore_1
    //   10: aload_0
    //   11: invokestatic 123	com/yl/codelib/utils/FileUtil:a	(Ljava/io/InputStream;)Ljava/lang/String;
    //   14: astore_2
    //   15: aload_2
    //   16: astore_1
    //   17: aload_1
    //   18: astore_2
    //   19: aload_0
    //   20: ifnull +9 -> 29
    //   23: aload_0
    //   24: invokevirtual 96	java/io/FileInputStream:close	()V
    //   27: aload_1
    //   28: astore_2
    //   29: aload_2
    //   30: areturn
    //   31: astore_2
    //   32: aconst_null
    //   33: astore_0
    //   34: aload_0
    //   35: astore_1
    //   36: aload_2
    //   37: invokestatic 129	com/yl/codelib/utils/LogUtil:e	(Ljava/lang/Exception;)V
    //   40: aload_3
    //   41: astore_2
    //   42: aload_0
    //   43: ifnull -14 -> 29
    //   46: aload_0
    //   47: invokevirtual 96	java/io/FileInputStream:close	()V
    //   50: aconst_null
    //   51: areturn
    //   52: astore_0
    //   53: aconst_null
    //   54: areturn
    //   55: astore_0
    //   56: aconst_null
    //   57: astore_1
    //   58: aload_1
    //   59: ifnull +7 -> 66
    //   62: aload_1
    //   63: invokevirtual 96	java/io/FileInputStream:close	()V
    //   66: aload_0
    //   67: athrow
    //   68: astore_1
    //   69: goto -3 -> 66
    //   72: astore_0
    //   73: aload_1
    //   74: areturn
    //   75: astore_0
    //   76: goto -18 -> 58
    //   79: astore_2
    //   80: goto -46 -> 34
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	83	0	paramString	String
    //   0	83	1	paramContext	Context
    //   14	16	2	localObject1	Object
    //   31	6	2	localIOException1	IOException
    //   41	1	2	localObject2	Object
    //   79	1	2	localIOException2	IOException
    //   1	40	3	localObject3	Object
    // Exception table:
    //   from	to	target	type
    //   2	8	31	java/io/IOException
    //   46	50	52	java/io/IOException
    //   2	8	55	finally
    //   62	66	68	java/io/IOException
    //   23	27	72	java/io/IOException
    //   10	15	75	finally
    //   36	40	75	finally
    //   10	15	79	java/io/IOException
  }
  
  public static String readSDCardFile(String paramString)
  {
    return a(new FileInputStream(new File(paramString)));
  }
  
  public static void writeDateFile(String paramString, byte[] paramArrayOfByte, Context paramContext)
  {
    String str = null;
    try
    {
      paramString = paramContext.openFileOutput(paramString, 0);
      str = paramString;
      if (paramArrayOfByte == null) {}
    }
    catch (IOException paramString)
    {
      do
      {
        for (;;)
        {
          try
          {
            paramString.write(paramArrayOfByte);
            if (paramString == null) {}
          }
          finally
          {
            paramArrayOfByte = paramString;
            paramString = paramContext;
            continue;
          }
          try
          {
            paramString.close();
            return;
          }
          catch (IOException paramString)
          {
            return;
          }
        }
        paramString = paramString;
      } while (str == null);
      try
      {
        str.close();
        return;
      }
      catch (IOException paramString)
      {
        return;
      }
    }
    finally
    {
      paramString = finally;
      paramArrayOfByte = null;
    }
    try
    {
      paramArrayOfByte.close();
      throw paramString;
    }
    catch (IOException paramArrayOfByte)
    {
      for (;;) {}
    }
  }
  
  public static void writeSDCardFile(String paramString, byte[] paramArrayOfByte, boolean paramBoolean)
  {
    paramString = new File(paramString);
    try
    {
      paramString = new FileOutputStream(paramString, paramBoolean);
      paramString.write(paramArrayOfByte);
      paramString.close();
      return;
    }
    catch (Exception paramString) {}
  }
  
  public boolean deleteFile(File paramFile, int paramInt)
  {
    int i = 0;
    boolean bool = false;
    if (paramFile.exists())
    {
      if (!paramFile.isFile()) {
        break label30;
      }
      paramFile.delete();
    }
    label30:
    while (!paramFile.isDirectory())
    {
      bool = true;
      return bool;
    }
    File[] arrayOfFile = paramFile.listFiles();
    for (;;)
    {
      if (i >= arrayOfFile.length)
      {
        if (paramInt != 1) {
          break;
        }
        paramFile.delete();
        break;
      }
      deleteFile(arrayOfFile[i], 1);
      i += 1;
    }
  }
  
  public String readAssetsFile(String paramString, Context paramContext)
  {
    return a(paramContext.getResources().getAssets().open(paramString));
  }
  
  public String readRawFile(int paramInt, Context paramContext)
  {
    return a(paramContext.getResources().openRawResource(paramInt));
  }
  
  public void writeSDCardFile(String paramString, byte[] paramArrayOfByte)
  {
    paramString = new FileOutputStream(new File(paramString), true);
    paramString.write(paramArrayOfByte);
    paramString.close();
  }
}
