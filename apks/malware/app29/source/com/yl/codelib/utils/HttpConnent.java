package com.yl.codelib.utils;

import android.util.Log;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.util.List;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpVersion;
import org.apache.http.StatusLine;
import org.apache.http.client.CookieStore;
import org.apache.http.client.HttpClient;
import org.apache.http.client.HttpRequestRetryHandler;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.params.ConnManagerParams;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;
import org.apache.http.util.EntityUtils;

public class HttpConnent
{
  private static HttpRequestRetryHandler I = new c();
  public static final int MAX_REHTTPTIME = 3;
  public static final int TIMEOUT_VALUE = 15000;
  
  public HttpConnent() {}
  
  public static String doHttpDLGet(String paramString1, String paramString2, int paramInt1, int paramInt2)
  {
    do
    {
      str = "NO";
      try
      {
        Object localObject = getHttpClient();
        HttpGet localHttpGet = new HttpGet(paramString1);
        localHttpGet.setHeader("Charset", "UTF-8");
        localHttpGet.setHeader("Content-Type", "application/x-www-form-urlencoded");
        HttpHost localHttpHost = new HttpHost(paramString2, paramInt1);
        ((DefaultHttpClient)localObject).getParams().setParameter("http.route.default-proxy", localHttpHost);
        localObject = ((DefaultHttpClient)localObject).execute(localHttpGet);
        if (((HttpResponse)localObject).getStatusLine().getStatusCode() == 200) {
          str = EntityUtils.toString(((HttpResponse)localObject).getEntity(), "UTF-8");
        }
      }
      catch (Exception localException)
      {
        for (;;)
        {
          int i;
          str = "NO";
          Log.e("HttpConnent", Log.getStackTraceString(localException));
        }
      }
      if ((TextUtil.notNull(str)) && (!str.equals("NO"))) {
        break;
      }
      i = paramInt2 + 1;
      paramInt2 = i;
    } while (i < 3);
    return str;
  }
  
  public static String doHttpGet(String paramString, int paramInt)
  {
    do
    {
      str = "NO";
      try
      {
        Object localObject = getHttpClient();
        HttpGet localHttpGet = new HttpGet(paramString);
        localHttpGet.setHeader("Charset", "UTF-8");
        localHttpGet.setHeader("Content-Type", "application/x-www-form-urlencoded");
        localObject = ((DefaultHttpClient)localObject).execute(localHttpGet);
        if (((HttpResponse)localObject).getStatusLine().getStatusCode() == 200) {
          str = EntityUtils.toString(((HttpResponse)localObject).getEntity(), "UTF-8");
        }
      }
      catch (Exception localException)
      {
        for (;;)
        {
          int i;
          str = "NO";
          Log.e("HttpConnent", Log.getStackTraceString(localException));
        }
      }
      if ((TextUtil.notNull(str)) && (!str.equals("NO"))) {
        break;
      }
      i = paramInt + 1;
      paramInt = i;
    } while (i < 3);
    return str;
  }
  
  public static String doHttpGet(String paramString1, String paramString2, int paramInt)
  {
    do
    {
      str = "NO";
      try
      {
        Object localObject = getHttpClient();
        HttpGet localHttpGet = new HttpGet(paramString1);
        localHttpGet.setHeader("Charset", "UTF-8");
        if (TextUtil.notNull(paramString2)) {
          localHttpGet.setHeader("Cookie", paramString2);
        }
        localHttpGet.setHeader("Content-Type", "application/x-www-form-urlencoded");
        localObject = ((DefaultHttpClient)localObject).execute(localHttpGet);
        if (((HttpResponse)localObject).getStatusLine().getStatusCode() == 200) {
          str = EntityUtils.toString(((HttpResponse)localObject).getEntity(), "UTF-8");
        }
      }
      catch (Exception localException)
      {
        for (;;)
        {
          int i;
          str = "NO";
          Log.e("HttpConnent", Log.getStackTraceString(localException));
        }
      }
      if ((TextUtil.notNull(str)) && (!str.equals("NO"))) {
        break;
      }
      i = paramInt + 1;
      paramInt = i;
    } while (i < 3);
    return str;
  }
  
  public static String doHttpPost(String paramString, int paramInt)
  {
    do
    {
      str = "NO";
      try
      {
        Object localObject = getHttpClient();
        HttpPost localHttpPost = new HttpPost(paramString);
        localHttpPost.setHeader("Charset", "UTF-8");
        localHttpPost.setHeader("Content-Type", "application/x-www-form-urlencoded");
        localObject = ((DefaultHttpClient)localObject).execute(localHttpPost);
        if (((HttpResponse)localObject).getStatusLine().getStatusCode() == 200) {
          str = EntityUtils.toString(((HttpResponse)localObject).getEntity(), "UTF-8");
        }
      }
      catch (Exception localException)
      {
        for (;;)
        {
          int i;
          str = "NO";
          Log.e("HttpConnent", Log.getStackTraceString(localException));
        }
      }
      if ((TextUtil.notNull(str)) && (!str.equals("NO"))) {
        break;
      }
      i = paramInt + 1;
      paramInt = i;
    } while (i < 3);
    return str;
  }
  
  public static String doHttpPost(String paramString1, String paramString2, int paramInt)
  {
    do
    {
      str = "NO";
      try
      {
        Object localObject = getHttpClient();
        HttpPost localHttpPost = new HttpPost(paramString1);
        localHttpPost.setHeader("Charset", "UTF-8");
        if (TextUtil.notNull(paramString2)) {
          localHttpPost.setHeader("Cookie", paramString2);
        }
        localHttpPost.setHeader("Content-Type", "application/x-www-form-urlencoded");
        localObject = ((DefaultHttpClient)localObject).execute(localHttpPost);
        if (((HttpResponse)localObject).getStatusLine().getStatusCode() == 200) {
          str = EntityUtils.toString(((HttpResponse)localObject).getEntity(), "UTF-8");
        }
      }
      catch (Exception localException)
      {
        for (;;)
        {
          int i;
          str = "NO";
          Log.e("HttpConnent", Log.getStackTraceString(localException));
        }
      }
      if ((TextUtil.notNull(str)) && (!str.equals("NO"))) {
        break;
      }
      i = paramInt + 1;
      paramInt = i;
    } while (i < 3);
    return str;
  }
  
  public static String doHttpPost(String paramString, List paramList, int paramInt)
  {
    do
    {
      str = "NO";
      try
      {
        Object localObject = getHttpClient();
        HttpPost localHttpPost = new HttpPost(paramString);
        localHttpPost.setHeader("Charset", "UTF-8");
        localHttpPost.setHeader("Content-Type", "application/x-www-form-urlencoded");
        if (paramList != null) {
          localHttpPost.setEntity(new UrlEncodedFormEntity(paramList, "UTF-8"));
        }
        localObject = ((DefaultHttpClient)localObject).execute(localHttpPost);
        if (((HttpResponse)localObject).getStatusLine().getStatusCode() == 200) {
          str = EntityUtils.toString(((HttpResponse)localObject).getEntity(), "UTF-8");
        }
      }
      catch (Exception localException)
      {
        for (;;)
        {
          int i;
          str = "NO";
          Log.e("HttpConnent", Log.getStackTraceString(localException));
        }
      }
      if ((TextUtil.notNull(str)) && (!str.equals("NO"))) {
        break;
      }
      i = paramInt + 1;
      paramInt = i;
    } while (i < 3);
    return str;
  }
  
  public static String doHttpPostString(String paramString1, String paramString2, int paramInt)
  {
    String str = "NO";
    try
    {
      Object localObject = getHttpClient();
      HttpPost localHttpPost = new HttpPost(paramString1);
      localHttpPost.setHeader("Charset", "UTF-8");
      localHttpPost.setHeader("Content-Type", "text/xml");
      localHttpPost.setEntity(new StringEntity(paramString2));
      localObject = ((DefaultHttpClient)localObject).execute(localHttpPost);
      paramString2 = str;
      if (((HttpResponse)localObject).getStatusLine().getStatusCode() == 200) {
        paramString2 = EntityUtils.toString(((HttpResponse)localObject).getEntity(), "UTF-8");
      }
    }
    catch (Exception localException)
    {
      for (;;)
      {
        paramString2 = "NO";
        Log.e("HttpConnent", Log.getStackTraceString(localException));
      }
    }
    if (TextUtil.notNull(paramString2))
    {
      str = paramString2;
      if (!paramString2.equals("NO")) {}
    }
    else
    {
      paramInt += 1;
      str = paramString2;
      if (paramInt < 3) {
        str = doHttpPost(paramString1, paramInt);
      }
    }
    return str;
  }
  
  /* Error */
  public static int dwload(String paramString, java.io.File paramFile)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 5
    //   3: aconst_null
    //   4: astore 4
    //   6: invokestatic 31	com/yl/codelib/utils/HttpConnent:getHttpClient	()Lorg/apache/http/impl/client/DefaultHttpClient;
    //   9: new 33	org/apache/http/client/methods/HttpGet
    //   12: dup
    //   13: aload_0
    //   14: invokespecial 36	org/apache/http/client/methods/HttpGet:<init>	(Ljava/lang/String;)V
    //   17: invokevirtual 71	org/apache/http/impl/client/DefaultHttpClient:execute	(Lorg/apache/http/client/methods/HttpUriRequest;)Lorg/apache/http/HttpResponse;
    //   20: astore_0
    //   21: aload_0
    //   22: invokeinterface 77 1 0
    //   27: invokeinterface 83 1 0
    //   32: sipush 200
    //   35: if_icmpne +272 -> 307
    //   38: aload_0
    //   39: invokeinterface 87 1 0
    //   44: invokeinterface 155 1 0
    //   49: astore_0
    //   50: aload_0
    //   51: ifnonnull +46 -> 97
    //   54: new 157	java/lang/RuntimeException
    //   57: dup
    //   58: ldc -97
    //   60: invokespecial 160	java/lang/RuntimeException:<init>	(Ljava/lang/String;)V
    //   63: athrow
    //   64: astore_1
    //   65: ldc 107
    //   67: aload_1
    //   68: invokestatic 113	android/util/Log:getStackTraceString	(Ljava/lang/Throwable;)Ljava/lang/String;
    //   71: invokestatic 117	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   74: pop
    //   75: aload_0
    //   76: ifnull +7 -> 83
    //   79: aload_0
    //   80: invokevirtual 165	java/io/InputStream:close	()V
    //   83: aload 4
    //   85: ifnull +220 -> 305
    //   88: aload 4
    //   90: invokevirtual 168	java/io/FileOutputStream:close	()V
    //   93: iconst_m1
    //   94: istore_3
    //   95: iload_3
    //   96: ireturn
    //   97: new 167	java/io/FileOutputStream
    //   100: dup
    //   101: aload_1
    //   102: invokespecial 171	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
    //   105: astore_1
    //   106: sipush 10240
    //   109: newarray byte
    //   111: astore 4
    //   113: aload_0
    //   114: aload 4
    //   116: invokevirtual 175	java/io/InputStream:read	([B)I
    //   119: istore_2
    //   120: iload_2
    //   121: ifle +14 -> 135
    //   124: aload_1
    //   125: aload 4
    //   127: iconst_0
    //   128: iload_2
    //   129: invokevirtual 179	java/io/FileOutputStream:write	([BII)V
    //   132: goto -19 -> 113
    //   135: aload_0
    //   136: invokevirtual 165	java/io/InputStream:close	()V
    //   139: iconst_1
    //   140: istore_3
    //   141: iload_3
    //   142: istore_2
    //   143: aload_0
    //   144: ifnull +9 -> 153
    //   147: aload_0
    //   148: invokevirtual 165	java/io/InputStream:close	()V
    //   151: iload_3
    //   152: istore_2
    //   153: iload_2
    //   154: istore_3
    //   155: aload_1
    //   156: ifnull -61 -> 95
    //   159: aload_1
    //   160: invokevirtual 168	java/io/FileOutputStream:close	()V
    //   163: iload_2
    //   164: ireturn
    //   165: astore_0
    //   166: ldc 107
    //   168: aload_0
    //   169: invokestatic 113	android/util/Log:getStackTraceString	(Ljava/lang/Throwable;)Ljava/lang/String;
    //   172: invokestatic 117	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   175: pop
    //   176: iconst_m1
    //   177: ireturn
    //   178: astore_0
    //   179: ldc 107
    //   181: aload_0
    //   182: invokestatic 113	android/util/Log:getStackTraceString	(Ljava/lang/Throwable;)Ljava/lang/String;
    //   185: invokestatic 117	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   188: pop
    //   189: goto -106 -> 83
    //   192: astore_0
    //   193: ldc 107
    //   195: aload_0
    //   196: invokestatic 113	android/util/Log:getStackTraceString	(Ljava/lang/Throwable;)Ljava/lang/String;
    //   199: invokestatic 117	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   202: pop
    //   203: iconst_m1
    //   204: ireturn
    //   205: astore_1
    //   206: aconst_null
    //   207: astore_0
    //   208: aload 5
    //   210: astore 4
    //   212: aload_0
    //   213: ifnull +7 -> 220
    //   216: aload_0
    //   217: invokevirtual 165	java/io/InputStream:close	()V
    //   220: aload 4
    //   222: ifnull +8 -> 230
    //   225: aload 4
    //   227: invokevirtual 168	java/io/FileOutputStream:close	()V
    //   230: aload_1
    //   231: athrow
    //   232: astore_0
    //   233: ldc 107
    //   235: aload_0
    //   236: invokestatic 113	android/util/Log:getStackTraceString	(Ljava/lang/Throwable;)Ljava/lang/String;
    //   239: invokestatic 117	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   242: pop
    //   243: goto -23 -> 220
    //   246: astore_0
    //   247: ldc 107
    //   249: aload_0
    //   250: invokestatic 113	android/util/Log:getStackTraceString	(Ljava/lang/Throwable;)Ljava/lang/String;
    //   253: invokestatic 117	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   256: pop
    //   257: goto -27 -> 230
    //   260: astore_0
    //   261: ldc 107
    //   263: aload_0
    //   264: invokestatic 113	android/util/Log:getStackTraceString	(Ljava/lang/Throwable;)Ljava/lang/String;
    //   267: invokestatic 117	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   270: pop
    //   271: iconst_m1
    //   272: istore_2
    //   273: goto -120 -> 153
    //   276: astore_1
    //   277: aload 5
    //   279: astore 4
    //   281: goto -69 -> 212
    //   284: astore 5
    //   286: aload_1
    //   287: astore 4
    //   289: aload 5
    //   291: astore_1
    //   292: goto -80 -> 212
    //   295: astore_1
    //   296: goto -84 -> 212
    //   299: astore_1
    //   300: aconst_null
    //   301: astore_0
    //   302: goto -237 -> 65
    //   305: iconst_m1
    //   306: ireturn
    //   307: aconst_null
    //   308: astore_1
    //   309: aconst_null
    //   310: astore_0
    //   311: iconst_m1
    //   312: istore_3
    //   313: goto -172 -> 141
    //   316: astore 5
    //   318: aload_1
    //   319: astore 4
    //   321: aload 5
    //   323: astore_1
    //   324: goto -259 -> 65
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	327	0	paramString	String
    //   0	327	1	paramFile	java.io.File
    //   119	154	2	i	int
    //   94	219	3	j	int
    //   4	316	4	localObject1	Object
    //   1	277	5	localObject2	Object
    //   284	6	5	localObject3	Object
    //   316	6	5	localException	Exception
    // Exception table:
    //   from	to	target	type
    //   54	64	64	java/lang/Exception
    //   97	106	64	java/lang/Exception
    //   159	163	165	java/io/IOException
    //   79	83	178	java/io/IOException
    //   88	93	192	java/io/IOException
    //   6	50	205	finally
    //   216	220	232	java/io/IOException
    //   225	230	246	java/io/IOException
    //   147	151	260	java/io/IOException
    //   54	64	276	finally
    //   97	106	276	finally
    //   106	113	284	finally
    //   113	120	284	finally
    //   124	132	284	finally
    //   135	139	284	finally
    //   65	75	295	finally
    //   6	50	299	java/lang/Exception
    //   106	113	316	java/lang/Exception
    //   113	120	316	java/lang/Exception
    //   124	132	316	java/lang/Exception
    //   135	139	316	java/lang/Exception
  }
  
  public static DefaultHttpClient getHttpClient()
  {
    try
    {
      Object localObject1 = new BasicHttpParams();
      HttpProtocolParams.setVersion((HttpParams)localObject1, HttpVersion.HTTP_1_1);
      HttpProtocolParams.setContentCharset((HttpParams)localObject1, "UTF-8");
      HttpProtocolParams.setUseExpectContinue((HttpParams)localObject1, true);
      HttpProtocolParams.setUserAgent((HttpParams)localObject1, "Mozilla/5.0(Linux;U;Android 2.2.1;en-us;Nexus One Build.FRG83) AppleWebKit/553.1(KHTML,like Gecko) Version/4.0 UCBrowser/9.9.6.495 U3/0.8.0 Mobile Safari/533.1");
      ConnManagerParams.setTimeout((HttpParams)localObject1, 5000L);
      HttpConnectionParams.setConnectionTimeout((HttpParams)localObject1, 20000);
      HttpConnectionParams.setSoTimeout((HttpParams)localObject1, 20000);
      ((HttpParams)localObject1).setIntParameter("http.connection.timeout", 20000);
      ((HttpParams)localObject1).setIntParameter("http.socket.timeout", 20000);
      ((HttpParams)localObject1).setBooleanParameter("http.connection.stalecheck", true);
      SchemeRegistry localSchemeRegistry = new SchemeRegistry();
      localSchemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
      localSchemeRegistry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
      localObject1 = new DefaultHttpClient(new ThreadSafeClientConnManager((HttpParams)localObject1, localSchemeRegistry), (HttpParams)localObject1);
      ((DefaultHttpClient)localObject1).getParams().setParameter("http.protocol.cookie-policy", "best-match");
      ((DefaultHttpClient)localObject1).getParams().setParameter("http.connection.timeout", Integer.valueOf(20000));
      ((DefaultHttpClient)localObject1).getParams().setParameter("http.socket.timeout", Integer.valueOf(20000));
      ((DefaultHttpClient)localObject1).setHttpRequestRetryHandler(I);
      return localObject1;
    }
    finally
    {
      localObject2 = finally;
      throw localObject2;
    }
  }
  
  public static List getHttpCookie(String paramString)
  {
    Object localObject1 = null;
    try
    {
      Object localObject2 = getHttpClient();
      paramString = new HttpPost(paramString);
      paramString.setHeader("Charset", "UTF-8");
      paramString.setHeader("Content-Type", "application/x-www-form-urlencoded");
      BasicHttpContext localBasicHttpContext = new BasicHttpContext();
      BasicCookieStore localBasicCookieStore = new BasicCookieStore();
      localBasicHttpContext.setAttribute("http.cookie-store", localBasicCookieStore);
      localObject2 = ((DefaultHttpClient)localObject2).execute(paramString, localBasicHttpContext);
      paramString = localObject1;
      if (((HttpResponse)localObject2).getStatusLine().getStatusCode() == 200)
      {
        EntityUtils.toString(((HttpResponse)localObject2).getEntity(), "UTF-8");
        paramString = localBasicCookieStore.getCookies();
      }
      return paramString;
    }
    catch (Exception paramString)
    {
      Log.e("HttpConnent", Log.getStackTraceString(paramString));
    }
    return null;
  }
  
  public static long getHttpFileSize(String paramString)
  {
    try
    {
      long l = new DefaultHttpClient().execute(new HttpGet(paramString)).getEntity().getContentLength();
      return l;
    }
    catch (Exception paramString)
    {
      Log.e("HttpConnent", Log.getStackTraceString(paramString));
    }
    return -1L;
  }
  
  public static byte[] readInputStream(InputStream paramInputStream)
  {
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    byte[] arrayOfByte = new byte['Ѐ'];
    for (;;)
    {
      int i = paramInputStream.read(arrayOfByte);
      if (i == -1)
      {
        paramInputStream.close();
        return localByteArrayOutputStream.toByteArray();
      }
      localByteArrayOutputStream.write(arrayOfByte, 0, i);
    }
  }
  
  public static void setHttpParameters(HttpParams paramHttpParams, int paramInt)
  {
    HttpConnectionParams.setConnectionTimeout(paramHttpParams, paramInt);
    HttpConnectionParams.setSoTimeout(paramHttpParams, paramInt);
  }
}
