package com.yl.codelib.utils;

import android.content.Context;
import android.content.Intent;
import android.media.MediaPlayer;
import android.media.RingtoneManager;
import android.net.Uri;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Vibrator;
import android.provider.Settings.Secure;
import android.telephony.TelephonyManager;
import com.yl.codelib.encryption.MD5Encoder;
import java.io.IOException;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.util.Enumeration;

public class PhoneUtil
{
  public PhoneUtil() {}
  
  public static void call(String paramString, Context paramContext)
  {
    paramContext.startActivity(new Intent("android.intent.action.CALL", Uri.parse("tel:" + paramString)));
  }
  
  public static String get11PhoneNum(String paramString)
  {
    String str = paramString;
    if (paramString != null)
    {
      str = paramString;
      if (paramString.length() > 11) {
        str = paramString.substring(paramString.length() - 11);
      }
    }
    return str;
  }
  
  public static String getAndroidId(Context paramContext)
  {
    return Settings.Secure.getString(paramContext.getContentResolver(), "android_id");
  }
  
  public static String getAndroidVersion()
  {
    return Build.VERSION.RELEASE;
  }
  
  public static String getDeviceType()
  {
    return Build.MODEL;
  }
  
  public static String getICCID(Context paramContext)
  {
    return ((TelephonyManager)paramContext.getSystemService("phone")).getSimSerialNumber();
  }
  
  public static String getIMEI(Context paramContext)
  {
    return ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
  }
  
  public static String getIMSI(Context paramContext)
  {
    return ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
  }
  
  public static String getMacAddress(Context paramContext)
  {
    return ((WifiManager)paramContext.getSystemService("wifi")).getConnectionInfo().getMacAddress();
  }
  
  /* Error */
  public static final String getMobileManufacturer()
  {
    // Byte code:
    //   0: invokestatic 126	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   3: ldc -128
    //   5: invokevirtual 132	java/lang/Runtime:exec	(Ljava/lang/String;)Ljava/lang/Process;
    //   8: astore_1
    //   9: new 134	java/io/BufferedReader
    //   12: dup
    //   13: new 136	java/io/InputStreamReader
    //   16: dup
    //   17: aload_1
    //   18: invokevirtual 142	java/lang/Process:getInputStream	()Ljava/io/InputStream;
    //   21: invokespecial 145	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   24: invokespecial 148	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   27: invokevirtual 151	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   30: astore_2
    //   31: aload_2
    //   32: astore_0
    //   33: aload_2
    //   34: invokevirtual 154	java/lang/String:toUpperCase	()Ljava/lang/String;
    //   37: astore_3
    //   38: aload_3
    //   39: astore_0
    //   40: aload_1
    //   41: invokevirtual 157	java/lang/Process:destroy	()V
    //   44: aload_3
    //   45: astore_2
    //   46: aload_1
    //   47: ifnull +9 -> 56
    //   50: aload_1
    //   51: invokevirtual 157	java/lang/Process:destroy	()V
    //   54: aload_3
    //   55: astore_2
    //   56: aload_2
    //   57: astore_0
    //   58: aload_2
    //   59: invokestatic 163	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   62: ifeq +7 -> 69
    //   65: getstatic 166	android/os/Build:MANUFACTURER	Ljava/lang/String;
    //   68: astore_0
    //   69: aload_0
    //   70: invokevirtual 154	java/lang/String:toUpperCase	()Ljava/lang/String;
    //   73: areturn
    //   74: astore_0
    //   75: aconst_null
    //   76: astore_1
    //   77: ldc -88
    //   79: astore_0
    //   80: aload_0
    //   81: astore_2
    //   82: aload_1
    //   83: ifnull -27 -> 56
    //   86: aload_1
    //   87: invokevirtual 157	java/lang/Process:destroy	()V
    //   90: aload_0
    //   91: astore_2
    //   92: goto -36 -> 56
    //   95: astore_0
    //   96: aconst_null
    //   97: astore_1
    //   98: aload_1
    //   99: ifnull +7 -> 106
    //   102: aload_1
    //   103: invokevirtual 157	java/lang/Process:destroy	()V
    //   106: aload_0
    //   107: athrow
    //   108: astore_0
    //   109: goto -11 -> 98
    //   112: astore_0
    //   113: ldc -88
    //   115: astore_0
    //   116: goto -36 -> 80
    //   119: astore_2
    //   120: goto -40 -> 80
    // Local variable table:
    //   start	length	slot	name	signature
    //   32	38	0	localObject1	Object
    //   74	1	0	localException1	Exception
    //   79	12	0	str1	String
    //   95	12	0	localObject2	Object
    //   108	1	0	localObject3	Object
    //   112	1	0	localException2	Exception
    //   115	1	0	str2	String
    //   8	95	1	localProcess	Process
    //   30	62	2	localObject4	Object
    //   119	1	2	localException3	Exception
    //   37	18	3	str3	String
    // Exception table:
    //   from	to	target	type
    //   0	9	74	java/lang/Exception
    //   0	9	95	finally
    //   9	31	108	finally
    //   33	38	108	finally
    //   40	44	108	finally
    //   9	31	112	java/lang/Exception
    //   33	38	119	java/lang/Exception
    //   40	44	119	java/lang/Exception
  }
  
  public static String getOnlyPhoneId(Context paramContext)
  {
    return MD5Encoder.EncoderByMd5(getAndroidId(paramContext) + getIMEI(paramContext));
  }
  
  public static String getPsdnIp()
  {
    try
    {
      localObject = NetworkInterface.getNetworkInterfaces();
      boolean bool = ((Enumeration)localObject).hasMoreElements();
      if (bool) {
        break label18;
      }
    }
    catch (Exception localException)
    {
      Object localObject;
      label18:
      Enumeration localEnumeration;
      InetAddress localInetAddress;
      for (;;) {}
    }
    return "";
    localEnumeration = ((NetworkInterface)((Enumeration)localObject).nextElement()).getInetAddresses();
    do
    {
      if (!localEnumeration.hasMoreElements()) {
        break;
      }
      localInetAddress = (InetAddress)localEnumeration.nextElement();
    } while ((localInetAddress.isLoopbackAddress()) || (!(localInetAddress instanceof Inet4Address)));
    localObject = localInetAddress.getHostAddress().toString();
    return localObject;
  }
  
  public static boolean isEmulator(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
      if ((paramContext != null) && (!paramContext.equals("000000000000000")))
      {
        if (!Build.MODEL.equals("sdk"))
        {
          boolean bool = Build.MODEL.equals("google_sdk");
          if (!bool) {
            return false;
          }
        }
        return true;
      }
    }
    catch (Exception paramContext)
    {
      return false;
    }
    return true;
  }
  
  public static String isSimExist(Context paramContext)
  {
    switch (((TelephonyManager)paramContext.getSystemService("phone")).getSimState())
    {
    default: 
      return null;
    case 1: 
      return "无卡";
    case 4: 
      return "需要NetworkPIN解锁";
    case 2: 
      return "需要PIN解锁";
    case 3: 
      return "需要PUN解锁";
    case 5: 
      return "良好";
    }
    return "未知状态";
  }
  
  public static void sendMessage(String paramString1, String paramString2, Context paramContext)
  {
    paramString1 = new Intent("android.intent.action.SENDTO", Uri.parse("smsto:" + paramString1));
    paramString1.putExtra("sms_body", paramString2);
    paramContext.startActivity(paramString1);
  }
  
  public static void sendMessageOfSystem(Context paramContext, String paramString)
  {
    paramString = new Intent("android.intent.action.SENDTO", Uri.parse("smsto:" + paramString));
    paramString.putExtra("sms_body", "");
    paramContext.startActivity(paramString);
  }
  
  public static void setNotificationRingtone(Context paramContext)
  {
    Uri localUri = RingtoneManager.getDefaultUri(2);
    MediaPlayer localMediaPlayer = new MediaPlayer();
    try
    {
      localMediaPlayer.setDataSource(paramContext, localUri);
      localMediaPlayer.setAudioStreamType(2);
      localMediaPlayer.prepare();
      localMediaPlayer.start();
      return;
    }
    catch (IOException paramContext) {}catch (IllegalStateException paramContext) {}catch (SecurityException paramContext) {}catch (IllegalArgumentException paramContext) {}
  }
  
  public static void setPhoneVibration(Context paramContext, long paramLong)
  {
    ((Vibrator)paramContext.getSystemService("vibrator")).vibrate(paramLong);
  }
}
