package com.yl.codelib.utils;

import java.io.UnsupportedEncodingException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class TextUtil
{
  public TextUtil() {}
  
  public static final String BQchange(String paramString1, String paramString2)
  {
    Object localObject2 = "";
    Object localObject1 = "";
    Object localObject3 = null;
    int i = 0;
    if (i >= paramString1.length()) {
      return localObject2;
    }
    try
    {
      str = paramString1.substring(i, i + 1);
      localObject1 = str;
      byte[] arrayOfByte = str.getBytes(paramString2);
      localObject3 = arrayOfByte;
      localObject1 = str;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException2)
    {
      String str;
      for (;;) {}
    }
    if (localObject3[3] != -1)
    {
      localObject3[2] = ((byte)(localObject3[2] - 32));
      localObject3[3] = -1;
    }
    for (;;)
    {
      try
      {
        str = localObject2 + new String(localObject3, paramString2);
        localObject2 = str;
      }
      catch (UnsupportedEncodingException localUnsupportedEncodingException1)
      {
        continue;
      }
      i += 1;
      break;
      localObject2 = localObject2 + (String)localObject1;
    }
  }
  
  public static final String QBchange(String paramString)
  {
    StringBuffer localStringBuffer = new StringBuffer("");
    int i = 0;
    for (;;)
    {
      try
      {
        int j = paramString.length();
        if (i < j) {
          continue;
        }
      }
      catch (Exception paramString)
      {
        String str;
        byte[] arrayOfByte;
        continue;
      }
      return localStringBuffer.toString();
      str = paramString.substring(i, i + 1);
      if (str.equals(" "))
      {
        localStringBuffer.append(str);
      }
      else
      {
        arrayOfByte = str.getBytes("unicode");
        if (arrayOfByte[2] == 0)
        {
          arrayOfByte[3] = ((byte)(arrayOfByte[3] - 32));
          arrayOfByte[2] = -1;
          localStringBuffer.append(new String(arrayOfByte, "unicode"));
        }
        else
        {
          localStringBuffer.append(str);
        }
      }
      i += 1;
    }
  }
  
  public static String cleanChar(String paramString)
  {
    return Pattern.compile("[`~!@#$%^&*()+=|{}':;',//[//].<>/?~！@#￥%……&*（）——+|{}【】‘；：”“’。，、？]").matcher(paramString).replaceAll("").trim();
  }
  
  public static String delHTMLTag(String paramString)
  {
    paramString = Pattern.compile("<script[^>]*?>[\\s\\S]*?<\\/script>", 2).matcher(paramString).replaceAll("");
    paramString = Pattern.compile("<style[^>]*?>[\\s\\S]*?<\\/style>", 2).matcher(paramString).replaceAll("");
    return Pattern.compile("<[^>]+>", 2).matcher(paramString).replaceAll("");
  }
  
  public static String getOnlyNumStr(String paramString)
  {
    return Pattern.compile("[^0-9]").matcher(paramString).replaceAll("").trim();
  }
  
  public static boolean isBlank(String paramString)
  {
    boolean bool2 = false;
    boolean bool1;
    if ((paramString == null) || ("".equals(paramString)))
    {
      bool1 = true;
      return bool1;
    }
    int i = 0;
    for (;;)
    {
      if (i >= paramString.length()) {
        return true;
      }
      int j = paramString.charAt(i);
      if ((j != 32) && (j != 9) && (j != 13))
      {
        bool1 = bool2;
        if (j != 10) {
          break;
        }
      }
      i += 1;
    }
  }
  
  public static boolean notNull(String paramString)
  {
    return (paramString != null) && (!paramString.equals("")) && (!paramString.equals("null"));
  }
  
  public static String replaceHtml(String paramString1, String paramString2)
  {
    return Pattern.compile(paramString2).matcher(paramString1).replaceAll("");
  }
  
  public static void testCharset(String paramString)
  {
    try
    {
      String str = new String(paramString.getBytes(), "GBK");
      LogUtil.v("****** getBytes() -> GBK ******/n" + str);
      str = new String(paramString.getBytes("GBK"), "UTF-8");
      LogUtil.v("****** GBK -> UTF-8 *******/n" + str);
      str = new String(paramString.getBytes("GBK"), "ISO-8859-1");
      LogUtil.v("****** GBK -> ISO-8859-1 *******/n" + str);
      str = new String(paramString.getBytes("ISO-8859-1"), "UTF-8");
      LogUtil.v("****** ISO-8859-1 -> UTF-8 *******/n" + str);
      str = new String(paramString.getBytes("ISO-8859-1"), "GBK");
      LogUtil.v("****** ISO-8859-1 -> GBK *******/n" + str);
      str = new String(paramString.getBytes("UTF-8"), "GBK");
      LogUtil.v("****** UTF-8 -> GBK *******/n" + str);
      paramString = new String(paramString.getBytes("UTF-8"), "ISO-8859-1");
      LogUtil.v("****** UTF-8 -> ISO-8859-1 *******/n" + paramString);
      return;
    }
    catch (UnsupportedEncodingException paramString) {}
  }
  
  public static String trimAll(String paramString)
  {
    return paramString.replaceAll("　", "").replaceAll(" ", "").trim();
  }
}
