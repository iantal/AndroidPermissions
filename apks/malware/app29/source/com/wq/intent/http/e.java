package com.wq.intent.http;

import android.content.Context;
import android.util.Log;
import com.wq.dd.data.f;
import com.wq.toast.log.a;
import java.net.URLEncoder;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.CookieStore;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.cookie.Cookie;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;
import org.apache.http.util.EntityUtils;

public abstract class e
  extends g
{
  private String k;
  private String l;
  private Map m;
  private c n;
  private boolean o;
  private boolean p;
  private Context q;
  
  public e() {}
  
  private HttpGet a(String paramString, Map paramMap)
  {
    String str;
    Iterator localIterator;
    if (paramString.indexOf("?") < 0)
    {
      paramString = paramString + "?";
      str = paramString;
      if (paramMap != null) {
        localIterator = paramMap.keySet().iterator();
      }
    }
    for (;;)
    {
      if (!localIterator.hasNext())
      {
        str = paramString.replace("?&", "?");
        paramString = new HttpGet(str);
        paramString.setHeader("Content-Type", "text/xml charset=utf-8");
        paramString.setHeader("Proxy-Connection", "Keep-Alive");
        paramString.setHeader("Connection", "Keep-Alive");
        paramString.setHeader("Accept:", "*/*");
        paramString.setHeader("referer", j);
        if (f.i(this.q).trim().equals("54"))
        {
          Log.d("fmz", "TData.uagain = " + com.wq.dd.data.c.u);
          paramString.setHeader("User-Agent", com.wq.dd.data.c.u);
        }
        a(paramString);
        return paramString;
      }
      str = (String)localIterator.next();
      try
      {
        str = paramString + "&" + str + "=" + URLEncoder.encode((String)paramMap.get(str), "utf-8");
        paramString = str;
      }
      catch (Exception localException) {}
      break;
    }
  }
  
  protected static void a(HttpUriRequest paramHttpUriRequest)
  {
    if (i != null) {
      paramHttpUriRequest.setHeader("Cookie", i);
    }
  }
  
  public final String a(String paramString1, String paramString2, Map paramMap, c paramC)
  {
    paramString2 = paramString1.trim();
    try
    {
      paramString1 = new DefaultHttpClient();
      paramString1.getParams().setIntParameter("http.socket.timeout", 200000);
      paramString1.getParams().setIntParameter("http.connection.timeout", 20000);
      paramMap = a(paramString2, paramMap);
      paramString1.getParams().setParameter("http.protocol.cookie-policy", "best-match");
      j = paramString2;
      paramString2 = paramString1.execute(paramMap);
      if (paramString2.getStatusLine().getStatusCode() == 200)
      {
        paramString1 = paramString1.getCookieStore().getCookies();
        int i = 0;
        for (;;)
        {
          if (i >= paramString1.size())
          {
            a.a("fmz", "cookie==" + i);
            paramString1 = new StringBuilder(EntityUtils.toString(paramString2.getEntity()));
            this.p = false;
            return paramString1.toString().replaceAll("<BR>", "\r\n");
          }
          paramMap = (Cookie)paramString1.get(i);
          i = i + paramMap.getName() + "=" + paramMap.getValue() + ";";
          i += 1;
        }
      }
      return null;
    }
    catch (Exception paramString1)
    {
      paramString1 = paramString1;
      this.p = true;
      paramString1.printStackTrace();
      return null;
    }
    finally {}
  }
  
  public abstract void a(String paramString);
  
  public final void a(String paramString1, String paramString2, Map paramMap, boolean paramBoolean, Context paramContext)
  {
    this.k = paramString1;
    this.l = paramString2;
    this.m = paramMap;
    this.n = c.a;
    this.o = paramBoolean;
    this.q = paramContext;
    new h(this, null).execute(new String[0]);
  }
  
  public abstract void a(boolean paramBoolean);
}
