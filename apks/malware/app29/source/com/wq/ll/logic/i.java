package com.wq.ll.logic;

import android.text.TextUtils;
import com.wq.dd.data.b;
import com.wq.goo.rev.WMianService;
import com.wq.intent.http.f;
import com.wq.intent.http.k;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

public final class i
  extends k
{
  private b k;
  private WMianService l;
  private List m = null;
  
  public i() {}
  
  private void a(XmlPullParser paramXmlPullParser)
  {
    for (;;)
    {
      try
      {
        paramXmlPullParser.require(2, null, "root");
        this.m = new ArrayList();
        if (paramXmlPullParser.nextTag() == 3)
        {
          paramXmlPullParser.require(3, null, "root");
          return;
        }
        if (!paramXmlPullParser.getName().equals("fee")) {
          continue;
        }
        this.k = new b();
      }
      catch (XmlPullParserException paramXmlPullParser)
      {
        paramXmlPullParser.printStackTrace();
        return;
        str = paramXmlPullParser.getName();
        if (!str.equals("siteid")) {
          break label138;
        }
        this.k.a(paramXmlPullParser.nextText());
        continue;
      }
      catch (IOException paramXmlPullParser)
      {
        paramXmlPullParser.printStackTrace();
        return;
      }
      if (paramXmlPullParser.nextTag() == 3)
      {
        this.m.add(this.k);
      }
      else
      {
        String str;
        label138:
        if (str.equals("feetype")) {
          this.k.b(paramXmlPullParser.nextText());
        } else if (str.equals("feevalue")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("feenotice")) {
          this.k.c(paramXmlPullParser.nextText());
        } else if (str.equals("feechanid")) {
          this.k.d(paramXmlPullParser.nextText());
        } else if (str.equals("feechanname")) {
          this.k.l(paramXmlPullParser.nextText());
        } else if (str.equals("feeurl")) {
          this.k.e(paramXmlPullParser.nextText());
        } else if (str.equals("playurl")) {
          this.k.f(paramXmlPullParser.nextText());
        } else if (str.equals("webshowurl")) {
          this.k.g(paramXmlPullParser.nextText());
        } else if (str.equals("smskey")) {
          this.k.h(paramXmlPullParser.nextText());
        } else if (str.equals("smsdel")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("smscenter")) {
          this.k.i(paramXmlPullParser.nextText());
        } else if (str.equals("IntervalTime")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("userip")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("REMOTE_ADDR")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("UID")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("mobile")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("version")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("PNO")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("OperatorLine")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("MessageMsg")) {
          this.k.j(paramXmlPullParser.nextText());
        } else if (str.equals("MessageNumber")) {
          this.k.k(paramXmlPullParser.nextText());
        } else if (str.equals("MessageNeedRe")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("MessageReContent")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("Judger")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("smskeysuc")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("WapBusiness")) {
          this.k.m(paramXmlPullParser.nextText());
        } else {
          paramXmlPullParser.nextText();
        }
      }
    }
  }
  
  public final void a(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {}
    while (paramString.contains("您访问的内容不存在")) {
      return;
    }
    paramString = new StringReader(paramString);
    try
    {
      XmlPullParser localXmlPullParser = XmlPullParserFactory.newInstance().newPullParser();
      localXmlPullParser.setInput(paramString);
      localXmlPullParser.next();
      a(localXmlPullParser);
      localXmlPullParser.next();
      localXmlPullParser.require(1, null, null);
      return;
    }
    catch (XmlPullParserException paramString)
    {
      paramString.printStackTrace();
      return;
    }
    catch (IOException paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public final void a(String paramString, Map paramMap, WMianService paramWMianService, boolean paramBoolean)
  {
    this.l = paramWMianService;
    a(paramString, j, paramMap, paramBoolean, f.a);
  }
  
  public final void a(boolean paramBoolean, String paramString)
  {
    this.l.feeListResponse(this.m, paramBoolean);
  }
}
