package com.xs.mm.wlog;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.Enumeration;
import org.json.JSONObject;

public class CheckInformation
{
  public static final String LOGJARVERSION = "one";
  static CheckInformation checkInformation = null;
  public static final String className = "com.xiaoao.riskSnipe.MainActivity";
  static CheckInformation instance;
  public String VERSIONRELEASE;
  public String appId;
  public String appKey;
  public String appName;
  public String buildMANUFACTURER;
  public String buildMODEL;
  public String channelId;
  public int conversation = 1;
  public int density;
  public int densityDpi;
  public String dexSha1;
  public int disHeight;
  public int disWidth;
  public String imei;
  public String imsi;
  public String inetAddr;
  public int initTimes;
  public boolean isGetInfo = false;
  public int isPay;
  public String mac;
  public String netStat;
  public String netType;
  public String networkOperatorName;
  public int orderCount = 1;
  public String packageName;
  public int payStyle = 1;
  public String paycode;
  public String programID;
  public String publicKey;
  public int resultCode;
  public String sessionId;
  public String ssid;
  public String staticMark;
  public String tradeId;
  public String verison = "3.1.7";
  public int versionCode;
  public String versionName;
  
  public CheckInformation() {}
  
  public static String access_netstate(Context paramContext)
  {
    try
    {
      paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if (paramContext == null) {
        return "unknown";
      }
      int i = paramContext.getType();
      if (i == 1) {
        return "wifi";
      }
      paramContext = paramContext.getExtraInfo();
      if (paramContext == null) {
        return "unknown";
      }
      paramContext = paramContext.trim();
      return paramContext;
    }
    catch (Exception paramContext) {}
    return "unknown";
  }
  
  public static boolean checkParams(CheckInformation paramCheckInformation)
  {
    String[] arrayOfString = new String[8];
    arrayOfString[0] = paramCheckInformation.packageName;
    arrayOfString[1] = paramCheckInformation.channelId;
    arrayOfString[2] = paramCheckInformation.appName;
    arrayOfString[3] = paramCheckInformation.versionName;
    arrayOfString[4] = paramCheckInformation.versionCode;
    arrayOfString[5] = paramCheckInformation.programID;
    arrayOfString[6] = paramCheckInformation.paycode;
    arrayOfString[7] = paramCheckInformation.appId;
    int i = 0;
    for (;;)
    {
      if (i >= arrayOfString.length) {
        return true;
      }
      if (TextUtils.isEmpty(arrayOfString[i]))
      {
        System.out.println(arrayOfString[i]);
        return false;
      }
      i += 1;
    }
  }
  
  public static String getInetAddresses()
  {
    try
    {
      localObject = NetworkInterface.getNetworkInterfaces();
      boolean bool = ((Enumeration)localObject).hasMoreElements();
      if (bool) {
        break label18;
      }
    }
    catch (SocketException localSocketException)
    {
      for (;;)
      {
        Object localObject;
        label18:
        Enumeration localEnumeration;
        InetAddress localInetAddress;
        Log.e("WifiPreference IpAddress", localSocketException.toString());
      }
    }
    return "";
    localEnumeration = ((NetworkInterface)((Enumeration)localObject).nextElement()).getInetAddresses();
    do
    {
      if (!localEnumeration.hasMoreElements()) {
        break;
      }
      localInetAddress = (InetAddress)localEnumeration.nextElement();
    } while (localInetAddress.isLoopbackAddress());
    localObject = localInetAddress.getHostAddress().toString();
    return localObject;
  }
  
  public static CheckInformation getInsance()
  {
    if (instance == null) {
      instance = new CheckInformation();
    }
    return instance;
  }
  
  public static String getNetInfo(Context paramContext)
  {
    paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    if (paramContext == null) {
      paramContext = "";
    }
    String str;
    do
    {
      return paramContext;
      str = paramContext.getTypeName();
      if (str.compareTo("MOBILE") == 0) {
        break;
      }
      paramContext = str;
    } while (str.compareTo("mobile") != 0);
    return "GPRS";
  }
  
  public static String getNetworkOperatorName(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getNetworkOperatorName();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  public static void initPhoneInfo(Context paramContext)
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
    WifiManager localWifiManager = (WifiManager)paramContext.getSystemService("wifi");
    TelephonyManager localTelephonyManager = (TelephonyManager)paramContext.getSystemService("phone");
    CheckInformation localCheckInformation = getInsance();
    localCheckInformation.imei = localTelephonyManager.getDeviceId();
    localCheckInformation.imsi = localTelephonyManager.getSubscriberId();
    localCheckInformation.mac = localWifiManager.getConnectionInfo().getMacAddress();
    localCheckInformation.buildMODEL = Build.MODEL;
    localCheckInformation.VERSIONRELEASE = Build.VERSION.RELEASE;
    localCheckInformation.disHeight = localDisplayMetrics.heightPixels;
    localCheckInformation.disWidth = localDisplayMetrics.widthPixels;
    localCheckInformation.inetAddr = getInetAddresses();
    localCheckInformation.netType = getNetInfo(paramContext);
    localCheckInformation.ssid = localWifiManager.getConnectionInfo().getSSID();
    localCheckInformation.verison = "3.1.7";
    localCheckInformation.orderCount = 1;
    localCheckInformation.tradeId = null;
    localCheckInformation.resultCode = 0;
    localCheckInformation.buildMANUFACTURER = Build.MANUFACTURER;
    localCheckInformation.networkOperatorName = getNetworkOperatorName(paramContext);
    localCheckInformation.netStat = access_netstate(paramContext);
    localCheckInformation.density = ((int)localDisplayMetrics.density);
    localCheckInformation.densityDpi = localDisplayMetrics.densityDpi;
  }
  
  public static void parserInitJson(String paramString)
  {
    CheckInformation localCheckInformation = getInsance();
    try
    {
      paramString = new JSONObject(paramString);
      localCheckInformation.packageName = paramString.getString("packageName");
      localCheckInformation.channelId = paramString.getString("channelId");
      localCheckInformation.appName = paramString.getString("appName");
      localCheckInformation.versionName = paramString.getString("versionName");
      localCheckInformation.versionCode = paramString.getInt("versionCode");
      localCheckInformation.programID = paramString.getString("programID");
      localCheckInformation.appId = paramString.getString("appId");
      localCheckInformation.appKey = paramString.getString("appKey");
      localCheckInformation.staticMark = paramString.getString("staticMark");
      localCheckInformation.publicKey = paramString.getString("publicKey");
      localCheckInformation.dexSha1 = paramString.getString("dexSha1");
      return;
    }
    catch (Exception paramString)
    {
      localCheckInformation.packageName = "";
      localCheckInformation.channelId = "";
      localCheckInformation.appName = "";
      localCheckInformation.versionName = "";
      localCheckInformation.versionCode = -1;
      localCheckInformation.programID = "";
      localCheckInformation.paycode = "";
      localCheckInformation.appId = "";
    }
  }
  
  public static void parserPayJson(String paramString)
  {
    CheckInformation localCheckInformation = getInsance();
    try
    {
      paramString = new JSONObject(paramString);
      localCheckInformation.paycode = paramString.getString("paycode");
      localCheckInformation.tradeId = paramString.getString("tradeId");
      return;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public static void reset()
  {
    instance = null;
  }
  
  public void setTradeId(String paramString)
  {
    this.tradeId = paramString;
  }
}
