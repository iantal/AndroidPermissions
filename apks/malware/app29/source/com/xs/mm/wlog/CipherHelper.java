package com.xs.mm.wlog;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.security.spec.AlgorithmParameterSpec;
import java.util.zip.GZIPOutputStream;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

final class CipherHelper
{
  private static CipherHelper mCipherHelper = new CipherHelper();
  private SecretKeySpec secretKeySpec;
  
  private CipherHelper() {}
  
  public static CipherHelper getInstance()
  {
    return mCipherHelper;
  }
  
  private static byte[] zipStr(String paramString)
  {
    if ((paramString != null) && (paramString.length() != 0))
    {
      ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
      try
      {
        GZIPOutputStream localGZIPOutputStream = new GZIPOutputStream(localByteArrayOutputStream);
        localGZIPOutputStream.write(paramString.getBytes("utf-8"));
        localGZIPOutputStream.close();
        return localByteArrayOutputStream.toByteArray();
      }
      catch (IOException paramString)
      {
        for (;;)
        {
          paramString.printStackTrace();
        }
      }
    }
    return null;
  }
  
  public final byte[] encrypt(String paramString)
  {
    Object localObject1;
    Object localObject2;
    int i;
    if (this.secretKeySpec == null)
    {
      localObject1 = "134e3265829ff82daf16e7b740a600b5".getBytes();
      localObject2 = new byte[16];
      i = 0;
    }
    for (;;)
    {
      if ((i >= localObject1.length) || (i >= localObject2.length))
      {
        this.secretKeySpec = new SecretKeySpec((byte[])localObject2, "AES");
        localObject1 = Cipher.getInstance("AES/CBC/PKCS5Padding");
        localObject2 = new IvParameterSpec("0102030405060708".getBytes());
        ((Cipher)localObject1).init(1, this.secretKeySpec, (AlgorithmParameterSpec)localObject2);
        paramString = ((Cipher)localObject1).doFinal(paramString.getBytes());
        return zipStr(new CharacterEncoder().encode8859(paramString));
      }
      localObject2[i] = localObject1[i];
      i += 1;
    }
  }
}
