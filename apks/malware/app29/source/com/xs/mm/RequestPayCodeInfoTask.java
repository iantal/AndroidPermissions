package com.xs.mm;

import android.content.Context;
import android.os.AsyncTask;
import android.text.TextUtils;
import android.util.Xml;
import java.io.ByteArrayInputStream;
import java.util.Calendar;
import org.xmlpull.v1.XmlPullParser;

public class RequestPayCodeInfoTask
  extends AsyncTask<String, String, String>
{
  private static final String URL = "http://ospd.mmarket.com:80/trusted3";
  private Context context;
  
  public RequestPayCodeInfoTask(Context paramContext)
  {
    this.context = paramContext;
  }
  
  String createXml(Context paramContext, String paramString)
  {
    paramContext = new StringBuffer();
    try
    {
      RSAUtils.initRSAKey();
      long l = Calendar.getInstance().getTimeInMillis() / 1000L;
      paramContext.append("<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>");
      paramContext.append("<Trusted3PayCodeQryReq>");
      paramContext.append("<MsgType>");
      paramContext.append("Trusted3PayCodeQryReq");
      paramContext.append("</MsgType>");
      paramContext.append("<Version>");
      paramContext.append("3.1.7");
      paramContext.append("</Version>");
      paramContext.append("<AppID>");
      paramContext.append(paramString);
      paramContext.append("</AppID>");
      paramContext.append("<OSID>");
      paramContext.append("1");
      paramContext.append("</OSID>");
      paramContext.append("<Timestamp>");
      paramContext.append(l);
      paramContext.append("</Timestamp>");
      paramContext.append("<PubKey>");
      paramContext.append(RSAUtils.getRSAPubKey());
      paramContext.append("</PubKey>");
      paramContext.append("</Trusted3PayCodeQryReq>");
      return paramContext.toString();
    }
    catch (Exception paramString)
    {
      for (;;)
      {
        paramString.printStackTrace();
      }
    }
  }
  
  void decryptEnMethod(Context paramContext, String paramString)
  {
    try
    {
      String str = RSAUtils.gerPrivateKey();
      paramString = new String(RSAUtils.decryptByPrivateKey(MMBase64.decode(paramString), str)).trim().split(",");
      str = paramString[(paramString.length - 2)];
      CharSequence localCharSequence = paramString[(paramString.length - 1)];
      if ((!TextUtils.isEmpty(str)) && (!TextUtils.isEmpty(localCharSequence)))
      {
        ShareDataUtils.saveString(paramContext, paramString[1], "enMethod");
        ShareDataUtils.saveString(paramContext, str, "timestamp");
        ShareDataUtils.saveString(paramContext, localCharSequence, "rsaServerKey");
      }
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  protected String doInBackground(String... paramVarArgs)
  {
    String str1 = createXml(this.context, paramVarArgs[0]);
    paramVarArgs = Calendar.getInstance();
    String str2 = paramVarArgs.get(1) + "y" + paramVarArgs.get(2) + "m" + paramVarArgs.get(5) + "d";
    String str3 = ShareDataUtils.readString(this.context, "date");
    paramVarArgs = "";
    BaseHttp localBaseHttp = new BaseHttp();
    if (!TextUtils.equals(str2, str3))
    {
      ShareDataUtils.saveString(this.context, str2, "date");
      str1 = localBaseHttp.httppostSendData(str1, "http://ospd.mmarket.com:80/trusted3");
      paramVarArgs = str1;
      if (str1 != null)
      {
        parserXml(str1, this.context);
        paramVarArgs = str1;
      }
    }
    return paramVarArgs;
  }
  
  void parserXml(String paramString, Context paramContext)
  {
    for (;;)
    {
      try
      {
        paramString = new ByteArrayInputStream(paramString.getBytes("utf-8"));
        localXmlPullParser = Xml.newPullParser();
        localXmlPullParser.setInput(paramString, "utf-8");
        i = localXmlPullParser.getEventType();
      }
      catch (Exception paramString)
      {
        XmlPullParser localXmlPullParser;
        paramString.printStackTrace();
        return;
      }
      int i = localXmlPullParser.next();
      if (TextUtils.equals("EnMethod", localXmlPullParser.getName()))
      {
        decryptEnMethod(paramContext, localXmlPullParser.nextText());
        paramString.close();
        return;
        if (i == 1) {
          return;
        }
        switch (i)
        {
        }
      }
    }
  }
}
