package com.klw.json.zip;

import com.klw.json.JSONException;

public class Huff
  implements None, PostMortem
{
  public static final int education = 1000000;
  private final int domain;
  private final Huff.Symbol[] symbols;
  private Huff.Symbol table;
  private int toLearn;
  private boolean upToDate = false;
  private int width;
  
  public Huff(int paramInt)
  {
    this.domain = paramInt;
    this.toLearn = 1000000;
    int j = paramInt * 2 - 1;
    this.symbols = new Huff.Symbol[j];
    if (i >= paramInt) {}
    for (;;)
    {
      if (paramInt >= j)
      {
        return;
        this.symbols[i] = new Huff.Symbol(i);
        i += 1;
        break;
      }
      this.symbols[paramInt] = new Huff.Symbol(-1);
      paramInt += 1;
    }
  }
  
  private boolean postMortem(int paramInt)
  {
    int[] arrayOfInt = new int[this.domain];
    Object localObject = this.symbols[paramInt];
    if (((Huff.Symbol)localObject).integer != paramInt) {}
    int i;
    label27:
    Huff.Symbol localSymbol;
    do
    {
      return false;
      i = 0;
      localSymbol = ((Huff.Symbol)localObject).back;
      if (localSymbol != null) {
        break;
      }
    } while (localObject != this.table);
    this.width = 0;
    localObject = this.table;
    for (;;)
    {
      if (((Huff.Symbol)localObject).integer != -1)
      {
        if ((((Huff.Symbol)localObject).integer != paramInt) || (i != 0)) {
          break;
        }
        return true;
        if (localSymbol.zero == localObject) {
          arrayOfInt[i] = 0;
        }
        for (;;)
        {
          i += 1;
          localObject = localSymbol;
          break label27;
          if (localSymbol.one != localObject) {
            break;
          }
          arrayOfInt[i] = 1;
        }
      }
      i -= 1;
      if (arrayOfInt[i] != 0) {
        localObject = ((Huff.Symbol)localObject).one;
      } else {
        localObject = ((Huff.Symbol)localObject).zero;
      }
    }
  }
  
  private void write(Huff.Symbol paramSymbol, BitWriter paramBitWriter)
  {
    try
    {
      Huff.Symbol localSymbol = paramSymbol.back;
      if (localSymbol != null)
      {
        this.width += 1;
        write(localSymbol, paramBitWriter);
        if (localSymbol.zero == paramSymbol)
        {
          paramBitWriter.zero();
          return;
        }
        paramBitWriter.one();
        return;
      }
    }
    catch (Throwable paramSymbol)
    {
      throw new JSONException(paramSymbol);
    }
  }
  
  public void generate()
  {
    Object localObject1;
    Object localObject2;
    int i;
    Object localObject3;
    if (!this.upToDate)
    {
      localObject1 = this.symbols[0];
      this.table = null;
      ((Huff.Symbol)localObject1).next = null;
      localObject2 = localObject1;
      i = 1;
      if (i < this.domain) {
        break label129;
      }
      i = this.domain;
      localObject3 = localObject1;
    }
    for (;;)
    {
      Huff.Symbol localSymbol2 = ((Huff.Symbol)localObject3).next;
      Huff.Symbol localSymbol1 = localSymbol2.next;
      localObject2 = this.symbols[i];
      i += 1;
      ((Huff.Symbol)localObject3).weight += localSymbol2.weight;
      ((Huff.Symbol)localObject2).zero = ((Huff.Symbol)localObject3);
      ((Huff.Symbol)localObject2).one = localSymbol2;
      ((Huff.Symbol)localObject2).back = null;
      ((Huff.Symbol)localObject3).back = ((Huff.Symbol)localObject2);
      localSymbol2.back = ((Huff.Symbol)localObject2);
      if (localSymbol1 == null)
      {
        this.table = ((Huff.Symbol)localObject2);
        this.upToDate = true;
        return;
        label129:
        localSymbol1 = this.symbols[i];
        if (localSymbol1.weight < ((Huff.Symbol)localObject1).weight)
        {
          localSymbol1.next = ((Huff.Symbol)localObject1);
          localObject1 = localSymbol1;
          i += 1;
          break;
        }
        localObject3 = localObject2;
        if (localSymbol1.weight < ((Huff.Symbol)localObject2).weight) {}
        for (localObject3 = localObject1;; localObject3 = localObject2)
        {
          localObject2 = ((Huff.Symbol)localObject3).next;
          if ((localObject2 == null) || (localSymbol1.weight < ((Huff.Symbol)localObject2).weight))
          {
            localSymbol1.next = ((Huff.Symbol)localObject2);
            ((Huff.Symbol)localObject3).next = localSymbol1;
            localObject2 = localSymbol1;
            break;
          }
        }
      }
      if (((Huff.Symbol)localObject2).weight < localSymbol1.weight)
      {
        ((Huff.Symbol)localObject2).next = localSymbol1;
        localObject1 = localObject2;
        localObject3 = localObject2;
      }
      else
      {
        do
        {
          localObject1 = localObject3;
          localObject3 = ((Huff.Symbol)localObject1).next;
        } while ((localObject3 != null) && (((Huff.Symbol)localObject2).weight >= ((Huff.Symbol)localObject3).weight));
        ((Huff.Symbol)localObject2).next = ((Huff.Symbol)localObject3);
        ((Huff.Symbol)localObject1).next = ((Huff.Symbol)localObject2);
        localObject1 = localObject2;
        localObject3 = localSymbol1;
      }
    }
  }
  
  public boolean postMortem(PostMortem paramPostMortem)
  {
    int i = 0;
    for (;;)
    {
      if (i >= this.domain) {
        return this.table.postMortem(((Huff)paramPostMortem).table);
      }
      if (!postMortem(i))
      {
        JSONzip.log("\nBad huff ");
        JSONzip.logchar(i, i);
        return false;
      }
      i += 1;
    }
  }
  
  /* Error */
  public int read(BitReader paramBitReader)
  {
    // Byte code:
    //   0: aload_0
    //   1: iconst_0
    //   2: putfield 50	com/klw/json/zip/Huff:width	I
    //   5: aload_0
    //   6: getfield 48	com/klw/json/zip/Huff:table	Lcom/klw/json/zip/Huff$Symbol;
    //   9: astore_2
    //   10: aload_2
    //   11: getfield 43	com/klw/json/zip/Huff$Symbol:integer	I
    //   14: iconst_m1
    //   15: if_icmpeq +16 -> 31
    //   18: aload_0
    //   19: aload_2
    //   20: getfield 43	com/klw/json/zip/Huff$Symbol:integer	I
    //   23: invokevirtual 103	com/klw/json/zip/Huff:tick	(I)V
    //   26: aload_2
    //   27: getfield 43	com/klw/json/zip/Huff$Symbol:integer	I
    //   30: ireturn
    //   31: aload_0
    //   32: aload_0
    //   33: getfield 50	com/klw/json/zip/Huff:width	I
    //   36: iconst_1
    //   37: iadd
    //   38: putfield 50	com/klw/json/zip/Huff:width	I
    //   41: aload_1
    //   42: invokeinterface 109 1 0
    //   47: ifeq +11 -> 58
    //   50: aload_2
    //   51: getfield 56	com/klw/json/zip/Huff$Symbol:one	Lcom/klw/json/zip/Huff$Symbol;
    //   54: astore_2
    //   55: goto -45 -> 10
    //   58: aload_2
    //   59: getfield 53	com/klw/json/zip/Huff$Symbol:zero	Lcom/klw/json/zip/Huff$Symbol;
    //   62: astore_2
    //   63: goto -53 -> 10
    //   66: astore_1
    //   67: new 70	com/klw/json/JSONException
    //   70: dup
    //   71: aload_1
    //   72: invokespecial 73	com/klw/json/JSONException:<init>	(Ljava/lang/Throwable;)V
    //   75: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	76	0	this	Huff
    //   0	76	1	paramBitReader	BitReader
    //   9	54	2	localSymbol	Huff.Symbol
    // Exception table:
    //   from	to	target	type
    //   0	10	66	java/lang/Throwable
    //   10	31	66	java/lang/Throwable
    //   31	55	66	java/lang/Throwable
    //   58	63	66	java/lang/Throwable
  }
  
  public void tick(int paramInt)
  {
    if (this.toLearn > 0)
    {
      this.toLearn -= 1;
      Huff.Symbol localSymbol = this.symbols[paramInt];
      localSymbol.weight = (1L + localSymbol.weight);
      this.upToDate = false;
    }
  }
  
  public void write(int paramInt, BitWriter paramBitWriter)
  {
    this.width = 0;
    write(this.symbols[paramInt], paramBitWriter);
    tick(paramInt);
  }
}
