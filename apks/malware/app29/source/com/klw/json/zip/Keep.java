package com.klw.json.zip;

import com.klw.json.Kim;
import java.util.HashMap;

class Keep
  implements None, PostMortem
{
  private int capacity;
  protected int length;
  private Object[] list;
  private HashMap<Object, Integer> map;
  private int power;
  private long[] ticks;
  
  public Keep(int paramInt)
  {
    this.capacity = (1 << paramInt);
    this.length = 0;
    this.power = 0;
    this.ticks = new long[this.capacity];
    this.list = new Object[this.capacity];
    this.map = new HashMap(this.capacity);
  }
  
  public static long age(long paramLong)
  {
    if (paramLong >= 32L) {
      return 16L;
    }
    return paramLong / 2L;
  }
  
  private void compact()
  {
    int j = 0;
    int i = 0;
    if (i >= this.capacity) {
      if (j >= this.capacity) {
        break label108;
      }
    }
    for (this.length = j;; this.length = 0)
    {
      this.power = 0;
      return;
      Object localObject = this.list[i];
      long l = age(this.ticks[i]);
      if (l > 0L)
      {
        this.ticks[j] = l;
        this.list[j] = localObject;
        this.map.put(localObject, Integer.valueOf(j));
        j += 1;
      }
      for (;;)
      {
        i += 1;
        break;
        this.map.remove(localObject);
      }
      label108:
      this.map.clear();
    }
  }
  
  public int bitsize()
  {
    for (;;)
    {
      if (1 << this.power >= this.length) {
        return this.power;
      }
      this.power += 1;
    }
  }
  
  public int find(Object paramObject)
  {
    paramObject = this.map.get(paramObject);
    if ((paramObject instanceof Integer)) {
      return ((Integer)paramObject).intValue();
    }
    return -1;
  }
  
  public boolean postMortem(PostMortem paramPostMortem)
  {
    Keep localKeep = (Keep)paramPostMortem;
    if (this.length != localKeep.length)
    {
      JSONzip.log(this.length + " <> " + localKeep.length);
      return false;
    }
    int i = 0;
    for (;;)
    {
      if (i >= this.length) {
        return true;
      }
      if ((this.list[i] instanceof Kim)) {}
      Object localObject1;
      for (boolean bool = this.list[i].equals(localKeep.list[i]); !bool; bool = paramPostMortem.equals(localObject1))
      {
        JSONzip.log("\n[" + i + "]\n " + this.list[i] + "\n " + localKeep.list[i] + "\n " + this.ticks[i] + "\n " + localKeep.ticks[i]);
        return false;
        localObject1 = this.list[i];
        Object localObject2 = localKeep.list[i];
        paramPostMortem = (PostMortem)localObject1;
        if ((localObject1 instanceof Number)) {
          paramPostMortem = localObject1.toString();
        }
        localObject1 = localObject2;
        if ((localObject2 instanceof Number)) {
          localObject1 = localObject2.toString();
        }
      }
      i += 1;
    }
  }
  
  public void register(Object paramObject)
  {
    if (this.length >= this.capacity) {
      compact();
    }
    this.list[this.length] = paramObject;
    this.map.put(paramObject, Integer.valueOf(this.length));
    this.ticks[this.length] = 1L;
    this.length += 1;
  }
  
  public void tick(int paramInt)
  {
    long[] arrayOfLong = this.ticks;
    arrayOfLong[paramInt] = (1L + arrayOfLong[paramInt]);
  }
  
  public Object value(int paramInt)
  {
    return this.list[paramInt];
  }
}
