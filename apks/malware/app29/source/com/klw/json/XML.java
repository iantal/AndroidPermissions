package com.klw.json;

import java.util.Iterator;

public class XML
{
  public static final Character AMP = Character.valueOf('&');
  public static final Character APOS = Character.valueOf('\'');
  public static final Character BANG = Character.valueOf('!');
  public static final Character EQ = Character.valueOf('=');
  public static final Character GT = Character.valueOf('>');
  public static final Character LT = Character.valueOf('<');
  public static final Character QUEST = Character.valueOf('?');
  public static final Character QUOT = Character.valueOf('"');
  public static final Character SLASH = Character.valueOf('/');
  
  public XML() {}
  
  public static String escape(String paramString)
  {
    StringBuilder localStringBuilder = new StringBuilder(paramString.length());
    int i = 0;
    int j = paramString.length();
    if (i >= j) {
      return localStringBuilder.toString();
    }
    char c = paramString.charAt(i);
    switch (c)
    {
    default: 
      localStringBuilder.append(c);
    }
    for (;;)
    {
      i += 1;
      break;
      localStringBuilder.append("&amp;");
      continue;
      localStringBuilder.append("&lt;");
      continue;
      localStringBuilder.append("&gt;");
      continue;
      localStringBuilder.append("&quot;");
      continue;
      localStringBuilder.append("&apos;");
    }
  }
  
  public static void noSpace(String paramString)
  {
    int j = paramString.length();
    if (j == 0) {
      throw new JSONException("Empty string.");
    }
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return;
      }
      if (Character.isWhitespace(paramString.charAt(i))) {
        throw new JSONException("'" + paramString + "' contains a space character.");
      }
      i += 1;
    }
  }
  
  private static boolean parse(XMLTokener paramXMLTokener, JSONObject paramJSONObject, String paramString)
  {
    boolean bool = true;
    Object localObject = paramXMLTokener.nextToken();
    int i;
    if (localObject == BANG)
    {
      i = paramXMLTokener.next();
      if (i == 45) {
        if (paramXMLTokener.next() == '-')
        {
          paramXMLTokener.skipPast("-->");
          bool = false;
        }
      }
    }
    do
    {
      return bool;
      paramXMLTokener.back();
      int j;
      do
      {
        j = 1;
        paramJSONObject = paramXMLTokener.nextMeta();
        if (paramJSONObject != null) {
          break;
        }
        throw paramXMLTokener.syntaxError("Missing '>' after '<!'.");
      } while (i != 91);
      if (("CDATA".equals(paramXMLTokener.nextToken())) && (paramXMLTokener.next() == '['))
      {
        paramXMLTokener = paramXMLTokener.nextCDATA();
        if (paramXMLTokener.length() <= 0) {
          break;
        }
        paramJSONObject.accumulate("content", paramXMLTokener);
        return false;
      }
      throw paramXMLTokener.syntaxError("Expected 'CDATA['");
      if (paramJSONObject == LT) {
        i = j + 1;
      }
      for (;;)
      {
        j = i;
        if (i > 0) {
          break;
        }
        return false;
        i = j;
        if (paramJSONObject == GT) {
          i = j - 1;
        }
      }
      if (localObject == QUEST)
      {
        paramXMLTokener.skipPast("?>");
        return false;
      }
      if (localObject != SLASH) {
        break label278;
      }
      paramJSONObject = paramXMLTokener.nextToken();
      if (paramString == null) {
        throw paramXMLTokener.syntaxError("Mismatched close tag " + paramJSONObject);
      }
      if (!paramJSONObject.equals(paramString)) {
        throw paramXMLTokener.syntaxError("Mismatched " + paramString + " and " + paramJSONObject);
      }
    } while (paramXMLTokener.nextToken() == GT);
    throw paramXMLTokener.syntaxError("Misshaped close tag");
    label278:
    if ((localObject instanceof Character)) {
      throw paramXMLTokener.syntaxError("Misshaped tag");
    }
    String str = (String)localObject;
    JSONObject localJSONObject = new JSONObject();
    paramString = null;
    for (;;)
    {
      localObject = paramString;
      if (paramString == null) {
        localObject = paramXMLTokener.nextToken();
      }
      if (!(localObject instanceof String)) {
        break;
      }
      localObject = (String)localObject;
      paramString = paramXMLTokener.nextToken();
      if (paramString == EQ)
      {
        paramString = paramXMLTokener.nextToken();
        if (!(paramString instanceof String)) {
          throw paramXMLTokener.syntaxError("Missing value");
        }
        localJSONObject.accumulate((String)localObject, stringToValue((String)paramString));
        paramString = null;
      }
      else
      {
        localJSONObject.accumulate((String)localObject, "");
      }
    }
    if (localObject == SLASH)
    {
      if (paramXMLTokener.nextToken() != GT) {
        throw paramXMLTokener.syntaxError("Misshaped tag");
      }
      if (localJSONObject.length() > 0)
      {
        paramJSONObject.accumulate(str, localJSONObject);
        return false;
      }
      paramJSONObject.accumulate(str, "");
      return false;
    }
    if (localObject == GT)
    {
      label536:
      do
      {
        for (;;)
        {
          paramString = paramXMLTokener.nextContent();
          if (paramString == null)
          {
            if (str == null) {
              break;
            }
            throw paramXMLTokener.syntaxError("Unclosed tag " + str);
          }
          if (!(paramString instanceof String)) {
            break label536;
          }
          paramString = (String)paramString;
          if (paramString.length() > 0) {
            localJSONObject.accumulate("content", stringToValue(paramString));
          }
        }
      } while ((paramString != LT) || (!parse(paramXMLTokener, localJSONObject, str)));
      if (localJSONObject.length() == 0)
      {
        paramJSONObject.accumulate(str, "");
        return false;
      }
      if ((localJSONObject.length() == 1) && (localJSONObject.opt("content") != null))
      {
        paramJSONObject.accumulate(str, localJSONObject.opt("content"));
        return false;
      }
      paramJSONObject.accumulate(str, localJSONObject);
      return false;
    }
    throw paramXMLTokener.syntaxError("Misshaped tag");
  }
  
  public static Object stringToValue(String paramString)
  {
    Object localObject;
    if ("true".equalsIgnoreCase(paramString)) {
      localObject = Boolean.TRUE;
    }
    for (;;)
    {
      return localObject;
      if ("false".equalsIgnoreCase(paramString)) {
        return Boolean.FALSE;
      }
      if ("null".equalsIgnoreCase(paramString)) {
        return JSONObject.NULL;
      }
      try
      {
        int i = paramString.charAt(0);
        if (i != 45)
        {
          localObject = paramString;
          if (i >= 48)
          {
            localObject = paramString;
            if (i > 57) {}
          }
        }
        else
        {
          localObject = new Long(paramString);
          bool = ((Long)localObject).toString().equals(paramString);
          if (!bool) {
            return paramString;
          }
        }
      }
      catch (Exception localException1)
      {
        try
        {
          Double localDouble = new Double(paramString);
          boolean bool = localDouble.toString().equals(paramString);
          String str = paramString;
          if (bool) {
            return localDouble;
          }
        }
        catch (Exception localException2) {}
      }
    }
    return paramString;
  }
  
  public static JSONObject toJSONObject(String paramString)
  {
    JSONObject localJSONObject = new JSONObject();
    paramString = new XMLTokener(paramString);
    for (;;)
    {
      if ((!paramString.more()) || (!paramString.skipPast("<"))) {
        return localJSONObject;
      }
      parse(paramString, localJSONObject, null);
    }
  }
  
  public static String toString(Object paramObject)
  {
    return toString(paramObject, null);
  }
  
  public static String toString(Object paramObject, String paramString)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    Object localObject2;
    Object localObject1;
    int j;
    int i;
    if ((paramObject instanceof JSONObject))
    {
      if (paramString != null)
      {
        localStringBuilder.append('<');
        localStringBuilder.append(paramString);
        localStringBuilder.append('>');
      }
      localObject2 = (JSONObject)paramObject;
      Iterator localIterator = ((JSONObject)localObject2).keys();
      for (;;)
      {
        if (!localIterator.hasNext())
        {
          if (paramString != null)
          {
            localStringBuilder.append("</");
            localStringBuilder.append(paramString);
            localStringBuilder.append('>');
          }
          return localStringBuilder.toString();
        }
        String str = (String)localIterator.next();
        localObject1 = ((JSONObject)localObject2).opt(str);
        paramObject = localObject1;
        if (localObject1 == null) {
          paramObject = "";
        }
        if ((paramObject instanceof String)) {
          localObject1 = (String)paramObject;
        }
        if ("content".equals(str))
        {
          if ((paramObject instanceof JSONArray))
          {
            paramObject = (JSONArray)paramObject;
            j = paramObject.length();
            i = 0;
            while (i < j)
            {
              if (i > 0) {
                localStringBuilder.append('\n');
              }
              localStringBuilder.append(escape(paramObject.get(i).toString()));
              i += 1;
            }
          }
          else
          {
            localStringBuilder.append(escape(paramObject.toString()));
          }
        }
        else
        {
          if ((paramObject instanceof JSONArray))
          {
            paramObject = (JSONArray)paramObject;
            j = paramObject.length();
            i = 0;
            label249:
            if (i < j)
            {
              localObject1 = paramObject.get(i);
              if (!(localObject1 instanceof JSONArray)) {
                break label335;
              }
              localStringBuilder.append('<');
              localStringBuilder.append(str);
              localStringBuilder.append('>');
              localStringBuilder.append(toString(localObject1));
              localStringBuilder.append("</");
              localStringBuilder.append(str);
              localStringBuilder.append('>');
            }
            for (;;)
            {
              i += 1;
              break label249;
              break;
              label335:
              localStringBuilder.append(toString(localObject1, str));
            }
          }
          if ("".equals(paramObject))
          {
            localStringBuilder.append('<');
            localStringBuilder.append(str);
            localStringBuilder.append("/>");
          }
          else
          {
            localStringBuilder.append(toString(paramObject, str));
          }
        }
      }
    }
    if (paramObject.getClass().isArray()) {
      paramObject = new JSONArray(paramObject);
    }
    for (;;)
    {
      if ((paramObject instanceof JSONArray))
      {
        localObject1 = (JSONArray)paramObject;
        j = ((JSONArray)localObject1).length();
        i = 0;
        if (i >= j) {
          return localStringBuilder.toString();
        }
        localObject2 = ((JSONArray)localObject1).opt(i);
        if (paramString == null) {}
        for (paramObject = "array";; paramObject = paramString)
        {
          localStringBuilder.append(toString(localObject2, paramObject));
          i += 1;
          break;
        }
      }
      if (paramObject == null) {}
      for (paramObject = "null"; paramString == null; paramObject = escape(paramObject.toString())) {
        return "\"" + paramObject + "\"";
      }
      if (paramObject.length() == 0) {
        return "<" + paramString + "/>";
      }
      return "<" + paramString + ">" + paramObject + "</" + paramString + ">";
    }
  }
}
