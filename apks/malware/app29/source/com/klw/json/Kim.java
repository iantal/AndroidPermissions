package com.klw.json;

import java.util.Arrays;

public class Kim
{
  private byte[] bytes = null;
  private int hashcode = 0;
  public int length = 0;
  private String string = null;
  
  public Kim(Kim paramKim, int paramInt1, int paramInt2)
  {
    this(paramKim.bytes, paramInt1, paramInt2);
  }
  
  public Kim(String paramString)
  {
    int i2 = paramString.length();
    this.hashcode = 0;
    this.length = 0;
    int i;
    int m;
    if (i2 > 0)
    {
      i = 0;
      if (i >= i2)
      {
        this.bytes = new byte[this.length];
        m = 1;
        k = 0;
        i = 0;
        if (i < i2) {
          break label216;
        }
        this.hashcode += (m << 16);
      }
    }
    else
    {
      return;
    }
    int k = paramString.charAt(i);
    if (k <= 127) {
      this.length += 1;
    }
    int j;
    for (;;)
    {
      i += 1;
      break;
      if (k <= 16383)
      {
        this.length += 2;
      }
      else
      {
        j = i;
        if (k >= 55296)
        {
          j = i;
          if (k <= 57343)
          {
            j = i + 1;
            i = paramString.charAt(j);
            if ((k > 56319) || (i < 56320) || (i > 57343)) {
              throw new JSONException("Bad UTF16");
            }
          }
        }
        this.length += 3;
        i = j;
      }
    }
    label216:
    int i1 = paramString.charAt(i);
    if (i1 <= 127)
    {
      this.bytes[k] = ((byte)i1);
      j = i1 + m;
      this.hashcode += j;
      k += 1;
    }
    for (;;)
    {
      i += 1;
      m = j;
      break;
      if (i1 <= 16383)
      {
        j = i1 >>> 7 | 0x80;
        this.bytes[k] = ((byte)j);
        j += m;
        this.hashcode += j;
        k += 1;
        m = i1 & 0x7F;
        this.bytes[k] = ((byte)m);
        j = m + j;
        this.hashcode += j;
        k += 1;
      }
      else
      {
        j = i;
        int n = i1;
        if (i1 >= 55296)
        {
          j = i;
          n = i1;
          if (i1 <= 56319)
          {
            j = i + 1;
            n = 65536 + ((i1 & 0x3FF) << 10 | paramString.charAt(j) & 0x3FF);
          }
        }
        i = n >>> 14 | 0x80;
        this.bytes[k] = ((byte)i);
        i += m;
        this.hashcode += i;
        k += 1;
        m = n >>> 7 & 0xFF | 0x80;
        this.bytes[k] = ((byte)m);
        i += m;
        this.hashcode += i;
        m = k + 1;
        k = n & 0x7F;
        this.bytes[m] = ((byte)k);
        k += i;
        this.hashcode += k;
        m += 1;
        i = j;
        j = k;
        k = m;
      }
    }
  }
  
  public Kim(byte[] paramArrayOfByte, int paramInt)
  {
    this(paramArrayOfByte, 0, paramInt);
  }
  
  public Kim(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    int i = 1;
    this.hashcode = 0;
    this.length = (paramInt2 - paramInt1);
    if (this.length > 0)
    {
      this.bytes = new byte[this.length];
      paramInt2 = j;
    }
    for (;;)
    {
      if (paramInt2 >= this.length)
      {
        this.hashcode += (i << 16);
        return;
      }
      j = paramArrayOfByte[(paramInt2 + paramInt1)] & 0xFF;
      i += j;
      this.hashcode += i;
      this.bytes[paramInt2] = ((byte)j);
      paramInt2 += 1;
    }
  }
  
  public static int characterSize(int paramInt)
  {
    if ((paramInt < 0) || (paramInt > 1114111)) {
      throw new JSONException("Bad character " + paramInt);
    }
    if (paramInt <= 127) {
      return 1;
    }
    if (paramInt <= 16383) {
      return 2;
    }
    return 3;
  }
  
  public int characterAt(int paramInt)
  {
    int i = get(paramInt);
    if ((i & 0x80) == 0) {}
    int j;
    do
    {
      return i;
      j = get(paramInt + 1);
      if ((j & 0x80) != 0) {
        break;
      }
      j = (i & 0x7F) << 7 | j;
      i = j;
    } while (j > 127);
    do
    {
      int k;
      do
      {
        throw new JSONException("Bad character at " + paramInt);
        k = get(paramInt + 2);
        j = (i & 0x7F) << 14 | (j & 0x7F) << 7 | k;
      } while (((k & 0x80) != 0) || (j <= 16383) || (j > 1114111));
      i = j;
      if (j < 55296) {
        break;
      }
    } while (j <= 57343);
    return j;
  }
  
  public int copy(byte[] paramArrayOfByte, int paramInt)
  {
    System.arraycopy(this.bytes, 0, paramArrayOfByte, paramInt, this.length);
    return this.length + paramInt;
  }
  
  public boolean equals(Object paramObject)
  {
    if (!(paramObject instanceof Kim)) {}
    do
    {
      return false;
      paramObject = (Kim)paramObject;
      if (this == paramObject) {
        return true;
      }
    } while (this.hashcode != paramObject.hashcode);
    return Arrays.equals(this.bytes, paramObject.bytes);
  }
  
  public int get(int paramInt)
  {
    if ((paramInt < 0) || (paramInt > this.length)) {
      throw new JSONException("Bad character at " + paramInt);
    }
    return this.bytes[paramInt] & 0xFF;
  }
  
  public int hashCode()
  {
    return this.hashcode;
  }
  
  public String toString()
  {
    char[] arrayOfChar;
    int j;
    int i;
    if (this.string == null)
    {
      arrayOfChar = new char[this.length];
      j = 0;
      i = 0;
      if (j >= this.length) {
        this.string = new String(arrayOfChar, 0, i);
      }
    }
    else
    {
      return this.string;
    }
    int k = characterAt(j);
    if (k < 65536)
    {
      arrayOfChar[i] = ((char)k);
      i += 1;
    }
    for (;;)
    {
      j += characterSize(k);
      break;
      arrayOfChar[i] = ((char)(0xD800 | k - 65536 >>> 10));
      i += 1;
      arrayOfChar[i] = ((char)(0xDC00 | k & 0x3FF));
      i += 1;
    }
  }
}
