package net.tsz.afinal;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;
import java.io.File;
import java.io.IOException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import net.tsz.afinal.db.sqlite.CursorUtils;
import net.tsz.afinal.db.sqlite.DbModel;
import net.tsz.afinal.db.sqlite.OneToManyLazyLoader;
import net.tsz.afinal.db.sqlite.SqlBuilder;
import net.tsz.afinal.db.sqlite.SqlInfo;
import net.tsz.afinal.db.table.Id;
import net.tsz.afinal.db.table.KeyValue;
import net.tsz.afinal.db.table.ManyToOne;
import net.tsz.afinal.db.table.OneToMany;
import net.tsz.afinal.db.table.TableInfo;
import net.tsz.afinal.exception.DbException;

public class FinalDb
{
  private static final String TAG = "FinalDb";
  private static HashMap<String, FinalDb> daoMap = new HashMap();
  private FinalDb.DaoConfig config;
  private SQLiteDatabase db;
  
  private FinalDb(FinalDb.DaoConfig paramDaoConfig)
  {
    if (paramDaoConfig == null) {
      throw new DbException("daoConfig is null");
    }
    if (paramDaoConfig.getContext() == null) {
      throw new DbException("android context is null");
    }
    if ((paramDaoConfig.getTargetDirectory() != null) && (paramDaoConfig.getTargetDirectory().trim().length() > 0)) {}
    for (this.db = createDbFileOnSDCard(paramDaoConfig.getTargetDirectory(), paramDaoConfig.getDbName());; this.db = new FinalDb.SqliteDbHelper(this, paramDaoConfig.getContext().getApplicationContext(), paramDaoConfig.getDbName(), paramDaoConfig.getDbVersion(), paramDaoConfig.getDbUpdateListener()).getWritableDatabase())
    {
      this.config = paramDaoConfig;
      return;
    }
  }
  
  private void checkTableExist(Class<?> paramClass)
  {
    if (!tableIsExist(TableInfo.get(paramClass)))
    {
      paramClass = SqlBuilder.getCreatTableSQL(paramClass);
      debugSql(paramClass);
      this.db.execSQL(paramClass);
    }
  }
  
  public static FinalDb create(Context paramContext)
  {
    FinalDb.DaoConfig localDaoConfig = new FinalDb.DaoConfig();
    localDaoConfig.setContext(paramContext);
    return create(localDaoConfig);
  }
  
  public static FinalDb create(Context paramContext, String paramString)
  {
    FinalDb.DaoConfig localDaoConfig = new FinalDb.DaoConfig();
    localDaoConfig.setContext(paramContext);
    localDaoConfig.setDbName(paramString);
    return create(localDaoConfig);
  }
  
  public static FinalDb create(Context paramContext, String paramString1, String paramString2)
  {
    FinalDb.DaoConfig localDaoConfig = new FinalDb.DaoConfig();
    localDaoConfig.setContext(paramContext);
    localDaoConfig.setDbName(paramString2);
    localDaoConfig.setTargetDirectory(paramString1);
    return create(localDaoConfig);
  }
  
  public static FinalDb create(Context paramContext, String paramString1, String paramString2, boolean paramBoolean)
  {
    FinalDb.DaoConfig localDaoConfig = new FinalDb.DaoConfig();
    localDaoConfig.setContext(paramContext);
    localDaoConfig.setTargetDirectory(paramString1);
    localDaoConfig.setDbName(paramString2);
    localDaoConfig.setDebug(paramBoolean);
    return create(localDaoConfig);
  }
  
  public static FinalDb create(Context paramContext, String paramString1, String paramString2, boolean paramBoolean, int paramInt, FinalDb.DbUpdateListener paramDbUpdateListener)
  {
    FinalDb.DaoConfig localDaoConfig = new FinalDb.DaoConfig();
    localDaoConfig.setContext(paramContext);
    localDaoConfig.setTargetDirectory(paramString1);
    localDaoConfig.setDbName(paramString2);
    localDaoConfig.setDebug(paramBoolean);
    localDaoConfig.setDbVersion(paramInt);
    localDaoConfig.setDbUpdateListener(paramDbUpdateListener);
    return create(localDaoConfig);
  }
  
  public static FinalDb create(Context paramContext, String paramString, boolean paramBoolean)
  {
    FinalDb.DaoConfig localDaoConfig = new FinalDb.DaoConfig();
    localDaoConfig.setContext(paramContext);
    localDaoConfig.setDbName(paramString);
    localDaoConfig.setDebug(paramBoolean);
    return create(localDaoConfig);
  }
  
  public static FinalDb create(Context paramContext, String paramString, boolean paramBoolean, int paramInt, FinalDb.DbUpdateListener paramDbUpdateListener)
  {
    FinalDb.DaoConfig localDaoConfig = new FinalDb.DaoConfig();
    localDaoConfig.setContext(paramContext);
    localDaoConfig.setDbName(paramString);
    localDaoConfig.setDebug(paramBoolean);
    localDaoConfig.setDbVersion(paramInt);
    localDaoConfig.setDbUpdateListener(paramDbUpdateListener);
    return create(localDaoConfig);
  }
  
  public static FinalDb create(Context paramContext, boolean paramBoolean)
  {
    FinalDb.DaoConfig localDaoConfig = new FinalDb.DaoConfig();
    localDaoConfig.setContext(paramContext);
    localDaoConfig.setDebug(paramBoolean);
    return create(localDaoConfig);
  }
  
  public static FinalDb create(FinalDb.DaoConfig paramDaoConfig)
  {
    return getInstance(paramDaoConfig);
  }
  
  private SQLiteDatabase createDbFileOnSDCard(String paramString1, String paramString2)
  {
    Object localObject = null;
    paramString2 = new File(paramString1, paramString2);
    if (!paramString2.exists())
    {
      paramString1 = localObject;
      try
      {
        if (paramString2.createNewFile()) {
          paramString1 = SQLiteDatabase.openOrCreateDatabase(paramString2, null);
        }
        return paramString1;
      }
      catch (IOException paramString1)
      {
        throw new DbException("数据库文件创建失败", paramString1);
      }
    }
    return SQLiteDatabase.openOrCreateDatabase(paramString2, null);
  }
  
  private void debugSql(String paramString)
  {
    if ((this.config != null) && (this.config.isDebug())) {
      Log.d("Debug SQL", ">>>>>>  " + paramString);
    }
  }
  
  private void exeSqlInfo(SqlInfo paramSqlInfo)
  {
    if (paramSqlInfo != null)
    {
      debugSql(paramSqlInfo.getSql());
      this.db.execSQL(paramSqlInfo.getSql(), paramSqlInfo.getBindArgsAsArray());
      return;
    }
    Log.e("FinalDb", "sava error:sqlInfo is null");
  }
  
  /* Error */
  private <T> List<T> findAllBySql(Class<T> paramClass, String paramString)
  {
    // Byte code:
    //   0: aload_0
    //   1: aload_1
    //   2: invokespecial 224	net/tsz/afinal/FinalDb:checkTableExist	(Ljava/lang/Class;)V
    //   5: aload_0
    //   6: aload_2
    //   7: invokespecial 108	net/tsz/afinal/FinalDb:debugSql	(Ljava/lang/String;)V
    //   10: aload_0
    //   11: getfield 64	net/tsz/afinal/FinalDb:db	Landroid/database/sqlite/SQLiteDatabase;
    //   14: aload_2
    //   15: aconst_null
    //   16: invokevirtual 228	android/database/sqlite/SQLiteDatabase:rawQuery	(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor;
    //   19: astore_2
    //   20: new 230	java/util/ArrayList
    //   23: dup
    //   24: invokespecial 231	java/util/ArrayList:<init>	()V
    //   27: astore 4
    //   29: aload_2
    //   30: invokeinterface 236 1 0
    //   35: istore_3
    //   36: iload_3
    //   37: ifne +16 -> 53
    //   40: aload_2
    //   41: ifnull +9 -> 50
    //   44: aload_2
    //   45: invokeinterface 239 1 0
    //   50: aload 4
    //   52: areturn
    //   53: aload 4
    //   55: aload_2
    //   56: aload_1
    //   57: aload_0
    //   58: invokestatic 245	net/tsz/afinal/db/sqlite/CursorUtils:getEntity	(Landroid/database/Cursor;Ljava/lang/Class;Lnet/tsz/afinal/FinalDb;)Ljava/lang/Object;
    //   61: invokeinterface 251 2 0
    //   66: pop
    //   67: goto -38 -> 29
    //   70: astore_1
    //   71: aload_1
    //   72: invokevirtual 254	java/lang/Exception:printStackTrace	()V
    //   75: aload_2
    //   76: ifnull +9 -> 85
    //   79: aload_2
    //   80: invokeinterface 239 1 0
    //   85: aconst_null
    //   86: areturn
    //   87: astore_1
    //   88: aload_2
    //   89: ifnull +9 -> 98
    //   92: aload_2
    //   93: invokeinterface 239 1 0
    //   98: aload_1
    //   99: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	100	0	this	FinalDb
    //   0	100	1	paramClass	Class<T>
    //   0	100	2	paramString	String
    //   35	2	3	bool	boolean
    //   27	27	4	localArrayList	java.util.ArrayList
    // Exception table:
    //   from	to	target	type
    //   20	29	70	java/lang/Exception
    //   29	36	70	java/lang/Exception
    //   53	67	70	java/lang/Exception
    //   20	29	87	finally
    //   29	36	87	finally
    //   53	67	87	finally
    //   71	75	87	finally
  }
  
  private static FinalDb getInstance(FinalDb.DaoConfig paramDaoConfig)
  {
    try
    {
      FinalDb localFinalDb2 = (FinalDb)daoMap.get(paramDaoConfig.getDbName());
      FinalDb localFinalDb1 = localFinalDb2;
      if (localFinalDb2 == null)
      {
        localFinalDb1 = new FinalDb(paramDaoConfig);
        daoMap.put(paramDaoConfig.getDbName(), localFinalDb1);
      }
      return localFinalDb1;
    }
    finally {}
  }
  
  private void insertContentValues(List<KeyValue> paramList, ContentValues paramContentValues)
  {
    if ((paramList != null) && (paramContentValues != null))
    {
      paramList = paramList.iterator();
      for (;;)
      {
        if (!paramList.hasNext()) {
          return;
        }
        KeyValue localKeyValue = (KeyValue)paramList.next();
        paramContentValues.put(localKeyValue.getKey(), localKeyValue.getValue().toString());
      }
    }
    Log.w("FinalDb", "insertContentValues: List<KeyValue> is empty or ContentValues is empty!");
  }
  
  private boolean tableIsExist(TableInfo paramTableInfo)
  {
    Object localObject2 = null;
    Cursor localCursor2 = null;
    if (paramTableInfo.isCheckDatabese()) {
      return true;
    }
    Cursor localCursor1 = localCursor2;
    Object localObject1 = localObject2;
    for (;;)
    {
      try
      {
        String str = "SELECT COUNT(*) AS c FROM sqlite_master WHERE type ='table' AND name ='" + paramTableInfo.getTableName() + "' ";
        localCursor1 = localCursor2;
        localObject1 = localObject2;
        debugSql(str);
        localCursor1 = localCursor2;
        localObject1 = localObject2;
        localCursor2 = this.db.rawQuery(str, null);
        if (localCursor2 != null)
        {
          localCursor1 = localCursor2;
          localObject1 = localCursor2;
          if (localCursor2.moveToNext())
          {
            localCursor1 = localCursor2;
            localObject1 = localCursor2;
            if (localCursor2.getInt(0) > 0)
            {
              localCursor1 = localCursor2;
              localObject1 = localCursor2;
              paramTableInfo.setCheckDatabese(true);
              if (localCursor2 == null) {
                break;
              }
              localCursor2.close();
              return true;
            }
          }
        }
      }
      catch (Exception paramTableInfo)
      {
        localObject1 = localCursor1;
        paramTableInfo.printStackTrace();
        if (localCursor1 != null) {
          localCursor1.close();
        }
        return false;
      }
      finally
      {
        if (localObject1 != null) {
          ((Cursor)localObject1).close();
        }
      }
      if (localCursor2 != null) {
        localCursor2.close();
      }
    }
  }
  
  public void delete(Object paramObject)
  {
    checkTableExist(paramObject.getClass());
    exeSqlInfo(SqlBuilder.buildDeleteSql(paramObject));
  }
  
  public void deleteById(Class<?> paramClass, Object paramObject)
  {
    checkTableExist(paramClass);
    exeSqlInfo(SqlBuilder.buildDeleteSql(paramClass, paramObject));
  }
  
  public void deleteByWhere(Class<?> paramClass, String paramString)
  {
    checkTableExist(paramClass);
    paramClass = SqlBuilder.buildDeleteSql(paramClass, paramString);
    debugSql(paramClass);
    this.db.execSQL(paramClass);
  }
  
  public void dropDb()
  {
    Cursor localCursor = this.db.rawQuery("SELECT name FROM sqlite_master WHERE type ='table'", null);
    if (localCursor != null) {}
    for (;;)
    {
      if (!localCursor.moveToNext())
      {
        if (localCursor != null) {
          localCursor.close();
        }
        return;
      }
      try
      {
        this.db.execSQL("DROP TABLE " + localCursor.getString(0));
      }
      catch (SQLException localSQLException)
      {
        Log.e("FinalDb", localSQLException.getMessage());
      }
    }
  }
  
  public <T> List<T> findAll(Class<T> paramClass)
  {
    checkTableExist(paramClass);
    return findAllBySql(paramClass, SqlBuilder.getSelectSQL(paramClass));
  }
  
  public <T> List<T> findAll(Class<T> paramClass, String paramString)
  {
    checkTableExist(paramClass);
    return findAllBySql(paramClass, SqlBuilder.getSelectSQL(paramClass) + " ORDER BY " + paramString);
  }
  
  public <T> List<T> findAllByWhere(Class<T> paramClass, String paramString)
  {
    checkTableExist(paramClass);
    return findAllBySql(paramClass, SqlBuilder.getSelectSQLByWhere(paramClass, paramString));
  }
  
  public <T> List<T> findAllByWhere(Class<T> paramClass, String paramString1, String paramString2)
  {
    checkTableExist(paramClass);
    return findAllBySql(paramClass, SqlBuilder.getSelectSQLByWhere(paramClass, paramString1) + " ORDER BY " + paramString2);
  }
  
  public <T> T findById(Object paramObject, Class<T> paramClass)
  {
    checkTableExist(paramClass);
    paramObject = SqlBuilder.getSelectSqlAsSqlInfo(paramClass, paramObject);
    if (paramObject != null)
    {
      debugSql(paramObject.getSql());
      paramObject = this.db.rawQuery(paramObject.getSql(), paramObject.getBindArgsAsStringArray());
    }
    for (;;)
    {
      try
      {
        if (paramObject.moveToNext())
        {
          paramClass = CursorUtils.getEntity(paramObject, paramClass, this);
          return paramClass;
        }
      }
      catch (Exception paramClass)
      {
        paramClass.printStackTrace();
        return null;
      }
      finally
      {
        paramObject.close();
      }
      paramObject.close();
    }
  }
  
  public DbModel findDbModelBySQL(String paramString)
  {
    debugSql(paramString);
    paramString = this.db.rawQuery(paramString, null);
    try
    {
      if (paramString.moveToNext())
      {
        DbModel localDbModel = CursorUtils.getDbModel(paramString);
        return localDbModel;
      }
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
      return null;
    }
    finally
    {
      paramString.close();
    }
    paramString.close();
    return null;
  }
  
  /* Error */
  public List<DbModel> findDbModelListBySQL(String paramString)
  {
    // Byte code:
    //   0: aload_0
    //   1: aload_1
    //   2: invokespecial 108	net/tsz/afinal/FinalDb:debugSql	(Ljava/lang/String;)V
    //   5: aload_0
    //   6: getfield 64	net/tsz/afinal/FinalDb:db	Landroid/database/sqlite/SQLiteDatabase;
    //   9: aload_1
    //   10: aconst_null
    //   11: invokevirtual 228	android/database/sqlite/SQLiteDatabase:rawQuery	(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor;
    //   14: astore_1
    //   15: new 230	java/util/ArrayList
    //   18: dup
    //   19: invokespecial 231	java/util/ArrayList:<init>	()V
    //   22: astore_3
    //   23: aload_1
    //   24: invokeinterface 236 1 0
    //   29: istore_2
    //   30: iload_2
    //   31: ifne +11 -> 42
    //   34: aload_1
    //   35: invokeinterface 239 1 0
    //   40: aload_3
    //   41: areturn
    //   42: aload_3
    //   43: aload_1
    //   44: invokestatic 389	net/tsz/afinal/db/sqlite/CursorUtils:getDbModel	(Landroid/database/Cursor;)Lnet/tsz/afinal/db/sqlite/DbModel;
    //   47: invokeinterface 251 2 0
    //   52: pop
    //   53: goto -30 -> 23
    //   56: astore 4
    //   58: aload 4
    //   60: invokevirtual 254	java/lang/Exception:printStackTrace	()V
    //   63: aload_1
    //   64: invokeinterface 239 1 0
    //   69: aload_3
    //   70: areturn
    //   71: astore_3
    //   72: aload_1
    //   73: invokeinterface 239 1 0
    //   78: aload_3
    //   79: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	80	0	this	FinalDb
    //   0	80	1	paramString	String
    //   29	2	2	bool	boolean
    //   22	48	3	localArrayList	java.util.ArrayList
    //   71	8	3	localObject	Object
    //   56	3	4	localException	Exception
    // Exception table:
    //   from	to	target	type
    //   23	30	56	java/lang/Exception
    //   42	53	56	java/lang/Exception
    //   23	30	71	finally
    //   42	53	71	finally
    //   58	63	71	finally
  }
  
  public <T> T findWithManyToOneById(Object paramObject, Class<T> paramClass)
  {
    checkTableExist(paramClass);
    paramObject = SqlBuilder.getSelectSQL(paramClass, paramObject);
    debugSql(paramObject);
    paramObject = findDbModelBySQL(paramObject);
    if (paramObject != null) {
      return loadManyToOne(CursorUtils.dbModel2Entity(paramObject, paramClass), paramClass, new Class[0]);
    }
    return null;
  }
  
  public <T> T findWithManyToOneById(Object paramObject, Class<T> paramClass, Class<?>... paramVarArgs)
  {
    checkTableExist(paramClass);
    paramObject = SqlBuilder.getSelectSQL(paramClass, paramObject);
    debugSql(paramObject);
    paramObject = findDbModelBySQL(paramObject);
    if (paramObject != null) {
      return loadManyToOne(CursorUtils.dbModel2Entity(paramObject, paramClass), paramClass, paramVarArgs);
    }
    return null;
  }
  
  public <T> T findWithOneToManyById(Object paramObject, Class<T> paramClass)
  {
    checkTableExist(paramClass);
    paramObject = SqlBuilder.getSelectSQL(paramClass, paramObject);
    debugSql(paramObject);
    paramObject = findDbModelBySQL(paramObject);
    if (paramObject != null) {
      return loadOneToMany(CursorUtils.dbModel2Entity(paramObject, paramClass), paramClass, new Class[0]);
    }
    return null;
  }
  
  public <T> T findWithOneToManyById(Object paramObject, Class<T> paramClass, Class<?>... paramVarArgs)
  {
    checkTableExist(paramClass);
    paramObject = SqlBuilder.getSelectSQL(paramClass, paramObject);
    debugSql(paramObject);
    paramObject = findDbModelBySQL(paramObject);
    if (paramObject != null) {
      return loadOneToMany(CursorUtils.dbModel2Entity(paramObject, paramClass), paramClass, paramVarArgs);
    }
    return null;
  }
  
  public <T> T loadManyToOne(T paramT, Class<T> paramClass, Class<?>... paramVarArgs)
  {
    if (paramT != null) {}
    for (;;)
    {
      ManyToOne localManyToOne;
      try
      {
        paramClass = TableInfo.get(paramClass).manyToOneMap.values().iterator();
        if (!paramClass.hasNext()) {
          return paramT;
        }
        localManyToOne = (ManyToOne)paramClass.next();
        localObject = localManyToOne.getValue(paramT);
        if (localObject == null) {
          continue;
        }
        if (paramVarArgs == null) {
          break label167;
        }
        if (paramVarArgs.length != 0) {
          break label159;
        }
      }
      catch (Exception paramClass)
      {
        Object localObject;
        paramClass.printStackTrace();
        return paramT;
      }
      int k = paramVarArgs.length;
      int j = 0;
      if (i != 0)
      {
        localObject = findById(Integer.valueOf(localObject.toString()), localManyToOne.getDataType());
        if (localObject != null)
        {
          localManyToOne.setValue(paramT, localObject);
          label159:
          label167:
          while (j < k)
          {
            for (;;)
            {
              Class<?> localClass = paramVarArgs[j];
              Class localClass1 = localManyToOne.getManyClass();
              if (localClass1 != localClass) {
                break;
              }
              i = 1;
            }
            j += 1;
            continue;
            int i = 0;
            break;
            return paramT;
            i = 1;
            break;
          }
        }
      }
    }
  }
  
  public <T> T loadOneToMany(T paramT, Class<T> paramClass, Class<?>... paramVarArgs)
  {
    if (paramT != null) {}
    for (;;)
    {
      OneToMany localOneToMany;
      try
      {
        Object localObject1 = TableInfo.get(paramClass).oneToManyMap.values();
        paramClass = TableInfo.get(paramClass).getId().getValue(paramT);
        localObject1 = ((Collection)localObject1).iterator();
        if (!((Iterator)localObject1).hasNext()) {
          return paramT;
        }
        localOneToMany = (OneToMany)((Iterator)localObject1).next();
        if (paramVarArgs == null) {
          break label217;
        }
        if (paramVarArgs.length != 0) {
          break label209;
        }
      }
      catch (Exception paramClass)
      {
        label73:
        paramClass.printStackTrace();
        return paramT;
      }
      int k = paramVarArgs.length;
      int j = 0;
      if (i != 0)
      {
        localObject2 = findAllByWhere(localOneToMany.getOneClass(), localOneToMany.getColumn() + "=" + paramClass);
        if (localObject2 != null)
        {
          if (localOneToMany.getDataType() == OneToManyLazyLoader.class) {
            ((OneToManyLazyLoader)localOneToMany.getValue(paramT)).setList((List)localObject2);
          }
          label209:
          label217:
          while (j < k)
          {
            Object localObject2;
            for (;;)
            {
              localObject2 = paramVarArgs[j];
              if (localOneToMany.getOneClass() != localObject2) {
                break;
              }
              i = 1;
            }
            localOneToMany.setValue(paramT, localObject2);
            break;
            j += 1;
            continue;
            int i = 0;
            break label73;
            return paramT;
            i = 1;
            break label73;
          }
        }
      }
    }
  }
  
  public void save(Object paramObject)
  {
    checkTableExist(paramObject.getClass());
    exeSqlInfo(SqlBuilder.buildInsertSql(paramObject));
  }
  
  public boolean saveBindId(Object paramObject)
  {
    checkTableExist(paramObject.getClass());
    Object localObject = SqlBuilder.getSaveKeyValueListByEntity(paramObject);
    TableInfo localTableInfo;
    if ((localObject != null) && (((List)localObject).size() > 0))
    {
      localTableInfo = TableInfo.get(paramObject.getClass());
      ContentValues localContentValues = new ContentValues();
      insertContentValues((List)localObject, localContentValues);
      localObject = Long.valueOf(this.db.insert(localTableInfo.getTableName(), null, localContentValues));
      if (((Long)localObject).longValue() != -1L) {}
    }
    else
    {
      return false;
    }
    localTableInfo.getId().setValue(paramObject, localObject);
    return true;
  }
  
  public void update(Object paramObject)
  {
    checkTableExist(paramObject.getClass());
    exeSqlInfo(SqlBuilder.getUpdateSqlAsSqlInfo(paramObject));
  }
  
  public void update(Object paramObject, String paramString)
  {
    checkTableExist(paramObject.getClass());
    exeSqlInfo(SqlBuilder.getUpdateSqlAsSqlInfo(paramObject, paramString));
  }
}
