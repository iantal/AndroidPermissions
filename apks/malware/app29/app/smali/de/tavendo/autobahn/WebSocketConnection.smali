.class public Lde/tavendo/autobahn/WebSocketConnection;
.super Ljava/lang/Object;

# interfaces
.implements Lde/tavendo/autobahn/WebSocket;


# static fields
.field private static final DEBUG:Z = true

.field private static final TAG:Ljava/lang/String;


# instance fields
.field private mActive:Z

.field protected mMasterHandler:Landroid/os/Handler;

.field protected mOptions:Lde/tavendo/autobahn/WebSocketOptions;

.field private mPrevConnected:Z

.field protected mReader:Lde/tavendo/autobahn/WebSocketReader;

.field protected mTransportChannel:Ljava/nio/channels/SocketChannel;

.field protected mWriter:Lde/tavendo/autobahn/WebSocketWriter;

.field protected mWriterThread:Landroid/os/HandlerThread;

.field private mWsHandler:Lde/tavendo/autobahn/WebSocket$ConnectionHandler;

.field private mWsHeaders:Ljava/util/List;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/List",
            "<",
            "Lorg/apache/http/message/BasicNameValuePair;",
            ">;"
        }
    .end annotation
.end field

.field private mWsHost:Ljava/lang/String;

.field private mWsPath:Ljava/lang/String;

.field private mWsPort:I

.field private mWsQuery:Ljava/lang/String;

.field private mWsScheme:Ljava/lang/String;

.field private mWsSubprotocols:[Ljava/lang/String;

.field private mWsUri:Ljava/net/URI;


# direct methods
.method static constructor <clinit>()V
    .locals 1

    const-class v0, Lde/tavendo/autobahn/WebSocketConnection;

    invoke-virtual {v0}, Ljava/lang/Class;->getName()Ljava/lang/String;

    move-result-object v0

    sput-object v0, Lde/tavendo/autobahn/WebSocketConnection;->TAG:Ljava/lang/String;

    return-void
.end method

.method public constructor <init>()V
    .locals 3

    const/4 v2, 0x0

    invoke-direct {p0}, Ljava/lang/Object;-><init>()V

    sget-object v0, Lde/tavendo/autobahn/WebSocketConnection;->TAG:Ljava/lang/String;

    const-string v1, "created"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    invoke-virtual {p0}, Lde/tavendo/autobahn/WebSocketConnection;->createHandler()V

    iput-boolean v2, p0, Lde/tavendo/autobahn/WebSocketConnection;->mActive:Z

    iput-boolean v2, p0, Lde/tavendo/autobahn/WebSocketConnection;->mPrevConnected:Z

    return-void
.end method

.method static synthetic access$0(Lde/tavendo/autobahn/WebSocketConnection;)Ljava/lang/String;
    .locals 1

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsHost:Ljava/lang/String;

    return-object v0
.end method

.method static synthetic access$1(Lde/tavendo/autobahn/WebSocketConnection;)I
    .locals 1

    iget v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsPort:I

    return v0
.end method

.method static synthetic access$10(Lde/tavendo/autobahn/WebSocketConnection;)Z
    .locals 1

    iget-boolean v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mActive:Z

    return v0
.end method

.method static synthetic access$11(Lde/tavendo/autobahn/WebSocketConnection;ILjava/lang/String;)V
    .locals 0

    invoke-direct {p0, p1, p2}, Lde/tavendo/autobahn/WebSocketConnection;->failConnection(ILjava/lang/String;)V

    return-void
.end method

.method static synthetic access$2(Lde/tavendo/autobahn/WebSocketConnection;ILjava/lang/String;)V
    .locals 0

    invoke-direct {p0, p1, p2}, Lde/tavendo/autobahn/WebSocketConnection;->onClose(ILjava/lang/String;)V

    return-void
.end method

.method static synthetic access$3(Lde/tavendo/autobahn/WebSocketConnection;)Ljava/lang/String;
    .locals 1

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsPath:Ljava/lang/String;

    return-object v0
.end method

.method static synthetic access$4(Lde/tavendo/autobahn/WebSocketConnection;)Ljava/lang/String;
    .locals 1

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsQuery:Ljava/lang/String;

    return-object v0
.end method

.method static synthetic access$5(Lde/tavendo/autobahn/WebSocketConnection;)[Ljava/lang/String;
    .locals 1

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsSubprotocols:[Ljava/lang/String;

    return-object v0
.end method

.method static synthetic access$6(Lde/tavendo/autobahn/WebSocketConnection;)Ljava/util/List;
    .locals 1

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsHeaders:Ljava/util/List;

    return-object v0
.end method

.method static synthetic access$7(Lde/tavendo/autobahn/WebSocketConnection;Z)V
    .locals 0

    iput-boolean p1, p0, Lde/tavendo/autobahn/WebSocketConnection;->mPrevConnected:Z

    return-void
.end method

.method static synthetic access$8()Ljava/lang/String;
    .locals 1

    sget-object v0, Lde/tavendo/autobahn/WebSocketConnection;->TAG:Ljava/lang/String;

    return-object v0
.end method

.method static synthetic access$9(Lde/tavendo/autobahn/WebSocketConnection;)Lde/tavendo/autobahn/WebSocket$ConnectionHandler;
    .locals 1

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsHandler:Lde/tavendo/autobahn/WebSocket$ConnectionHandler;

    return-object v0
.end method

.method private failConnection(ILjava/lang/String;)V
    .locals 3

    sget-object v0, Lde/tavendo/autobahn/WebSocketConnection;->TAG:Ljava/lang/String;

    new-instance v1, Ljava/lang/StringBuilder;

    const-string v2, "fail connection [code = "

    invoke-direct {v1, v2}, Ljava/lang/StringBuilder;-><init>(Ljava/lang/String;)V

    invoke-virtual {v1, p1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v1

    const-string v2, ", reason = "

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1, p2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mReader:Lde/tavendo/autobahn/WebSocketReader;

    if-eqz v0, :cond_0

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mReader:Lde/tavendo/autobahn/WebSocketReader;

    invoke-virtual {v0}, Lde/tavendo/autobahn/WebSocketReader;->quit()V

    :try_start_0
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mReader:Lde/tavendo/autobahn/WebSocketReader;

    invoke-virtual {v0}, Lde/tavendo/autobahn/WebSocketReader;->join()V
    :try_end_0
    .catch Ljava/lang/InterruptedException; {:try_start_0 .. :try_end_0} :catch_0

    :goto_0
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWriter:Lde/tavendo/autobahn/WebSocketWriter;

    if-eqz v0, :cond_1

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWriter:Lde/tavendo/autobahn/WebSocketWriter;

    new-instance v1, Lde/tavendo/autobahn/WebSocketMessage$Quit;

    invoke-direct {v1}, Lde/tavendo/autobahn/WebSocketMessage$Quit;-><init>()V

    invoke-virtual {v0, v1}, Lde/tavendo/autobahn/WebSocketWriter;->forward(Ljava/lang/Object;)V

    :try_start_1
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWriterThread:Landroid/os/HandlerThread;

    invoke-virtual {v0}, Landroid/os/HandlerThread;->join()V
    :try_end_1
    .catch Ljava/lang/InterruptedException; {:try_start_1 .. :try_end_1} :catch_1

    :goto_1
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mTransportChannel:Ljava/nio/channels/SocketChannel;

    if-eqz v0, :cond_2

    :try_start_2
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mTransportChannel:Ljava/nio/channels/SocketChannel;

    invoke-virtual {v0}, Ljava/nio/channels/SocketChannel;->close()V
    :try_end_2
    .catch Ljava/io/IOException; {:try_start_2 .. :try_end_2} :catch_2

    :goto_2
    invoke-direct {p0, p1, p2}, Lde/tavendo/autobahn/WebSocketConnection;->onClose(ILjava/lang/String;)V

    sget-object v0, Lde/tavendo/autobahn/WebSocketConnection;->TAG:Ljava/lang/String;

    const-string v1, "worker threads stopped"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    return-void

    :catch_0
    move-exception v0

    invoke-virtual {v0}, Ljava/lang/InterruptedException;->printStackTrace()V

    goto :goto_0

    :cond_0
    sget-object v0, Lde/tavendo/autobahn/WebSocketConnection;->TAG:Ljava/lang/String;

    const-string v1, "mReader already NULL"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0

    :catch_1
    move-exception v0

    invoke-virtual {v0}, Ljava/lang/InterruptedException;->printStackTrace()V

    goto :goto_1

    :cond_1
    sget-object v0, Lde/tavendo/autobahn/WebSocketConnection;->TAG:Ljava/lang/String;

    const-string v1, "mWriter already NULL"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_1

    :catch_2
    move-exception v0

    invoke-virtual {v0}, Ljava/io/IOException;->printStackTrace()V

    goto :goto_2

    :cond_2
    sget-object v0, Lde/tavendo/autobahn/WebSocketConnection;->TAG:Ljava/lang/String;

    const-string v1, "mTransportChannel already NULL"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_2
.end method

.method private onClose(ILjava/lang/String;)V
    .locals 2

    const/4 v0, 0x2

    if-eq p1, v0, :cond_0

    const/4 v0, 0x0

    const/4 v1, 0x3

    if-ne p1, v1, :cond_1

    :cond_0
    invoke-virtual {p0}, Lde/tavendo/autobahn/WebSocketConnection;->scheduleReconnect()Z

    move-result v0

    :cond_1
    iget-object v1, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsHandler:Lde/tavendo/autobahn/WebSocket$ConnectionHandler;

    if-eqz v1, :cond_3

    if-eqz v0, :cond_2

    :try_start_0
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsHandler:Lde/tavendo/autobahn/WebSocket$ConnectionHandler;

    const/4 v1, 0x7

    invoke-interface {v0, v1, p2}, Lde/tavendo/autobahn/WebSocket$ConnectionHandler;->onClose(ILjava/lang/String;)V

    :goto_0
    return-void

    :cond_2
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsHandler:Lde/tavendo/autobahn/WebSocket$ConnectionHandler;

    invoke-interface {v0, p1, p2}, Lde/tavendo/autobahn/WebSocket$ConnectionHandler;->onClose(ILjava/lang/String;)V
    :try_end_0
    .catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_0

    goto :goto_0

    :catch_0
    move-exception v0

    invoke-virtual {v0}, Ljava/lang/Exception;->printStackTrace()V

    goto :goto_0

    :cond_3
    sget-object v0, Lde/tavendo/autobahn/WebSocketConnection;->TAG:Ljava/lang/String;

    const-string v1, "mWsHandler already NULL"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0
.end method


# virtual methods
.method public connect(Ljava/lang/String;Lde/tavendo/autobahn/WebSocket$ConnectionHandler;)V
    .locals 6

    const/4 v2, 0x0

    new-instance v4, Lde/tavendo/autobahn/WebSocketOptions;

    invoke-direct {v4}, Lde/tavendo/autobahn/WebSocketOptions;-><init>()V

    move-object v0, p0

    move-object v1, p1

    move-object v3, p2

    move-object v5, v2

    invoke-virtual/range {v0 .. v5}, Lde/tavendo/autobahn/WebSocketConnection;->connect(Ljava/lang/String;[Ljava/lang/String;Lde/tavendo/autobahn/WebSocket$ConnectionHandler;Lde/tavendo/autobahn/WebSocketOptions;Ljava/util/List;)V

    return-void
.end method

.method public connect(Ljava/lang/String;Lde/tavendo/autobahn/WebSocket$ConnectionHandler;Lde/tavendo/autobahn/WebSocketOptions;)V
    .locals 6

    const/4 v2, 0x0

    move-object v0, p0

    move-object v1, p1

    move-object v3, p2

    move-object v4, p3

    move-object v5, v2

    invoke-virtual/range {v0 .. v5}, Lde/tavendo/autobahn/WebSocketConnection;->connect(Ljava/lang/String;[Ljava/lang/String;Lde/tavendo/autobahn/WebSocket$ConnectionHandler;Lde/tavendo/autobahn/WebSocketOptions;Ljava/util/List;)V

    return-void
.end method

.method public connect(Ljava/lang/String;[Ljava/lang/String;Lde/tavendo/autobahn/WebSocket$ConnectionHandler;Lde/tavendo/autobahn/WebSocketOptions;Ljava/util/List;)V
    .locals 3
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(",
            "Ljava/lang/String;",
            "[",
            "Ljava/lang/String;",
            "Lde/tavendo/autobahn/WebSocket$ConnectionHandler;",
            "Lde/tavendo/autobahn/WebSocketOptions;",
            "Ljava/util/List",
            "<",
            "Lorg/apache/http/message/BasicNameValuePair;",
            ">;)V"
        }
    .end annotation

    const/4 v2, 0x0

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mTransportChannel:Ljava/nio/channels/SocketChannel;

    if-eqz v0, :cond_0

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mTransportChannel:Ljava/nio/channels/SocketChannel;

    invoke-virtual {v0}, Ljava/nio/channels/SocketChannel;->isConnected()Z

    move-result v0

    if-eqz v0, :cond_0

    new-instance v0, Lde/tavendo/autobahn/WebSocketException;

    const-string v1, "already connected"

    invoke-direct {v0, v1}, Lde/tavendo/autobahn/WebSocketException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_0
    :try_start_0
    new-instance v0, Ljava/net/URI;

    invoke-direct {v0, p1}, Ljava/net/URI;-><init>(Ljava/lang/String;)V

    iput-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsUri:Ljava/net/URI;

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsUri:Ljava/net/URI;

    invoke-virtual {v0}, Ljava/net/URI;->getScheme()Ljava/lang/String;

    move-result-object v0

    const-string v1, "ws"

    invoke-virtual {v0, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_1

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsUri:Ljava/net/URI;

    invoke-virtual {v0}, Ljava/net/URI;->getScheme()Ljava/lang/String;

    move-result-object v0

    const-string v1, "wss"

    invoke-virtual {v0, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_1

    new-instance v0, Lde/tavendo/autobahn/WebSocketException;

    const-string v1, "unsupported scheme for WebSockets URI"

    invoke-direct {v0, v1}, Lde/tavendo/autobahn/WebSocketException;-><init>(Ljava/lang/String;)V

    throw v0
    :try_end_0
    .catch Ljava/net/URISyntaxException; {:try_start_0 .. :try_end_0} :catch_0

    :catch_0
    move-exception v0

    new-instance v0, Lde/tavendo/autobahn/WebSocketException;

    const-string v1, "invalid WebSockets URI"

    invoke-direct {v0, v1}, Lde/tavendo/autobahn/WebSocketException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_1
    :try_start_1
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsUri:Ljava/net/URI;

    invoke-virtual {v0}, Ljava/net/URI;->getScheme()Ljava/lang/String;

    move-result-object v0

    const-string v1, "wss"

    invoke-virtual {v0, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_2

    new-instance v0, Lde/tavendo/autobahn/WebSocketException;

    const-string v1, "secure WebSockets not implemented"

    invoke-direct {v0, v1}, Lde/tavendo/autobahn/WebSocketException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_2
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsUri:Ljava/net/URI;

    invoke-virtual {v0}, Ljava/net/URI;->getScheme()Ljava/lang/String;

    move-result-object v0

    iput-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsScheme:Ljava/lang/String;

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsUri:Ljava/net/URI;

    invoke-virtual {v0}, Ljava/net/URI;->getPort()I

    move-result v0

    const/4 v1, -0x1

    if-ne v0, v1, :cond_4

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsScheme:Ljava/lang/String;

    const-string v1, "ws"

    invoke-virtual {v0, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_3

    const/16 v0, 0x50

    iput v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsPort:I

    :goto_0
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsUri:Ljava/net/URI;

    invoke-virtual {v0}, Ljava/net/URI;->getHost()Ljava/lang/String;

    move-result-object v0

    if-nez v0, :cond_5

    new-instance v0, Lde/tavendo/autobahn/WebSocketException;

    const-string v1, "no host specified in WebSockets URI"

    invoke-direct {v0, v1}, Lde/tavendo/autobahn/WebSocketException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_3
    const/16 v0, 0x1bb

    iput v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsPort:I

    goto :goto_0

    :cond_4
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsUri:Ljava/net/URI;

    invoke-virtual {v0}, Ljava/net/URI;->getPort()I

    move-result v0

    iput v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsPort:I

    goto :goto_0

    :cond_5
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsUri:Ljava/net/URI;

    invoke-virtual {v0}, Ljava/net/URI;->getHost()Ljava/lang/String;

    move-result-object v0

    iput-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsHost:Ljava/lang/String;

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsUri:Ljava/net/URI;

    invoke-virtual {v0}, Ljava/net/URI;->getRawPath()Ljava/lang/String;

    move-result-object v0

    if-eqz v0, :cond_6

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsUri:Ljava/net/URI;

    invoke-virtual {v0}, Ljava/net/URI;->getRawPath()Ljava/lang/String;

    move-result-object v0

    const-string v1, ""

    invoke-virtual {v0, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_8

    :cond_6
    const-string v0, "/"

    iput-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsPath:Ljava/lang/String;

    :goto_1
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsUri:Ljava/net/URI;

    invoke-virtual {v0}, Ljava/net/URI;->getRawQuery()Ljava/lang/String;

    move-result-object v0

    if-eqz v0, :cond_7

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsUri:Ljava/net/URI;

    invoke-virtual {v0}, Ljava/net/URI;->getRawQuery()Ljava/lang/String;

    move-result-object v0

    const-string v1, ""

    invoke-virtual {v0, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_9

    :cond_7
    const/4 v0, 0x0

    iput-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsQuery:Ljava/lang/String;
    :try_end_1
    .catch Ljava/net/URISyntaxException; {:try_start_1 .. :try_end_1} :catch_0

    :goto_2
    iput-object p2, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsSubprotocols:[Ljava/lang/String;

    iput-object p5, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsHeaders:Ljava/util/List;

    iput-object p3, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsHandler:Lde/tavendo/autobahn/WebSocket$ConnectionHandler;

    new-instance v0, Lde/tavendo/autobahn/WebSocketOptions;

    invoke-direct {v0, p4}, Lde/tavendo/autobahn/WebSocketOptions;-><init>(Lde/tavendo/autobahn/WebSocketOptions;)V

    iput-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mOptions:Lde/tavendo/autobahn/WebSocketOptions;

    const/4 v0, 0x1

    iput-boolean v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mActive:Z

    new-instance v0, Lde/tavendo/autobahn/WebSocketConnection$WebSocketConnector;

    invoke-direct {v0, p0, v2}, Lde/tavendo/autobahn/WebSocketConnection$WebSocketConnector;-><init>(Lde/tavendo/autobahn/WebSocketConnection;Lde/tavendo/autobahn/WebSocketConnection$WebSocketConnector;)V

    invoke-virtual {v0}, Lde/tavendo/autobahn/WebSocketConnection$WebSocketConnector;->start()V

    return-void

    :cond_8
    :try_start_2
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsUri:Ljava/net/URI;

    invoke-virtual {v0}, Ljava/net/URI;->getRawPath()Ljava/lang/String;

    move-result-object v0

    iput-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsPath:Ljava/lang/String;

    goto :goto_1

    :cond_9
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsUri:Ljava/net/URI;

    invoke-virtual {v0}, Ljava/net/URI;->getRawQuery()Ljava/lang/String;

    move-result-object v0

    iput-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsQuery:Ljava/lang/String;
    :try_end_2
    .catch Ljava/net/URISyntaxException; {:try_start_2 .. :try_end_2} :catch_0

    goto :goto_2
.end method

.method protected createHandler()V
    .locals 2

    new-instance v0, Lde/tavendo/autobahn/WebSocketConnection$2;

    invoke-static {}, Landroid/os/Looper;->getMainLooper()Landroid/os/Looper;

    move-result-object v1

    invoke-direct {v0, p0, v1}, Lde/tavendo/autobahn/WebSocketConnection$2;-><init>(Lde/tavendo/autobahn/WebSocketConnection;Landroid/os/Looper;)V

    iput-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mMasterHandler:Landroid/os/Handler;

    return-void
.end method

.method protected createReader()V
    .locals 5

    new-instance v0, Lde/tavendo/autobahn/WebSocketReader;

    iget-object v1, p0, Lde/tavendo/autobahn/WebSocketConnection;->mMasterHandler:Landroid/os/Handler;

    iget-object v2, p0, Lde/tavendo/autobahn/WebSocketConnection;->mTransportChannel:Ljava/nio/channels/SocketChannel;

    iget-object v3, p0, Lde/tavendo/autobahn/WebSocketConnection;->mOptions:Lde/tavendo/autobahn/WebSocketOptions;

    const-string v4, "WebSocketReader"

    invoke-direct {v0, v1, v2, v3, v4}, Lde/tavendo/autobahn/WebSocketReader;-><init>(Landroid/os/Handler;Ljava/nio/channels/SocketChannel;Lde/tavendo/autobahn/WebSocketOptions;Ljava/lang/String;)V

    iput-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mReader:Lde/tavendo/autobahn/WebSocketReader;

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mReader:Lde/tavendo/autobahn/WebSocketReader;

    invoke-virtual {v0}, Lde/tavendo/autobahn/WebSocketReader;->start()V

    sget-object v0, Lde/tavendo/autobahn/WebSocketConnection;->TAG:Ljava/lang/String;

    const-string v1, "WS reader created and started"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    return-void
.end method

.method protected createWriter()V
    .locals 5

    new-instance v0, Landroid/os/HandlerThread;

    const-string v1, "WebSocketWriter"

    invoke-direct {v0, v1}, Landroid/os/HandlerThread;-><init>(Ljava/lang/String;)V

    iput-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWriterThread:Landroid/os/HandlerThread;

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWriterThread:Landroid/os/HandlerThread;

    invoke-virtual {v0}, Landroid/os/HandlerThread;->start()V

    new-instance v0, Lde/tavendo/autobahn/WebSocketWriter;

    iget-object v1, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWriterThread:Landroid/os/HandlerThread;

    invoke-virtual {v1}, Landroid/os/HandlerThread;->getLooper()Landroid/os/Looper;

    move-result-object v1

    iget-object v2, p0, Lde/tavendo/autobahn/WebSocketConnection;->mMasterHandler:Landroid/os/Handler;

    iget-object v3, p0, Lde/tavendo/autobahn/WebSocketConnection;->mTransportChannel:Ljava/nio/channels/SocketChannel;

    iget-object v4, p0, Lde/tavendo/autobahn/WebSocketConnection;->mOptions:Lde/tavendo/autobahn/WebSocketOptions;

    invoke-direct {v0, v1, v2, v3, v4}, Lde/tavendo/autobahn/WebSocketWriter;-><init>(Landroid/os/Looper;Landroid/os/Handler;Ljava/nio/channels/SocketChannel;Lde/tavendo/autobahn/WebSocketOptions;)V

    iput-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWriter:Lde/tavendo/autobahn/WebSocketWriter;

    sget-object v0, Lde/tavendo/autobahn/WebSocketConnection;->TAG:Ljava/lang/String;

    const-string v1, "WS writer created and started"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    return-void
.end method

.method public disconnect()V
    .locals 4

    const/4 v3, 0x0

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWriter:Lde/tavendo/autobahn/WebSocketWriter;

    if-eqz v0, :cond_0

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWriter:Lde/tavendo/autobahn/WebSocketWriter;

    new-instance v1, Lde/tavendo/autobahn/WebSocketMessage$Close;

    const/16 v2, 0x3e8

    invoke-direct {v1, v2}, Lde/tavendo/autobahn/WebSocketMessage$Close;-><init>(I)V

    invoke-virtual {v0, v1}, Lde/tavendo/autobahn/WebSocketWriter;->forward(Ljava/lang/Object;)V

    :goto_0
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mReader:Lde/tavendo/autobahn/WebSocketReader;

    if-eqz v0, :cond_1

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mReader:Lde/tavendo/autobahn/WebSocketReader;

    invoke-virtual {v0}, Lde/tavendo/autobahn/WebSocketReader;->quit()V

    :goto_1
    iput-boolean v3, p0, Lde/tavendo/autobahn/WebSocketConnection;->mActive:Z

    iput-boolean v3, p0, Lde/tavendo/autobahn/WebSocketConnection;->mPrevConnected:Z

    return-void

    :cond_0
    sget-object v0, Lde/tavendo/autobahn/WebSocketConnection;->TAG:Ljava/lang/String;

    const-string v1, "could not send Close .. writer already NULL"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0

    :cond_1
    sget-object v0, Lde/tavendo/autobahn/WebSocketConnection;->TAG:Ljava/lang/String;

    const-string v1, "could not send Close .. reader already NULL"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_1
.end method

.method public isConnected()Z
    .locals 1

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mTransportChannel:Ljava/nio/channels/SocketChannel;

    if-eqz v0, :cond_0

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mTransportChannel:Ljava/nio/channels/SocketChannel;

    invoke-virtual {v0}, Ljava/nio/channels/SocketChannel;->isConnected()Z

    move-result v0

    if-eqz v0, :cond_0

    const/4 v0, 0x1

    :goto_0
    return v0

    :cond_0
    const/4 v0, 0x0

    goto :goto_0
.end method

.method protected processAppMessage(Ljava/lang/Object;)V
    .locals 0

    return-void
.end method

.method public reconnect()Z
    .locals 2

    invoke-virtual {p0}, Lde/tavendo/autobahn/WebSocketConnection;->isConnected()Z

    move-result v0

    if-nez v0, :cond_0

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWsUri:Ljava/net/URI;

    if-eqz v0, :cond_0

    new-instance v0, Lde/tavendo/autobahn/WebSocketConnection$WebSocketConnector;

    const/4 v1, 0x0

    invoke-direct {v0, p0, v1}, Lde/tavendo/autobahn/WebSocketConnection$WebSocketConnector;-><init>(Lde/tavendo/autobahn/WebSocketConnection;Lde/tavendo/autobahn/WebSocketConnection$WebSocketConnector;)V

    invoke-virtual {v0}, Lde/tavendo/autobahn/WebSocketConnection$WebSocketConnector;->start()V

    const/4 v0, 0x1

    :goto_0
    return v0

    :cond_0
    const/4 v0, 0x0

    goto :goto_0
.end method

.method protected scheduleReconnect()Z
    .locals 6

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mOptions:Lde/tavendo/autobahn/WebSocketOptions;

    invoke-virtual {v0}, Lde/tavendo/autobahn/WebSocketOptions;->getReconnectInterval()I

    move-result v1

    iget-boolean v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mActive:Z

    if-eqz v0, :cond_1

    iget-boolean v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mPrevConnected:Z

    if-eqz v0, :cond_1

    if-lez v1, :cond_1

    const/4 v0, 0x1

    :goto_0
    if-eqz v0, :cond_0

    sget-object v2, Lde/tavendo/autobahn/WebSocketConnection;->TAG:Ljava/lang/String;

    const-string v3, "Reconnection scheduled"

    invoke-static {v2, v3}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    iget-object v2, p0, Lde/tavendo/autobahn/WebSocketConnection;->mMasterHandler:Landroid/os/Handler;

    new-instance v3, Lde/tavendo/autobahn/WebSocketConnection$1;

    invoke-direct {v3, p0}, Lde/tavendo/autobahn/WebSocketConnection$1;-><init>(Lde/tavendo/autobahn/WebSocketConnection;)V

    int-to-long v4, v1

    invoke-virtual {v2, v3, v4, v5}, Landroid/os/Handler;->postDelayed(Ljava/lang/Runnable;J)Z

    :cond_0
    return v0

    :cond_1
    const/4 v0, 0x0

    goto :goto_0
.end method

.method public sendBinaryMessage([B)V
    .locals 2

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWriter:Lde/tavendo/autobahn/WebSocketWriter;

    new-instance v1, Lde/tavendo/autobahn/WebSocketMessage$BinaryMessage;

    invoke-direct {v1, p1}, Lde/tavendo/autobahn/WebSocketMessage$BinaryMessage;-><init>([B)V

    invoke-virtual {v0, v1}, Lde/tavendo/autobahn/WebSocketWriter;->forward(Ljava/lang/Object;)V

    return-void
.end method

.method public sendRawTextMessage([B)V
    .locals 2

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWriter:Lde/tavendo/autobahn/WebSocketWriter;

    new-instance v1, Lde/tavendo/autobahn/WebSocketMessage$RawTextMessage;

    invoke-direct {v1, p1}, Lde/tavendo/autobahn/WebSocketMessage$RawTextMessage;-><init>([B)V

    invoke-virtual {v0, v1}, Lde/tavendo/autobahn/WebSocketWriter;->forward(Ljava/lang/Object;)V

    return-void
.end method

.method public sendTextMessage(Ljava/lang/String;)V
    .locals 2

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketConnection;->mWriter:Lde/tavendo/autobahn/WebSocketWriter;

    new-instance v1, Lde/tavendo/autobahn/WebSocketMessage$TextMessage;

    invoke-direct {v1, p1}, Lde/tavendo/autobahn/WebSocketMessage$TextMessage;-><init>(Ljava/lang/String;)V

    invoke-virtual {v0, v1}, Lde/tavendo/autobahn/WebSocketWriter;->forward(Ljava/lang/Object;)V

    return-void
.end method
