.class public Lde/tavendo/autobahn/WebSocketWriter;
.super Landroid/os/Handler;


# static fields
.field private static final DEBUG:Z = true

.field private static final TAG:Ljava/lang/String;


# instance fields
.field private final mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

.field private final mLooper:Landroid/os/Looper;

.field private final mMaster:Landroid/os/Handler;

.field private final mOptions:Lde/tavendo/autobahn/WebSocketOptions;

.field private final mRng:Ljava/util/Random;

.field private final mSocket:Ljava/nio/channels/SocketChannel;


# direct methods
.method static constructor <clinit>()V
    .locals 1

    const-class v0, Lde/tavendo/autobahn/WebSocketWriter;

    invoke-virtual {v0}, Ljava/lang/Class;->getName()Ljava/lang/String;

    move-result-object v0

    sput-object v0, Lde/tavendo/autobahn/WebSocketWriter;->TAG:Ljava/lang/String;

    return-void
.end method

.method public constructor <init>(Landroid/os/Looper;Landroid/os/Handler;Ljava/nio/channels/SocketChannel;Lde/tavendo/autobahn/WebSocketOptions;)V
    .locals 3

    invoke-direct {p0, p1}, Landroid/os/Handler;-><init>(Landroid/os/Looper;)V

    new-instance v0, Ljava/util/Random;

    invoke-direct {v0}, Ljava/util/Random;-><init>()V

    iput-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mRng:Ljava/util/Random;

    iput-object p1, p0, Lde/tavendo/autobahn/WebSocketWriter;->mLooper:Landroid/os/Looper;

    iput-object p2, p0, Lde/tavendo/autobahn/WebSocketWriter;->mMaster:Landroid/os/Handler;

    iput-object p3, p0, Lde/tavendo/autobahn/WebSocketWriter;->mSocket:Ljava/nio/channels/SocketChannel;

    iput-object p4, p0, Lde/tavendo/autobahn/WebSocketWriter;->mOptions:Lde/tavendo/autobahn/WebSocketOptions;

    new-instance v0, Lde/tavendo/autobahn/ByteBufferOutputStream;

    invoke-virtual {p4}, Lde/tavendo/autobahn/WebSocketOptions;->getMaxFramePayloadSize()I

    move-result v1

    add-int/lit8 v1, v1, 0xe

    const/high16 v2, 0x40000

    invoke-direct {v0, v1, v2}, Lde/tavendo/autobahn/ByteBufferOutputStream;-><init>(II)V

    iput-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    sget-object v0, Lde/tavendo/autobahn/WebSocketWriter;->TAG:Ljava/lang/String;

    const-string v1, "created"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    return-void
.end method

.method private newFrameMask()[B
    .locals 2

    const/4 v0, 0x4

    new-array v0, v0, [B

    iget-object v1, p0, Lde/tavendo/autobahn/WebSocketWriter;->mRng:Ljava/util/Random;

    invoke-virtual {v1, v0}, Ljava/util/Random;->nextBytes([B)V

    return-object v0
.end method

.method private newHandshakeKey()Ljava/lang/String;
    .locals 2

    const/16 v0, 0x10

    new-array v0, v0, [B

    iget-object v1, p0, Lde/tavendo/autobahn/WebSocketWriter;->mRng:Ljava/util/Random;

    invoke-virtual {v1, v0}, Ljava/util/Random;->nextBytes([B)V

    const/4 v1, 0x2

    invoke-static {v0, v1}, Landroid/util/Base64;->encodeToString([BI)Ljava/lang/String;

    move-result-object v0

    return-object v0
.end method

.method private notify(Ljava/lang/Object;)V
    .locals 2

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mMaster:Landroid/os/Handler;

    invoke-virtual {v0}, Landroid/os/Handler;->obtainMessage()Landroid/os/Message;

    move-result-object v0

    iput-object p1, v0, Landroid/os/Message;->obj:Ljava/lang/Object;

    iget-object v1, p0, Lde/tavendo/autobahn/WebSocketWriter;->mMaster:Landroid/os/Handler;

    invoke-virtual {v1, v0}, Landroid/os/Handler;->sendMessage(Landroid/os/Message;)Z

    return-void
.end method

.method private sendBinaryMessage(Lde/tavendo/autobahn/WebSocketMessage$BinaryMessage;)V
    .locals 3

    iget-object v0, p1, Lde/tavendo/autobahn/WebSocketMessage$BinaryMessage;->mPayload:[B

    array-length v0, v0

    iget-object v1, p0, Lde/tavendo/autobahn/WebSocketWriter;->mOptions:Lde/tavendo/autobahn/WebSocketOptions;

    invoke-virtual {v1}, Lde/tavendo/autobahn/WebSocketOptions;->getMaxMessagePayloadSize()I

    move-result v1

    if-le v0, v1, :cond_0

    new-instance v0, Lde/tavendo/autobahn/WebSocketException;

    const-string v1, "message payload exceeds payload limit"

    invoke-direct {v0, v1}, Lde/tavendo/autobahn/WebSocketException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_0
    const/4 v0, 0x2

    const/4 v1, 0x1

    iget-object v2, p1, Lde/tavendo/autobahn/WebSocketMessage$BinaryMessage;->mPayload:[B

    invoke-virtual {p0, v0, v1, v2}, Lde/tavendo/autobahn/WebSocketWriter;->sendFrame(IZ[B)V

    return-void
.end method

.method private sendClientHandshake(Lde/tavendo/autobahn/WebSocketMessage$ClientHandshake;)V
    .locals 5

    iget-object v0, p1, Lde/tavendo/autobahn/WebSocketMessage$ClientHandshake;->mQuery:Ljava/lang/String;

    if-eqz v0, :cond_3

    new-instance v0, Ljava/lang/StringBuilder;

    iget-object v1, p1, Lde/tavendo/autobahn/WebSocketMessage$ClientHandshake;->mPath:Ljava/lang/String;

    invoke-static {v1}, Ljava/lang/String;->valueOf(Ljava/lang/Object;)Ljava/lang/String;

    move-result-object v1

    invoke-direct {v0, v1}, Ljava/lang/StringBuilder;-><init>(Ljava/lang/String;)V

    const-string v1, "?"

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v0

    iget-object v1, p1, Lde/tavendo/autobahn/WebSocketMessage$ClientHandshake;->mQuery:Ljava/lang/String;

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v0

    invoke-virtual {v0}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v0

    :goto_0
    iget-object v1, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    new-instance v2, Ljava/lang/StringBuilder;

    const-string v3, "GET "

    invoke-direct {v2, v3}, Ljava/lang/StringBuilder;-><init>(Ljava/lang/String;)V

    invoke-virtual {v2, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v0

    const-string v2, " HTTP/1.1"

    invoke-virtual {v0, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v0

    invoke-virtual {v0}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v0

    invoke-virtual {v1, v0}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write(Ljava/lang/String;)V

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    invoke-virtual {v0}, Lde/tavendo/autobahn/ByteBufferOutputStream;->crlf()V

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    new-instance v1, Ljava/lang/StringBuilder;

    const-string v2, "Host: "

    invoke-direct {v1, v2}, Ljava/lang/StringBuilder;-><init>(Ljava/lang/String;)V

    iget-object v2, p1, Lde/tavendo/autobahn/WebSocketMessage$ClientHandshake;->mHost:Ljava/lang/String;

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-virtual {v0, v1}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write(Ljava/lang/String;)V

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    invoke-virtual {v0}, Lde/tavendo/autobahn/ByteBufferOutputStream;->crlf()V

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    const-string v1, "Upgrade: WebSocket"

    invoke-virtual {v0, v1}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write(Ljava/lang/String;)V

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    invoke-virtual {v0}, Lde/tavendo/autobahn/ByteBufferOutputStream;->crlf()V

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    const-string v1, "Connection: Upgrade"

    invoke-virtual {v0, v1}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write(Ljava/lang/String;)V

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    invoke-virtual {v0}, Lde/tavendo/autobahn/ByteBufferOutputStream;->crlf()V

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    new-instance v1, Ljava/lang/StringBuilder;

    const-string v2, "Sec-WebSocket-Key: "

    invoke-direct {v1, v2}, Ljava/lang/StringBuilder;-><init>(Ljava/lang/String;)V

    invoke-direct {p0}, Lde/tavendo/autobahn/WebSocketWriter;->newHandshakeKey()Ljava/lang/String;

    move-result-object v2

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-virtual {v0, v1}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write(Ljava/lang/String;)V

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    invoke-virtual {v0}, Lde/tavendo/autobahn/ByteBufferOutputStream;->crlf()V

    iget-object v0, p1, Lde/tavendo/autobahn/WebSocketMessage$ClientHandshake;->mOrigin:Ljava/lang/String;

    if-eqz v0, :cond_0

    iget-object v0, p1, Lde/tavendo/autobahn/WebSocketMessage$ClientHandshake;->mOrigin:Ljava/lang/String;

    const-string v1, ""

    invoke-virtual {v0, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_0

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    new-instance v1, Ljava/lang/StringBuilder;

    const-string v2, "Origin: "

    invoke-direct {v1, v2}, Ljava/lang/StringBuilder;-><init>(Ljava/lang/String;)V

    iget-object v2, p1, Lde/tavendo/autobahn/WebSocketMessage$ClientHandshake;->mOrigin:Ljava/lang/String;

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-virtual {v0, v1}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write(Ljava/lang/String;)V

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    invoke-virtual {v0}, Lde/tavendo/autobahn/ByteBufferOutputStream;->crlf()V

    :cond_0
    iget-object v0, p1, Lde/tavendo/autobahn/WebSocketMessage$ClientHandshake;->mSubprotocols:[Ljava/lang/String;

    if-eqz v0, :cond_1

    iget-object v0, p1, Lde/tavendo/autobahn/WebSocketMessage$ClientHandshake;->mSubprotocols:[Ljava/lang/String;

    array-length v0, v0

    if-lez v0, :cond_1

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    const-string v1, "Sec-WebSocket-Protocol: "

    invoke-virtual {v0, v1}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write(Ljava/lang/String;)V

    const/4 v0, 0x0

    :goto_1
    iget-object v1, p1, Lde/tavendo/autobahn/WebSocketMessage$ClientHandshake;->mSubprotocols:[Ljava/lang/String;

    array-length v1, v1

    if-lt v0, v1, :cond_4

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    invoke-virtual {v0}, Lde/tavendo/autobahn/ByteBufferOutputStream;->crlf()V

    :cond_1
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    const-string v1, "Sec-WebSocket-Version: 13"

    invoke-virtual {v0, v1}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write(Ljava/lang/String;)V

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    invoke-virtual {v0}, Lde/tavendo/autobahn/ByteBufferOutputStream;->crlf()V

    iget-object v0, p1, Lde/tavendo/autobahn/WebSocketMessage$ClientHandshake;->mHeaderList:Ljava/util/List;

    if-eqz v0, :cond_2

    iget-object v0, p1, Lde/tavendo/autobahn/WebSocketMessage$ClientHandshake;->mHeaderList:Ljava/util/List;

    invoke-interface {v0}, Ljava/util/List;->iterator()Ljava/util/Iterator;

    move-result-object v1

    :goto_2
    invoke-interface {v1}, Ljava/util/Iterator;->hasNext()Z

    move-result v0

    if-nez v0, :cond_6

    :cond_2
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    invoke-virtual {v0}, Lde/tavendo/autobahn/ByteBufferOutputStream;->crlf()V

    return-void

    :cond_3
    iget-object v0, p1, Lde/tavendo/autobahn/WebSocketMessage$ClientHandshake;->mPath:Ljava/lang/String;

    goto/16 :goto_0

    :cond_4
    iget-object v1, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    iget-object v2, p1, Lde/tavendo/autobahn/WebSocketMessage$ClientHandshake;->mSubprotocols:[Ljava/lang/String;

    aget-object v2, v2, v0

    invoke-virtual {v1, v2}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write(Ljava/lang/String;)V

    iget-object v1, p1, Lde/tavendo/autobahn/WebSocketMessage$ClientHandshake;->mSubprotocols:[Ljava/lang/String;

    array-length v1, v1

    add-int/lit8 v1, v1, -0x1

    if-eq v0, v1, :cond_5

    iget-object v1, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    const-string v2, ", "

    invoke-virtual {v1, v2}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write(Ljava/lang/String;)V

    :cond_5
    add-int/lit8 v0, v0, 0x1

    goto :goto_1

    :cond_6
    invoke-interface {v1}, Ljava/util/Iterator;->next()Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lorg/apache/http/NameValuePair;

    iget-object v2, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-interface {v0}, Lorg/apache/http/NameValuePair;->getName()Ljava/lang/String;

    move-result-object v4

    invoke-static {v4}, Ljava/lang/String;->valueOf(Ljava/lang/Object;)Ljava/lang/String;

    move-result-object v4

    invoke-direct {v3, v4}, Ljava/lang/StringBuilder;-><init>(Ljava/lang/String;)V

    const-string v4, ":"

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-interface {v0}, Lorg/apache/http/NameValuePair;->getValue()Ljava/lang/String;

    move-result-object v0

    invoke-virtual {v3, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v0

    invoke-virtual {v0}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v0

    invoke-virtual {v2, v0}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write(Ljava/lang/String;)V

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    invoke-virtual {v0}, Lde/tavendo/autobahn/ByteBufferOutputStream;->crlf()V

    goto :goto_2
.end method

.method private sendClose(Lde/tavendo/autobahn/WebSocketMessage$Close;)V
    .locals 8

    const/16 v7, 0x8

    const/4 v1, 0x0

    const/4 v6, 0x1

    iget v0, p1, Lde/tavendo/autobahn/WebSocketMessage$Close;->mCode:I

    if-lez v0, :cond_3

    iget-object v0, p1, Lde/tavendo/autobahn/WebSocketMessage$Close;->mReason:Ljava/lang/String;

    if-eqz v0, :cond_1

    iget-object v0, p1, Lde/tavendo/autobahn/WebSocketMessage$Close;->mReason:Ljava/lang/String;

    const-string v2, ""

    invoke-virtual {v0, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_1

    iget-object v0, p1, Lde/tavendo/autobahn/WebSocketMessage$Close;->mReason:Ljava/lang/String;

    const-string v2, "UTF-8"

    invoke-virtual {v0, v2}, Ljava/lang/String;->getBytes(Ljava/lang/String;)[B

    move-result-object v3

    array-length v0, v3

    add-int/lit8 v0, v0, 0x2

    new-array v2, v0, [B

    move v0, v1

    :goto_0
    array-length v4, v3

    if-lt v0, v4, :cond_0

    move-object v0, v2

    :goto_1
    if-eqz v0, :cond_2

    array-length v2, v0

    const/16 v3, 0x7d

    if-le v2, v3, :cond_2

    new-instance v0, Lde/tavendo/autobahn/WebSocketException;

    const-string v1, "close payload exceeds 125 octets"

    invoke-direct {v0, v1}, Lde/tavendo/autobahn/WebSocketException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_0
    add-int/lit8 v4, v0, 0x2

    aget-byte v5, v3, v0

    aput-byte v5, v2, v4

    add-int/lit8 v0, v0, 0x1

    goto :goto_0

    :cond_1
    const/4 v0, 0x2

    new-array v0, v0, [B

    goto :goto_1

    :cond_2
    iget v2, p1, Lde/tavendo/autobahn/WebSocketMessage$Close;->mCode:I

    shr-int/lit8 v2, v2, 0x8

    and-int/lit16 v2, v2, 0xff

    int-to-byte v2, v2

    aput-byte v2, v0, v1

    iget v1, p1, Lde/tavendo/autobahn/WebSocketMessage$Close;->mCode:I

    and-int/lit16 v1, v1, 0xff

    int-to-byte v1, v1

    aput-byte v1, v0, v6

    invoke-virtual {p0, v7, v6, v0}, Lde/tavendo/autobahn/WebSocketWriter;->sendFrame(IZ[B)V

    :goto_2
    return-void

    :cond_3
    const/4 v0, 0x0

    invoke-virtual {p0, v7, v6, v0}, Lde/tavendo/autobahn/WebSocketWriter;->sendFrame(IZ[B)V

    goto :goto_2
.end method

.method private sendPing(Lde/tavendo/autobahn/WebSocketMessage$Ping;)V
    .locals 3

    iget-object v0, p1, Lde/tavendo/autobahn/WebSocketMessage$Ping;->mPayload:[B

    if-eqz v0, :cond_0

    iget-object v0, p1, Lde/tavendo/autobahn/WebSocketMessage$Ping;->mPayload:[B

    array-length v0, v0

    const/16 v1, 0x7d

    if-le v0, v1, :cond_0

    new-instance v0, Lde/tavendo/autobahn/WebSocketException;

    const-string v1, "ping payload exceeds 125 octets"

    invoke-direct {v0, v1}, Lde/tavendo/autobahn/WebSocketException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_0
    const/16 v0, 0x9

    const/4 v1, 0x1

    iget-object v2, p1, Lde/tavendo/autobahn/WebSocketMessage$Ping;->mPayload:[B

    invoke-virtual {p0, v0, v1, v2}, Lde/tavendo/autobahn/WebSocketWriter;->sendFrame(IZ[B)V

    return-void
.end method

.method private sendPong(Lde/tavendo/autobahn/WebSocketMessage$Pong;)V
    .locals 3

    iget-object v0, p1, Lde/tavendo/autobahn/WebSocketMessage$Pong;->mPayload:[B

    if-eqz v0, :cond_0

    iget-object v0, p1, Lde/tavendo/autobahn/WebSocketMessage$Pong;->mPayload:[B

    array-length v0, v0

    const/16 v1, 0x7d

    if-le v0, v1, :cond_0

    new-instance v0, Lde/tavendo/autobahn/WebSocketException;

    const-string v1, "pong payload exceeds 125 octets"

    invoke-direct {v0, v1}, Lde/tavendo/autobahn/WebSocketException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_0
    const/16 v0, 0xa

    const/4 v1, 0x1

    iget-object v2, p1, Lde/tavendo/autobahn/WebSocketMessage$Pong;->mPayload:[B

    invoke-virtual {p0, v0, v1, v2}, Lde/tavendo/autobahn/WebSocketWriter;->sendFrame(IZ[B)V

    return-void
.end method

.method private sendRawTextMessage(Lde/tavendo/autobahn/WebSocketMessage$RawTextMessage;)V
    .locals 3

    const/4 v2, 0x1

    iget-object v0, p1, Lde/tavendo/autobahn/WebSocketMessage$RawTextMessage;->mPayload:[B

    array-length v0, v0

    iget-object v1, p0, Lde/tavendo/autobahn/WebSocketWriter;->mOptions:Lde/tavendo/autobahn/WebSocketOptions;

    invoke-virtual {v1}, Lde/tavendo/autobahn/WebSocketOptions;->getMaxMessagePayloadSize()I

    move-result v1

    if-le v0, v1, :cond_0

    new-instance v0, Lde/tavendo/autobahn/WebSocketException;

    const-string v1, "message payload exceeds payload limit"

    invoke-direct {v0, v1}, Lde/tavendo/autobahn/WebSocketException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_0
    iget-object v0, p1, Lde/tavendo/autobahn/WebSocketMessage$RawTextMessage;->mPayload:[B

    invoke-virtual {p0, v2, v2, v0}, Lde/tavendo/autobahn/WebSocketWriter;->sendFrame(IZ[B)V

    return-void
.end method

.method private sendTextMessage(Lde/tavendo/autobahn/WebSocketMessage$TextMessage;)V
    .locals 4

    const/4 v3, 0x1

    iget-object v0, p1, Lde/tavendo/autobahn/WebSocketMessage$TextMessage;->mPayload:Ljava/lang/String;

    const-string v1, "UTF-8"

    invoke-virtual {v0, v1}, Ljava/lang/String;->getBytes(Ljava/lang/String;)[B

    move-result-object v0

    array-length v1, v0

    iget-object v2, p0, Lde/tavendo/autobahn/WebSocketWriter;->mOptions:Lde/tavendo/autobahn/WebSocketOptions;

    invoke-virtual {v2}, Lde/tavendo/autobahn/WebSocketOptions;->getMaxMessagePayloadSize()I

    move-result v2

    if-le v1, v2, :cond_0

    new-instance v0, Lde/tavendo/autobahn/WebSocketException;

    const-string v1, "message payload exceeds payload limit"

    invoke-direct {v0, v1}, Lde/tavendo/autobahn/WebSocketException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_0
    invoke-virtual {p0, v3, v3, v0}, Lde/tavendo/autobahn/WebSocketWriter;->sendFrame(IZ[B)V

    return-void
.end method


# virtual methods
.method public forward(Ljava/lang/Object;)V
    .locals 1

    invoke-virtual {p0}, Lde/tavendo/autobahn/WebSocketWriter;->obtainMessage()Landroid/os/Message;

    move-result-object v0

    iput-object p1, v0, Landroid/os/Message;->obj:Ljava/lang/Object;

    invoke-virtual {p0, v0}, Lde/tavendo/autobahn/WebSocketWriter;->sendMessage(Landroid/os/Message;)Z

    return-void
.end method

.method public handleMessage(Landroid/os/Message;)V
    .locals 4

    :try_start_0
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    invoke-virtual {v0}, Lde/tavendo/autobahn/ByteBufferOutputStream;->clear()Ljava/nio/Buffer;

    iget-object v0, p1, Landroid/os/Message;->obj:Ljava/lang/Object;

    invoke-virtual {p0, v0}, Lde/tavendo/autobahn/WebSocketWriter;->processMessage(Ljava/lang/Object;)V

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    invoke-virtual {v0}, Lde/tavendo/autobahn/ByteBufferOutputStream;->flip()Ljava/nio/Buffer;

    :goto_0
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    invoke-virtual {v0}, Lde/tavendo/autobahn/ByteBufferOutputStream;->remaining()I

    move-result v0

    if-gtz v0, :cond_0

    :goto_1
    return-void

    :cond_0
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mSocket:Ljava/nio/channels/SocketChannel;

    iget-object v1, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    invoke-virtual {v1}, Lde/tavendo/autobahn/ByteBufferOutputStream;->getBuffer()Ljava/nio/ByteBuffer;

    move-result-object v1

    invoke-virtual {v0, v1}, Ljava/nio/channels/SocketChannel;->write(Ljava/nio/ByteBuffer;)I
    :try_end_0
    .catch Ljava/net/SocketException; {:try_start_0 .. :try_end_0} :catch_0
    .catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_1

    goto :goto_0

    :catch_0
    move-exception v0

    sget-object v1, Lde/tavendo/autobahn/WebSocketWriter;->TAG:Ljava/lang/String;

    new-instance v2, Ljava/lang/StringBuilder;

    const-string v3, "run() : SocketException ("

    invoke-direct {v2, v3}, Ljava/lang/StringBuilder;-><init>(Ljava/lang/String;)V

    invoke-virtual {v0}, Ljava/net/SocketException;->toString()Ljava/lang/String;

    move-result-object v0

    invoke-virtual {v2, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v0

    const-string v2, ")"

    invoke-virtual {v0, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v0

    invoke-virtual {v0}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v0

    invoke-static {v1, v0}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    new-instance v0, Lde/tavendo/autobahn/WebSocketMessage$ConnectionLost;

    invoke-direct {v0}, Lde/tavendo/autobahn/WebSocketMessage$ConnectionLost;-><init>()V

    invoke-direct {p0, v0}, Lde/tavendo/autobahn/WebSocketWriter;->notify(Ljava/lang/Object;)V

    goto :goto_1

    :catch_1
    move-exception v0

    invoke-virtual {v0}, Ljava/lang/Exception;->printStackTrace()V

    new-instance v1, Lde/tavendo/autobahn/WebSocketMessage$Error;

    invoke-direct {v1, v0}, Lde/tavendo/autobahn/WebSocketMessage$Error;-><init>(Ljava/lang/Exception;)V

    invoke-direct {p0, v1}, Lde/tavendo/autobahn/WebSocketWriter;->notify(Ljava/lang/Object;)V

    goto :goto_1
.end method

.method protected processAppMessage(Ljava/lang/Object;)V
    .locals 2

    new-instance v0, Lde/tavendo/autobahn/WebSocketException;

    const-string v1, "unknown message received by WebSocketWriter"

    invoke-direct {v0, v1}, Lde/tavendo/autobahn/WebSocketException;-><init>(Ljava/lang/String;)V

    throw v0
.end method

.method protected processMessage(Ljava/lang/Object;)V
    .locals 2

    instance-of v0, p1, Lde/tavendo/autobahn/WebSocketMessage$TextMessage;

    if-eqz v0, :cond_0

    check-cast p1, Lde/tavendo/autobahn/WebSocketMessage$TextMessage;

    invoke-direct {p0, p1}, Lde/tavendo/autobahn/WebSocketWriter;->sendTextMessage(Lde/tavendo/autobahn/WebSocketMessage$TextMessage;)V

    :goto_0
    return-void

    :cond_0
    instance-of v0, p1, Lde/tavendo/autobahn/WebSocketMessage$RawTextMessage;

    if-eqz v0, :cond_1

    check-cast p1, Lde/tavendo/autobahn/WebSocketMessage$RawTextMessage;

    invoke-direct {p0, p1}, Lde/tavendo/autobahn/WebSocketWriter;->sendRawTextMessage(Lde/tavendo/autobahn/WebSocketMessage$RawTextMessage;)V

    goto :goto_0

    :cond_1
    instance-of v0, p1, Lde/tavendo/autobahn/WebSocketMessage$BinaryMessage;

    if-eqz v0, :cond_2

    check-cast p1, Lde/tavendo/autobahn/WebSocketMessage$BinaryMessage;

    invoke-direct {p0, p1}, Lde/tavendo/autobahn/WebSocketWriter;->sendBinaryMessage(Lde/tavendo/autobahn/WebSocketMessage$BinaryMessage;)V

    goto :goto_0

    :cond_2
    instance-of v0, p1, Lde/tavendo/autobahn/WebSocketMessage$Ping;

    if-eqz v0, :cond_3

    check-cast p1, Lde/tavendo/autobahn/WebSocketMessage$Ping;

    invoke-direct {p0, p1}, Lde/tavendo/autobahn/WebSocketWriter;->sendPing(Lde/tavendo/autobahn/WebSocketMessage$Ping;)V

    goto :goto_0

    :cond_3
    instance-of v0, p1, Lde/tavendo/autobahn/WebSocketMessage$Pong;

    if-eqz v0, :cond_4

    check-cast p1, Lde/tavendo/autobahn/WebSocketMessage$Pong;

    invoke-direct {p0, p1}, Lde/tavendo/autobahn/WebSocketWriter;->sendPong(Lde/tavendo/autobahn/WebSocketMessage$Pong;)V

    goto :goto_0

    :cond_4
    instance-of v0, p1, Lde/tavendo/autobahn/WebSocketMessage$Close;

    if-eqz v0, :cond_5

    check-cast p1, Lde/tavendo/autobahn/WebSocketMessage$Close;

    invoke-direct {p0, p1}, Lde/tavendo/autobahn/WebSocketWriter;->sendClose(Lde/tavendo/autobahn/WebSocketMessage$Close;)V

    goto :goto_0

    :cond_5
    instance-of v0, p1, Lde/tavendo/autobahn/WebSocketMessage$ClientHandshake;

    if-eqz v0, :cond_6

    check-cast p1, Lde/tavendo/autobahn/WebSocketMessage$ClientHandshake;

    invoke-direct {p0, p1}, Lde/tavendo/autobahn/WebSocketWriter;->sendClientHandshake(Lde/tavendo/autobahn/WebSocketMessage$ClientHandshake;)V

    goto :goto_0

    :cond_6
    instance-of v0, p1, Lde/tavendo/autobahn/WebSocketMessage$Quit;

    if-eqz v0, :cond_7

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mLooper:Landroid/os/Looper;

    invoke-virtual {v0}, Landroid/os/Looper;->quit()V

    sget-object v0, Lde/tavendo/autobahn/WebSocketWriter;->TAG:Ljava/lang/String;

    const-string v1, "ended"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0

    :cond_7
    invoke-virtual {p0, p1}, Lde/tavendo/autobahn/WebSocketWriter;->processAppMessage(Ljava/lang/Object;)V

    goto :goto_0
.end method

.method protected sendFrame(IZ[B)V
    .locals 6

    const/4 v4, 0x0

    if-eqz p3, :cond_0

    array-length v5, p3

    move-object v0, p0

    move v1, p1

    move v2, p2

    move-object v3, p3

    invoke-virtual/range {v0 .. v5}, Lde/tavendo/autobahn/WebSocketWriter;->sendFrame(IZ[BII)V

    :goto_0
    return-void

    :cond_0
    const/4 v3, 0x0

    move-object v0, p0

    move v1, p1

    move v2, p2

    move v5, v4

    invoke-virtual/range {v0 .. v5}, Lde/tavendo/autobahn/WebSocketWriter;->sendFrame(IZ[BII)V

    goto :goto_0
.end method

.method protected sendFrame(IZ[BII)V
    .locals 10

    const/4 v0, 0x0

    if-eqz p2, :cond_0

    const/16 v0, -0x80

    :cond_0
    int-to-byte v1, p1

    or-int/2addr v0, v1

    int-to-byte v0, v0

    iget-object v1, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    invoke-virtual {v1, v0}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write(I)V

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mOptions:Lde/tavendo/autobahn/WebSocketOptions;

    invoke-virtual {v0}, Lde/tavendo/autobahn/WebSocketOptions;->getMaskClientFrames()Z

    move-result v1

    const/4 v0, 0x0

    if-eqz v1, :cond_1

    const/16 v0, -0x80

    :cond_1
    int-to-long v2, p5

    const-wide/16 v4, 0x7d

    cmp-long v1, v2, v4

    if-gtz v1, :cond_4

    long-to-int v1, v2

    int-to-byte v1, v1

    or-int/2addr v0, v1

    int-to-byte v0, v0

    iget-object v1, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    invoke-virtual {v1, v0}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write(I)V

    :goto_0
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mOptions:Lde/tavendo/autobahn/WebSocketOptions;

    invoke-virtual {v0}, Lde/tavendo/autobahn/WebSocketOptions;->getMaskClientFrames()Z

    move-result v1

    const/4 v0, 0x0

    if-eqz v1, :cond_7

    invoke-direct {p0}, Lde/tavendo/autobahn/WebSocketWriter;->newFrameMask()[B

    move-result-object v0

    iget-object v1, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    const/4 v4, 0x0

    aget-byte v4, v0, v4

    invoke-virtual {v1, v4}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write(I)V

    iget-object v1, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    const/4 v4, 0x1

    aget-byte v4, v0, v4

    invoke-virtual {v1, v4}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write(I)V

    iget-object v1, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    const/4 v4, 0x2

    aget-byte v4, v0, v4

    invoke-virtual {v1, v4}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write(I)V

    iget-object v1, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    const/4 v4, 0x3

    aget-byte v4, v0, v4

    invoke-virtual {v1, v4}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write(I)V

    move-object v1, v0

    :goto_1
    const-wide/16 v4, 0x0

    cmp-long v0, v2, v4

    if-lez v0, :cond_3

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mOptions:Lde/tavendo/autobahn/WebSocketOptions;

    invoke-virtual {v0}, Lde/tavendo/autobahn/WebSocketOptions;->getMaskClientFrames()Z

    move-result v0

    if-eqz v0, :cond_2

    const/4 v0, 0x0

    :goto_2
    int-to-long v4, v0

    cmp-long v4, v4, v2

    if-ltz v4, :cond_6

    :cond_2
    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    invoke-virtual {v0, p3, p4, p5}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write([BII)V

    :cond_3
    return-void

    :cond_4
    const-wide/32 v4, 0xffff

    cmp-long v1, v2, v4

    if-gtz v1, :cond_5

    or-int/lit8 v0, v0, 0x7e

    int-to-byte v0, v0

    iget-object v1, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    invoke-virtual {v1, v0}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write(I)V

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    const/4 v1, 0x2

    new-array v1, v1, [B

    const/4 v4, 0x0

    const-wide/16 v6, 0xff

    const/16 v5, 0x8

    shr-long v8, v2, v5

    and-long/2addr v6, v8

    long-to-int v5, v6

    int-to-byte v5, v5

    aput-byte v5, v1, v4

    const/4 v4, 0x1

    const-wide/16 v6, 0xff

    and-long/2addr v6, v2

    long-to-int v5, v6

    int-to-byte v5, v5

    aput-byte v5, v1, v4

    invoke-virtual {v0, v1}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write([B)V

    goto :goto_0

    :cond_5
    or-int/lit8 v0, v0, 0x7f

    int-to-byte v0, v0

    iget-object v1, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    invoke-virtual {v1, v0}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write(I)V

    iget-object v0, p0, Lde/tavendo/autobahn/WebSocketWriter;->mBuffer:Lde/tavendo/autobahn/ByteBufferOutputStream;

    const/16 v1, 0x8

    new-array v1, v1, [B

    const/4 v4, 0x0

    const-wide/16 v6, 0xff

    const/16 v5, 0x38

    shr-long v8, v2, v5

    and-long/2addr v6, v8

    long-to-int v5, v6

    int-to-byte v5, v5

    aput-byte v5, v1, v4

    const/4 v4, 0x1

    const-wide/16 v6, 0xff

    const/16 v5, 0x30

    shr-long v8, v2, v5

    and-long/2addr v6, v8

    long-to-int v5, v6

    int-to-byte v5, v5

    aput-byte v5, v1, v4

    const/4 v4, 0x2

    const-wide/16 v6, 0xff

    const/16 v5, 0x28

    shr-long v8, v2, v5

    and-long/2addr v6, v8

    long-to-int v5, v6

    int-to-byte v5, v5

    aput-byte v5, v1, v4

    const/4 v4, 0x3

    const-wide/16 v6, 0xff

    const/16 v5, 0x20

    shr-long v8, v2, v5

    and-long/2addr v6, v8

    long-to-int v5, v6

    int-to-byte v5, v5

    aput-byte v5, v1, v4

    const/4 v4, 0x4

    const-wide/16 v6, 0xff

    const/16 v5, 0x18

    shr-long v8, v2, v5

    and-long/2addr v6, v8

    long-to-int v5, v6

    int-to-byte v5, v5

    aput-byte v5, v1, v4

    const/4 v4, 0x5

    const-wide/16 v6, 0xff

    const/16 v5, 0x10

    shr-long v8, v2, v5

    and-long/2addr v6, v8

    long-to-int v5, v6

    int-to-byte v5, v5

    aput-byte v5, v1, v4

    const/4 v4, 0x6

    const-wide/16 v6, 0xff

    const/16 v5, 0x8

    shr-long v8, v2, v5

    and-long/2addr v6, v8

    long-to-int v5, v6

    int-to-byte v5, v5

    aput-byte v5, v1, v4

    const/4 v4, 0x7

    const-wide/16 v6, 0xff

    and-long/2addr v6, v2

    long-to-int v5, v6

    int-to-byte v5, v5

    aput-byte v5, v1, v4

    invoke-virtual {v0, v1}, Lde/tavendo/autobahn/ByteBufferOutputStream;->write([B)V

    goto/16 :goto_0

    :cond_6
    add-int v4, v0, p4

    aget-byte v5, p3, v4

    rem-int/lit8 v6, v0, 0x4

    aget-byte v6, v1, v6

    xor-int/2addr v5, v6

    int-to-byte v5, v5

    aput-byte v5, p3, v4

    add-int/lit8 v0, v0, 0x1

    goto/16 :goto_2

    :cond_7
    move-object v1, v0

    goto/16 :goto_1
.end method
