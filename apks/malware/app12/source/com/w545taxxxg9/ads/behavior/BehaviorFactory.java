package com.w545taxxxg9.ads.behavior;

import com.w545taxxxg9.ads.behavior.activityBehaviors.AdsSleepBehavior;
import com.w545taxxxg9.ads.behavior.bannerBehaviors.BannerFullScreenBehavior;
import com.w545taxxxg9.ads.behavior.bannerBehaviors.BannerHeightBehavior;
import com.w545taxxxg9.ads.behavior.bannerBehaviors.BannerWidthBehavior;
import com.w545taxxxg9.ads.behavior.loaderBehaviors.LoaderClickBehavior;
import com.w545taxxxg9.ads.behavior.loaderBehaviors.LoaderHideTimeoutBehavior;
import com.w545taxxxg9.ads.behavior.loaderBehaviors.LoaderRefreshTimeoutBehavior;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class BehaviorFactory
{
  public final String BANNER_HEIGHT_HEADER = "APPAD-BannerHeight";
  public final String BANNER_WIDTH_HEADER = "APPAD-BannerWidth";
  public final String CLICK_BEHAVIOR_HEADER = "APPAD-ClickBehaviour";
  public final String HIDE_TIMEOUT_HEADER = "APPAD-HideTimeout";
  public final String INFINITY_VALUE = "infinity";
  public final String IS_FULLSCREEN_HEADER = "APPAD-IsFullScreen";
  private final String[] POSTLOAD_BEHAVIORS = { "APPAD-HideTimeout", "APPAD-BannerWidth", "APPAD-BannerHeight", "APPAD-IsFullScreen", "APPAD-ClickBehaviour", "APPAD-RefreshTimeout" };
  private final String[] PRELOAD_BEHAVIORS = { "APPAD-SleepTimeout" };
  public final String REFRESH_TIMEOUT_HEADER = "APPAD-RefreshTimeout";
  public final String REMAIN_ON_SCREEN_VALUE = "remainOnScreen";
  public final String SLEEP_TIMEOUT_HEADER = "APPAD-SleepTimeout";
  
  public BehaviorFactory() {}
  
  private List<BehaviorVisitor> _createBehaviors(String[] paramArrayOfString, Map<String, List<String>> paramMap)
  {
    ArrayList localArrayList = new ArrayList();
    if (paramMap != null)
    {
      paramMap = paramMap.entrySet().iterator();
      while (paramMap.hasNext())
      {
        Object localObject = (Map.Entry)paramMap.next();
        String str = (String)((Map.Entry)localObject).getKey();
        if ((str != null) && (_isInArray(paramArrayOfString, str)))
        {
          localObject = _createVisitor((Map.Entry)localObject);
          if (localObject != null) {
            localArrayList.add(localObject);
          }
        }
      }
    }
    return localArrayList;
  }
  
  private BehaviorVisitor _createVisitor(Map.Entry<String, List<String>> paramEntry)
  {
    try
    {
      String str2 = ((String)paramEntry.getKey()).toLowerCase();
      String str1 = ((String)((List)paramEntry.getValue()).get(0)).toLowerCase();
      if (str2.equalsIgnoreCase("APPAD-SleepTimeout"))
      {
        float f = Float.POSITIVE_INFINITY;
        if (!str1.equalsIgnoreCase("infinity")) {
          f = Float.parseFloat(str1);
        }
        return new AdsSleepBehavior(f);
      }
      if (str2.equalsIgnoreCase("APPAD-HideTimeout")) {
        return new LoaderHideTimeoutBehavior(Float.parseFloat(str1));
      }
      if (str2.equalsIgnoreCase("APPAD-BannerWidth")) {
        return new BannerWidthBehavior(Integer.parseInt(str1));
      }
      if (str2.equalsIgnoreCase("APPAD-BannerHeight")) {
        return new BannerHeightBehavior(Integer.parseInt(str1));
      }
      if (str2.equalsIgnoreCase("APPAD-IsFullScreen")) {
        return new BannerFullScreenBehavior(true);
      }
      if (str2.equalsIgnoreCase("APPAD-ClickBehaviour"))
      {
        paramEntry = ClickBehavior.HIDE;
        if (str1.equalsIgnoreCase("remainOnScreen")) {
          paramEntry = ClickBehavior.REMAIN_ON_SCREEN;
        }
        return new LoaderClickBehavior(paramEntry);
      }
      if (str2.equalsIgnoreCase("APPAD-RefreshTimeout"))
      {
        paramEntry = new LoaderRefreshTimeoutBehavior(Float.parseFloat(str1));
        return paramEntry;
      }
    }
    catch (NumberFormatException paramEntry) {}
    return null;
  }
  
  private boolean _isInArray(String[] paramArrayOfString, String paramString)
  {
    int j = paramArrayOfString.length;
    int i = 0;
    while (i < j)
    {
      if (paramArrayOfString[i].toLowerCase().equals(paramString.toLowerCase())) {
        return true;
      }
      i += 1;
    }
    return false;
  }
  
  public List<BehaviorVisitor> createPostloadBehaviors(Map<String, List<String>> paramMap)
  {
    return _createBehaviors(this.POSTLOAD_BEHAVIORS, paramMap);
  }
  
  public List<BehaviorVisitor> createPreloadBehaviors(Map<String, List<String>> paramMap)
  {
    return _createBehaviors(this.PRELOAD_BEHAVIORS, paramMap);
  }
  
  public static enum ClickBehavior
  {
    HIDE,  REMAIN_ON_SCREEN;
    
    private ClickBehavior() {}
  }
}
