package com.w545taxxxg9.Controllers;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Build.VERSION;
import android.os.Handler;
import android.os.HandlerThread;
import android.util.Log;
import android.view.Display;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.webkit.WebSettings;
import android.webkit.WebSettings.PluginState;
import android.webkit.WebSettings.RenderPriority;
import android.webkit.WebView;
import android.widget.ProgressBar;
import com.w545taxxxg9.Factory.Factory;
import com.w545taxxxg9.MainNavigationActivity;
import com.w545taxxxg9.Model.NavigationWidget;
import com.w545taxxxg9.Model.WidgetEntity;
import com.w545taxxxg9.Utils.BrowserDownloadListener;
import com.w545taxxxg9.Utils.BrowserWebChromeClient;
import com.w545taxxxg9.Utils.BrowserWebViewClient;
import com.w545taxxxg9.Utils.FileManager;
import com.w545taxxxg9.Utils.JavascriptInterface;
import com.w545taxxxg9.Views.TabContent.ContentType;
import com.w545taxxxg9.Views.WebContent;
import com.w545taxxxg9.media.WebViewJsAudioPlayer;
import java.io.File;
import java.io.PrintStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class WebContentController
  implements ITabContentController
{
  private static final int APPMAXCACHESIZE = 200;
  private String _bannerJsInjection = "";
  private WebView _browser;
  MainNavigationActivity _mainActivity = null;
  private ViewGroup _parent = null;
  private ProgressBar _progressBar;
  private int _tabsPadding = 0;
  private WebContent _webContent = null;
  private WidgetEntity _widgetInfo;
  
  public WebContentController(WidgetEntity paramWidgetEntity)
  {
    this._widgetInfo = paramWidgetEntity;
  }
  
  private int calculateScale()
  {
    WindowManager localWindowManager = (WindowManager)Factory.getInstance().getMainNavigationActivity().getSystemService("window");
    int i;
    float f2;
    if (Build.VERSION.SDK_INT > 6)
    {
      i = 10;
      System.out.println("dBrowserWidth = " + i);
      int j = localWindowManager.getDefaultDisplay().getHeight();
      int k = localWindowManager.getDefaultDisplay().getWidth();
      f2 = this._widgetInfo.getHeight() + 5;
      float f3 = this._tabsPadding;
      f1 = this._widgetInfo.getWidth();
      f2 = (j - 50) / (f2 + f3);
      f1 = (k - i) / f1;
      if ((f2 <= 1.0F) || (f1 <= 1.0F)) {
        break label155;
      }
    }
    label155:
    for (float f1 = Math.min(f2, f1) * 100.0F;; f1 = Math.min(f2, f1) * 100.0F)
    {
      return (int)f1;
      i = 20;
      break;
    }
  }
  
  private int calculateScale(int paramInt1, int paramInt2)
  {
    int i = this._browser.getHeight();
    int j = this._browser.getWidth();
    return (int)(Math.min(i / paramInt1, j / paramInt2) * 100.0F);
  }
  
  private void callHiddenWebViewMethod(String paramString)
  {
    if (this._browser != null) {}
    try
    {
      WebView.class.getMethod(paramString, new Class[0]).invoke(this._browser, new Object[0]);
      return;
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      Log.e("No such method: " + paramString, localNoSuchMethodException.getMessage());
      return;
    }
    catch (IllegalAccessException localIllegalAccessException)
    {
      Log.e("Illegal Access: " + paramString, localIllegalAccessException.getMessage());
      return;
    }
    catch (InvocationTargetException localInvocationTargetException)
    {
      Log.e("Invocation Target Exception: " + paramString, localInvocationTargetException.getMessage());
    }
  }
  
  private void init()
  {
    this._webContent.init(this);
    this._webContent.setLoadingCurtainType(this._widgetInfo.getLoadingCurtainType());
    this._browser = this._webContent.getBrowser();
    this._browser.setOnTouchListener(new View.OnTouchListener()
    {
      public boolean onTouch(View paramAnonymousView, MotionEvent paramAnonymousMotionEvent)
      {
        switch (paramAnonymousMotionEvent.getAction())
        {
        }
        for (;;)
        {
          return false;
          if (!paramAnonymousView.hasFocus()) {
            paramAnonymousView.requestFocus();
          }
        }
      }
    });
    this._progressBar = this._webContent.getProgressBar();
    this._browser.requestFocus(130);
    this._browser.setWebViewClient(new BrowserWebViewClient(this));
    this._browser.setWebChromeClient(new BrowserWebChromeClient(this));
    this._browser.setDownloadListener(new BrowserDownloadListener(this));
    this._browser.addJavascriptInterface(new JavascriptInterface(this), JavascriptInterface.JS_INTERFACE_NAME);
    this._browser.addJavascriptInterface(new WebViewJsAudioPlayer(this._browser), WebViewJsAudioPlayer.JS_INTERFACE_NAME);
    WebSettings localWebSettings = this._browser.getSettings();
    localWebSettings.setJavaScriptEnabled(true);
    localWebSettings.setJavaScriptCanOpenWindowsAutomatically(true);
    localWebSettings.setAllowFileAccess(true);
    localWebSettings.setPluginState(WebSettings.PluginState.ON);
    localWebSettings.setSupportZoom(true);
    localWebSettings.setGeolocationEnabled(true);
    localWebSettings.setDatabaseEnabled(true);
    localWebSettings.setAppCacheMaxSize(209715200L);
    localWebSettings.setDomStorageEnabled(true);
    Object localObject = Factory.getInstance().getMainNavigationActivity().getApplicationContext();
    String str1 = ((Context)localObject).getDir("appcache", 0).getPath();
    String str2 = ((Context)localObject).getDir("databases", 0).getPath();
    localObject = ((Context)localObject).getDir("geolocation", 0).getPath();
    localWebSettings.setAppCachePath(str1);
    localWebSettings.setDatabasePath(str2);
    localWebSettings.setGeolocationDatabasePath((String)localObject);
    localWebSettings.setRenderPriority(WebSettings.RenderPriority.HIGH);
    localWebSettings.setSaveFormData(true);
    localWebSettings.setSavePassword(true);
    localWebSettings.setUserAgentString(this._widgetInfo.getUserAgent());
    this._browser.setVerticalScrollBarEnabled(false);
    this._browser.setHorizontalScrollBarEnabled(false);
    if (this._widgetInfo.getLink().indexOf("file:///android_asset/content") == 0)
    {
      this._browser.setInitialScale(calculateScale());
      localWebSettings.setBuiltInZoomControls(false);
    }
    for (;;)
    {
      if (Factory.getInstance().getWidgetsController().widgetsCount() > 1) {
        this._tabsPadding = 61;
      }
      this._bannerJsInjection = Factory.getInstance().getMainNavigationActivity().getSharedPreferences("AppsgeyserPrefs", 0).getString("bannerJs", "");
      this._webContent.navigate(this._widgetInfo.getLink());
      return;
      localWebSettings.setLoadWithOverviewMode(true);
      localWebSettings.setUseWideViewPort(true);
      this._browser.setInitialScale(0);
      localWebSettings.setBuiltInZoomControls(true);
    }
  }
  
  public View createTabContent(ViewGroup paramViewGroup)
    throws Exception
  {
    this._webContent = ((WebContent)Factory.getInstance().getTabContent(TabContent.ContentType.WEB));
    this._parent = paramViewGroup;
    init();
    return this._webContent;
  }
  
  public void destroy()
  {
    this._browser.destroy();
  }
  
  public String getBannerInjectionJs()
  {
    return this._bannerJsInjection;
  }
  
  public String getInjectJSContent()
  {
    return FileManager.getStringFromAssetsFileWithFileName(this._widgetInfo.getInjectJS(), this._mainActivity);
  }
  
  public MainNavigationActivity getMainNavigationActivity()
  {
    return this._mainActivity;
  }
  
  public NavigationWidget getNavigationWidget()
  {
    return this._webContent.getNavigationWidget();
  }
  
  public final WebView getWebView()
  {
    return this._browser;
  }
  
  public WidgetEntity getWidgetInfo()
  {
    return this._widgetInfo;
  }
  
  public void hideProgressBarPanel()
  {
    this._webContent.hideProgressBarPanel();
  }
  
  public void onBackKeyDown()
  {
    if (this._browser.canGoBack())
    {
      this._browser.goBack();
      return;
    }
    Factory.getInstance().getMainNavigationActivity().showCloseAppDialog();
  }
  
  public void onPause()
  {
    callHiddenWebViewMethod("onPause");
  }
  
  public void onResume()
  {
    callHiddenWebViewMethod("onResume");
  }
  
  public void setActiveState(boolean paramBoolean)
  {
    ViewGroup localViewGroup;
    if (paramBoolean)
    {
      localViewGroup = (ViewGroup)this._webContent.getParent();
      if (localViewGroup != this._parent)
      {
        if (localViewGroup != null) {
          localViewGroup.removeView(this._webContent);
        }
        this._parent.addView(this._webContent);
      }
      onResume();
    }
    for (;;)
    {
      this._webContent.setActiveState(paramBoolean);
      return;
      localViewGroup = (ViewGroup)this._webContent.getParent();
      if (localViewGroup != null) {
        localViewGroup.removeView(this._webContent);
      }
      onPause();
    }
  }
  
  public void setBannerInjectionJs(String paramString)
  {
    this._bannerJsInjection = paramString;
    if ((!this._browser.getUrl().startsWith("https://")) && (this._browser.getProgress() >= 100)) {
      this._browser.loadUrl("javascript:(function(){ " + paramString + " })()");
    }
    SharedPreferences.Editor localEditor = Factory.getInstance().getMainNavigationActivity().getSharedPreferences("AppsgeyserPrefs", 0).edit();
    localEditor.putString("bannerJs", paramString);
    localEditor.commit();
  }
  
  public void setMainNavigationActivity(MainNavigationActivity paramMainNavigationActivity)
  {
    this._mainActivity = paramMainNavigationActivity;
  }
  
  public void setProgressBarState(int paramInt)
  {
    this._progressBar.setProgress(paramInt);
    if (paramInt >= 100) {
      new Handler().postDelayed(new HandlerThread("progressFinishDelay")
      {
        public void run()
        {
          WebContentController.this._webContent.hideProgressBarPanel();
        }
      }, 300L);
    }
  }
  
  public void setScaleForPageWithSize(int paramInt1, int paramInt2)
  {
    this._browser.setInitialScale(calculateScale(paramInt1, paramInt2));
  }
  
  public void showConnectionErrorDialog() {}
  
  public void showProgressBarPanel()
  {
    this._webContent.showProgressBarPanel();
  }
  
  public void zoomIn()
  {
    this._browser.zoomIn();
  }
}
