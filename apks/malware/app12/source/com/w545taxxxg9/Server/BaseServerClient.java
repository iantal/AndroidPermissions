package com.w545taxxxg9.Server;

import com.w545taxxxg9.MainNavigationActivity;
import com.w545taxxxg9.Utils.WebWidgetConfigutation;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.Map;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;

public class BaseServerClient
{
  protected static final int CONNECTION_TIMEOUT = 30000;
  protected static final int FORBIDDEN_RESPONSE = 403;
  protected static final int OK_RESPONSE = 200;
  protected static final int SOCKET_TIMEOUT = 30000;
  protected MainNavigationActivity _activity;
  protected WebWidgetConfigutation _config;
  protected HttpParams _httpParameters;
  
  public BaseServerClient(MainNavigationActivity paramMainNavigationActivity)
  {
    this._activity = paramMainNavigationActivity;
    this._config = paramMainNavigationActivity.getConfig();
    this._httpParameters = new BasicHttpParams();
    HttpConnectionParams.setConnectionTimeout(this._httpParameters, 30000);
    HttpConnectionParams.setSoTimeout(this._httpParameters, 30000);
  }
  
  public String SendSyncRequest(String paramString)
  {
    try
    {
      DefaultHttpClient localDefaultHttpClient = new DefaultHttpClient(this._httpParameters);
      paramString = new HttpGet(paramString);
      paramString.setHeader("Cache-Control", "no-cache,no-store");
      paramString = (String)localDefaultHttpClient.execute(paramString, new BasicResponseHandler());
      return paramString;
    }
    catch (Exception paramString) {}
    return "";
  }
  
  public boolean getAvailabilityStatus(String paramString)
  {
    boolean bool = true;
    try
    {
      HttpURLConnection.setFollowRedirects(false);
      paramString = (HttpURLConnection)new URL(paramString + "&test=1").openConnection();
      paramString.setRequestMethod("HEAD");
      int i = paramString.getResponseCode();
      if (i != 200) {
        bool = false;
      }
      return bool;
    }
    catch (Exception paramString) {}
    return false;
  }
  
  public Map<String, List<String>> loadHeaders(String paramString)
  {
    try
    {
      HttpURLConnection.setFollowRedirects(false);
      paramString = (HttpURLConnection)new URL(paramString + "&test=1").openConnection();
      paramString.setRequestMethod("HEAD");
      int i = paramString.getResponseCode();
      paramString = paramString.getHeaderFields();
      if (i != 200) {
        paramString = null;
      }
      return paramString;
    }
    catch (Exception paramString) {}
    return null;
  }
  
  public void sendRequestAsync(final String paramString, final int paramInt, final OnRequestDoneListener paramOnRequestDoneListener)
  {
    new Thread()
    {
      public void run()
      {
        try
        {
          Object localObject = new DefaultHttpClient(BaseServerClient.this._httpParameters);
          HttpGet localHttpGet = new HttpGet(paramString);
          localHttpGet.setHeader("Cache-Control", "no-cache,no-store");
          localObject = ((HttpClient)localObject).execute(localHttpGet);
          paramOnRequestDoneListener.onRequestDone(paramString, paramInt, (HttpResponse)localObject);
          return;
        }
        catch (Exception localException) {}
      }
    }.start();
  }
  
  public static abstract interface OnRequestDoneListener
  {
    public abstract void onRequestDone(String paramString, int paramInt, HttpResponse paramHttpResponse);
  }
}
