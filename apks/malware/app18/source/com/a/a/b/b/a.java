package com.a.a.b.b;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Matrix;
import android.media.ExifInterface;
import android.os.Build.VERSION;
import com.a.a.b.a.f;
import com.a.a.b.a.i;
import java.io.IOException;
import java.io.InputStream;

public class a
  implements d
{
  protected final boolean a;
  
  public a(boolean paramBoolean)
  {
    this.a = paramBoolean;
  }
  
  private boolean a(String paramString1, String paramString2)
  {
    return (Build.VERSION.SDK_INT >= 5) && ("image/jpeg".equalsIgnoreCase(paramString2)) && (com.a.a.b.d.d.a(paramString1) == com.a.a.b.d.d.c);
  }
  
  protected Bitmap a(Bitmap paramBitmap, e paramE, int paramInt, boolean paramBoolean)
  {
    Matrix localMatrix = new Matrix();
    com.a.a.b.a.e localE = paramE.d();
    f localF1;
    f localF2;
    i localI;
    if ((localE == com.a.a.b.a.e.d) || (localE == com.a.a.b.a.e.e))
    {
      localF1 = new f(paramBitmap.getWidth(), paramBitmap.getHeight(), paramInt);
      localF2 = paramE.c();
      localI = paramE.e();
      if (localE != com.a.a.b.a.e.e) {
        break label257;
      }
    }
    label257:
    for (boolean bool = true;; bool = false)
    {
      float f = com.a.a.c.a.b(localF1, localF2, localI, bool);
      if (Float.compare(f, 1.0F) != 0)
      {
        localMatrix.setScale(f, f);
        if (this.a) {
          com.a.a.c.e.a("Scale subsampled image (%1$s) to %2$s (scale = %3$.5f) [%4$s]", new Object[] { localF1, localF1.a(f), Float.valueOf(f), paramE.a() });
        }
      }
      if (paramBoolean)
      {
        localMatrix.postScale(-1.0F, 1.0F);
        if (this.a) {
          com.a.a.c.e.a("Flip image horizontally [%s]", new Object[] { paramE.a() });
        }
      }
      if (paramInt != 0)
      {
        localMatrix.postRotate(paramInt);
        if (this.a) {
          com.a.a.c.e.a("Rotate image on %1$dÂ° [%2$s]", new Object[] { Integer.valueOf(paramInt), paramE.a() });
        }
      }
      paramE = Bitmap.createBitmap(paramBitmap, 0, 0, paramBitmap.getWidth(), paramBitmap.getHeight(), localMatrix, true);
      if (paramE != paramBitmap) {
        paramBitmap.recycle();
      }
      return paramE;
    }
  }
  
  public Bitmap a(e paramE)
  {
    InputStream localInputStream2 = b(paramE);
    InputStream localInputStream1 = localInputStream2;
    c localC;
    Bitmap localBitmap;
    try
    {
      localC = a(localInputStream2, paramE);
      localInputStream1 = localInputStream2;
      localInputStream2 = b(localInputStream2, paramE);
      localInputStream1 = localInputStream2;
      localBitmap = BitmapFactory.decodeStream(localInputStream2, null, a(localC.a, paramE));
      com.a.a.c.c.a(localInputStream2);
      if (localBitmap == null)
      {
        com.a.a.c.e.d("Image can't be decoded [%s]", new Object[] { paramE.a() });
        return localBitmap;
      }
    }
    finally
    {
      com.a.a.c.c.a(localInputStream1);
    }
    return a(localBitmap, paramE, localC.b.a, localC.b.b);
  }
  
  protected BitmapFactory.Options a(f paramF, e paramE)
  {
    com.a.a.b.a.e localE = paramE.d();
    int i;
    if (localE == com.a.a.b.a.e.a)
    {
      i = com.a.a.c.a.a(paramF);
      if ((i > 1) && (this.a)) {
        com.a.a.c.e.a("Subsample original image (%1$s) to %2$s (scale = %3$d) [%4$s]", new Object[] { paramF, paramF.a(i), Integer.valueOf(i), paramE.a() });
      }
      paramF = paramE.i();
      paramF.inSampleSize = i;
      return paramF;
    }
    f localF = paramE.c();
    if (localE == com.a.a.b.a.e.b) {}
    for (boolean bool = true;; bool = false)
    {
      i = com.a.a.c.a.a(paramF, localF, paramE.e(), bool);
      break;
    }
  }
  
  protected b a(String paramString)
  {
    bool1 = false;
    boolean bool2 = false;
    boolean bool3 = false;
    boolean bool4 = false;
    try
    {
      i = new ExifInterface(com.a.a.b.d.d.c.c(paramString)).getAttributeInt("Orientation", 1);
      switch (i)
      {
      }
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        com.a.a.c.e.c("Can't read EXIF tags from file [%s]", new Object[] { paramString });
        continue;
        int i = 0;
        bool1 = true;
      }
    }
    i = 0;
    bool1 = bool4;
    for (;;)
    {
      return new b(i, bool1);
      bool1 = true;
      i = 90;
      continue;
      bool2 = true;
      i = 180;
      bool1 = bool2;
      continue;
      bool3 = true;
      i = 270;
      bool1 = bool3;
    }
  }
  
  protected c a(InputStream paramInputStream, e paramE)
  {
    BitmapFactory.Options localOptions = new BitmapFactory.Options();
    localOptions.inJustDecodeBounds = true;
    BitmapFactory.decodeStream(paramInputStream, null, localOptions);
    paramInputStream = paramE.b();
    if ((paramE.h()) && (a(paramInputStream, localOptions.outMimeType))) {}
    for (paramInputStream = a(paramInputStream);; paramInputStream = new b()) {
      return new c(new f(localOptions.outWidth, localOptions.outHeight, paramInputStream.a), paramInputStream);
    }
  }
  
  protected InputStream b(e paramE)
  {
    return paramE.f().a(paramE.b(), paramE.g());
  }
  
  protected InputStream b(InputStream paramInputStream, e paramE)
  {
    try
    {
      paramInputStream.reset();
      return paramInputStream;
    }
    catch (IOException localIOException)
    {
      com.a.a.c.c.a(paramInputStream);
    }
    return b(paramE);
  }
}
