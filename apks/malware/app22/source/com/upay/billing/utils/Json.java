package com.upay.billing.utils;

import java.io.Externalizable;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.json.JSONArray;
import org.json.JSONObject;

public class Json
  implements Externalizable, Iterable<Json>
{
  private static final long serialVersionUID = 1L;
  private Object obj;
  public Type type;
  
  public Json() {}
  
  public Json(Object paramObject)
  {
    if ((paramObject == null) || (JSONObject.NULL.equals(paramObject)))
    {
      this.type = Type.NULL;
      this.obj = null;
      return;
    }
    if ((paramObject instanceof JSONArray))
    {
      this.type = Type.ARRAY;
      this.obj = paramObject;
      return;
    }
    if ((paramObject instanceof Boolean))
    {
      this.type = Type.BOOL;
      this.obj = paramObject;
      return;
    }
    if ((paramObject instanceof Number))
    {
      this.type = Type.NUMBER;
      this.obj = paramObject;
      return;
    }
    if ((paramObject instanceof String))
    {
      this.type = Type.STRING;
      this.obj = paramObject;
      return;
    }
    if ((paramObject instanceof JSONObject))
    {
      this.type = Type.OBJECT;
      this.obj = paramObject;
      return;
    }
    throw new IllegalArgumentException(paramObject.getClass().toString());
  }
  
  public static final JSONArray asJSONArray(Iterable<Json> paramIterable)
  {
    JSONArray localJSONArray = new JSONArray();
    paramIterable = Util.safeIter(paramIterable).iterator();
    while (paramIterable.hasNext()) {
      localJSONArray.put(((Json)paramIterable.next()).obj);
    }
    return localJSONArray;
  }
  
  public static final List<Json> asList(JSONArray paramJSONArray)
  {
    ArrayList localArrayList = new ArrayList();
    int i = 0;
    int j = paramJSONArray.length();
    while (i < j)
    {
      localArrayList.add(new Json(paramJSONArray.opt(i)));
      i += 1;
    }
    return localArrayList;
  }
  
  private final boolean assertType(Type... paramVarArgs)
  {
    int j = paramVarArgs.length;
    int i = 0;
    while (i < j)
    {
      Type localType = paramVarArgs[i];
      if (this.type == localType) {
        return true;
      }
      i += 1;
    }
    throw new IllegalAccessError("Type '" + this.type + "', expect '" + this.type + "'");
  }
  
  public static final Json createArray(int[] paramArrayOfInt)
  {
    JSONArray localJSONArray = new JSONArray();
    int i = 0;
    int j = paramArrayOfInt.length;
    while (i < j)
    {
      localJSONArray.put(paramArrayOfInt[i]);
      i += 1;
    }
    return new Json(localJSONArray);
  }
  
  public static final <T> Json createArray(T[] paramArrayOfT)
  {
    JSONArray localJSONArray = new JSONArray();
    int i = 0;
    int j = paramArrayOfT.length;
    while (i < j)
    {
      localJSONArray.put(paramArrayOfT[i]);
      i += 1;
    }
    return new Json(localJSONArray);
  }
  
  public static final Json createObject(Object[] paramArrayOfObject)
  {
    JSONObject localJSONObject = new JSONObject();
    int j = paramArrayOfObject.length;
    int i = 0;
    while (i < j)
    {
      String str = (String)paramArrayOfObject[i];
      try
      {
        localJSONObject.putOpt(str, paramArrayOfObject[(i + 1)]);
        i += 2;
      }
      catch (Exception paramArrayOfObject)
      {
        throw new IllegalArgumentException("unexpected type at index " + (i + 1));
      }
    }
    return new Json(localJSONObject);
  }
  
  public static final Json parse(String paramString)
  {
    if (paramString.trim().startsWith("[")) {
      try
      {
        Json localJson1 = new Json(new JSONArray(paramString));
        return localJson1;
      }
      catch (Exception localException1)
      {
        throw new IllegalArgumentException("JSONArray: " + paramString);
      }
    }
    try
    {
      Json localJson2 = new Json(new JSONObject(paramString));
      return localJson2;
    }
    catch (Exception localException2)
    {
      localException2.printStackTrace();
      throw new IllegalArgumentException("JSONObject: " + paramString);
    }
  }
  
  public final Json add(Object paramObject)
  {
    assertType(new Type[] { Type.ARRAY });
    try
    {
      ((JSONArray)this.obj).put(paramObject);
      return this;
    }
    catch (Exception localException)
    {
      throw new IllegalArgumentException("" + paramObject);
    }
  }
  
  public final JSONArray asArray()
  {
    assertType(new Type[] { Type.ARRAY });
    return (JSONArray)this.obj;
  }
  
  public final Boolean asBool(Boolean paramBoolean)
  {
    boolean bool = false;
    switch (d.ik[this.type.ordinal()])
    {
    default: 
      return paramBoolean;
    case 2: 
      return (Boolean)this.obj;
    case 3: 
      if (((Number)this.obj).intValue() != 0) {}
      for (bool = true;; bool = false) {
        return Boolean.valueOf(bool);
      }
    }
    if ("true".equalsIgnoreCase((String)this.obj)) {
      bool = true;
    }
    for (;;)
    {
      return Boolean.valueOf(bool);
      if (!"false".equalsIgnoreCase((String)this.obj)) {
        bool = paramBoolean.booleanValue();
      }
    }
  }
  
  public final boolean asBool()
  {
    Boolean localBoolean = asBool(null);
    if (localBoolean == null) {
      return false;
    }
    return localBoolean.booleanValue();
  }
  
  public final double asDouble()
  {
    Double localDouble = asDouble(null);
    if (localDouble == null) {
      return 0.0D;
    }
    return localDouble.doubleValue();
  }
  
  public final Double asDouble(Double paramDouble)
  {
    switch (d.ik[this.type.ordinal()])
    {
    default: 
      return paramDouble;
    case 2: 
      if (((Boolean)this.obj).booleanValue()) {}
      for (double d = 1.0D;; d = 0.0D) {
        return Double.valueOf(d);
      }
    case 3: 
      return Double.valueOf(((Number)this.obj).doubleValue());
    }
    try
    {
      Double localDouble = Double.valueOf((String)this.obj);
      return localDouble;
    }
    catch (Exception localException) {}
    return paramDouble;
  }
  
  public final float asFloat()
  {
    Float localFloat = asFloat(null);
    if (localFloat == null) {
      return 0.0F;
    }
    return localFloat.floatValue();
  }
  
  public final Float asFloat(Float paramFloat)
  {
    switch (d.ik[this.type.ordinal()])
    {
    default: 
      return paramFloat;
    case 2: 
      if (((Boolean)this.obj).booleanValue()) {}
      for (float f = 1.0F;; f = 0.0F) {
        return Float.valueOf(f);
      }
    case 3: 
      return Float.valueOf(((Number)this.obj).floatValue());
    }
    try
    {
      Float localFloat = Float.valueOf((String)this.obj);
      return localFloat;
    }
    catch (Exception localException) {}
    return paramFloat;
  }
  
  public final int asInt()
  {
    Integer localInteger = asInt(null);
    if (localInteger == null) {
      return 0;
    }
    return localInteger.intValue();
  }
  
  public final Integer asInt(Integer paramInteger)
  {
    switch (d.ik[this.type.ordinal()])
    {
    default: 
      return paramInteger;
    case 2: 
      if (((Boolean)this.obj).booleanValue()) {}
      for (int i = 1;; i = 0) {
        return Integer.valueOf(i);
      }
    case 3: 
      return Integer.valueOf(((Number)this.obj).intValue());
    }
    try
    {
      Integer localInteger = Integer.valueOf((String)this.obj);
      return localInteger;
    }
    catch (Exception localException) {}
    return paramInteger;
  }
  
  public final long asLong()
  {
    Long localLong = asLong(null);
    if (localLong == null) {
      return 0L;
    }
    return localLong.longValue();
  }
  
  public final Long asLong(Long paramLong)
  {
    switch (d.ik[this.type.ordinal()])
    {
    default: 
      return paramLong;
    case 2: 
      if (((Boolean)this.obj).booleanValue()) {}
      for (long l = 1L;; l = 0L) {
        return Long.valueOf(l);
      }
    case 3: 
      return Long.valueOf(((Number)this.obj).longValue());
    }
    try
    {
      Long localLong = Long.valueOf((String)this.obj);
      return localLong;
    }
    catch (Exception localException) {}
    return paramLong;
  }
  
  public final JSONObject asObject()
  {
    assertType(new Type[] { Type.OBJECT });
    return (JSONObject)this.obj;
  }
  
  public final String asStr()
  {
    return asStr(null);
  }
  
  public final String asStr(String paramString)
  {
    switch (d.ik[this.type.ordinal()])
    {
    default: 
      return paramString;
    }
    return this.obj.toString();
  }
  
  protected Object clone()
  {
    switch (d.ik[this.type.ordinal()])
    {
    default: 
      return null;
    case 1: 
      return new Json(null);
    case 2: 
      return new Json(Boolean.valueOf(((Boolean)this.obj).booleanValue()));
    case 3: 
      return new Json(Double.valueOf(((Number)this.obj).doubleValue()));
    case 4: 
      return new Json(new String((String)this.obj));
    case 5: 
      return parse(asArray().toString());
    }
    return parse(asObject().toString());
  }
  
  public final Json get(String paramString, Json paramJson)
  {
    assertType(new Type[] { Type.OBJECT });
    Json localJson = paramJson;
    if (!((JSONObject)this.obj).isNull(paramString))
    {
      paramString = ((JSONObject)this.obj).opt(paramString);
      localJson = paramJson;
      if (paramString != null) {
        localJson = new Json(paramString);
      }
    }
    return localJson;
  }
  
  public final Json getArray(String paramString)
  {
    return getArray(paramString, null);
  }
  
  public final Json getArray(String paramString, JSONArray paramJSONArray)
  {
    paramString = get(paramString, null);
    if ((paramString != null) && (paramString.type == Type.ARRAY)) {
      return paramString;
    }
    if (paramJSONArray != null) {
      return new Json(paramJSONArray);
    }
    return null;
  }
  
  public final Json getArrayAt(int paramInt)
  {
    return getArrayAt(paramInt, null);
  }
  
  public final Json getArrayAt(int paramInt, JSONArray paramJSONArray)
  {
    Json localJson = getAt(paramInt, null);
    if ((localJson != null) && (localJson.type == Type.ARRAY)) {
      return localJson;
    }
    if (paramJSONArray != null) {
      return new Json(paramJSONArray);
    }
    return null;
  }
  
  public final Json getAt(int paramInt, Json paramJson)
  {
    assertType(new Type[] { Type.ARRAY });
    Json localJson = paramJson;
    if (!((JSONArray)this.obj).isNull(paramInt))
    {
      Object localObject = ((JSONArray)this.obj).opt(paramInt);
      localJson = paramJson;
      if (localObject != null) {
        localJson = new Json(localObject);
      }
    }
    return localJson;
  }
  
  public final Boolean getBool(String paramString, Boolean paramBoolean)
  {
    Json localJson = get(paramString, null);
    paramString = paramBoolean;
    if (localJson != null) {
      paramString = localJson.asBool(paramBoolean);
    }
    return paramString;
  }
  
  public final boolean getBool(String paramString)
  {
    return getBool(paramString, Boolean.valueOf(false)).booleanValue();
  }
  
  public final Boolean getBoolAt(int paramInt, Boolean paramBoolean)
  {
    Json localJson = getAt(paramInt, null);
    Boolean localBoolean = paramBoolean;
    if (localJson != null) {
      localBoolean = localJson.asBool(paramBoolean);
    }
    return localBoolean;
  }
  
  public final boolean getBoolAt(int paramInt)
  {
    return getBoolAt(paramInt, Boolean.valueOf(false)).booleanValue();
  }
  
  public final double getDouble(String paramString)
  {
    return getDouble(paramString, Double.valueOf(0.0D)).doubleValue();
  }
  
  public final Double getDouble(String paramString, Double paramDouble)
  {
    Json localJson = get(paramString, null);
    paramString = paramDouble;
    if (localJson != null) {
      paramString = localJson.asDouble(paramDouble);
    }
    return paramString;
  }
  
  public final double getDoubleAt(int paramInt)
  {
    return getDoubleAt(paramInt, Double.valueOf(0.0D)).doubleValue();
  }
  
  public final Double getDoubleAt(int paramInt, Double paramDouble)
  {
    Json localJson = getAt(paramInt, null);
    Double localDouble = paramDouble;
    if (localJson != null) {
      localDouble = localJson.asDouble(paramDouble);
    }
    return localDouble;
  }
  
  public final float getFloat(String paramString)
  {
    return getFloat(paramString, Float.valueOf(0.0F)).floatValue();
  }
  
  public final Float getFloat(String paramString, Float paramFloat)
  {
    Json localJson = get(paramString, null);
    paramString = paramFloat;
    if (localJson != null) {
      paramString = localJson.asFloat(paramFloat);
    }
    return paramString;
  }
  
  public final float getFloatAt(int paramInt)
  {
    return getFloatAt(paramInt, Float.valueOf(0.0F)).floatValue();
  }
  
  public final Float getFloatAt(int paramInt, Float paramFloat)
  {
    Json localJson = getAt(paramInt, null);
    Float localFloat = paramFloat;
    if (localJson != null) {
      localFloat = localJson.asFloat(paramFloat);
    }
    return localFloat;
  }
  
  public final int getInt(String paramString)
  {
    return getInt(paramString, Integer.valueOf(0)).intValue();
  }
  
  public final Integer getInt(String paramString, Integer paramInteger)
  {
    Json localJson = get(paramString, null);
    paramString = paramInteger;
    if (localJson != null) {
      paramString = localJson.asInt(paramInteger);
    }
    return paramString;
  }
  
  public final int getIntAt(int paramInt)
  {
    return getIntAt(paramInt, Integer.valueOf(0)).intValue();
  }
  
  public final Integer getIntAt(int paramInt, Integer paramInteger)
  {
    Json localJson = getAt(paramInt, null);
    Integer localInteger = paramInteger;
    if (localJson != null) {
      localInteger = localJson.asInt(paramInteger);
    }
    return localInteger;
  }
  
  public final long getLong(String paramString)
  {
    return getLong(paramString, Long.valueOf(0L)).longValue();
  }
  
  public final Long getLong(String paramString, Long paramLong)
  {
    Json localJson = get(paramString, null);
    paramString = paramLong;
    if (localJson != null) {
      paramString = localJson.asLong(paramLong);
    }
    return paramString;
  }
  
  public final long getLongAt(int paramInt)
  {
    return getLongAt(paramInt, Long.valueOf(0L)).longValue();
  }
  
  public final Long getLongAt(int paramInt, Long paramLong)
  {
    Json localJson = getAt(paramInt, null);
    Long localLong = paramLong;
    if (localJson != null) {
      localLong = localJson.asLong(paramLong);
    }
    return localLong;
  }
  
  public final Json getObject(String paramString)
  {
    return getObject(paramString, null);
  }
  
  public final Json getObject(String paramString, JSONObject paramJSONObject)
  {
    paramString = get(paramString, null);
    if ((paramString != null) && (paramString.type == Type.OBJECT)) {
      return paramString;
    }
    if (paramJSONObject != null) {
      return new Json(paramJSONObject);
    }
    return null;
  }
  
  public final Json getObjectAt(int paramInt)
  {
    return getObjectAt(paramInt, null);
  }
  
  public final Json getObjectAt(int paramInt, JSONObject paramJSONObject)
  {
    Json localJson = getAt(paramInt, null);
    if ((localJson != null) && (localJson.type == Type.OBJECT)) {
      return localJson;
    }
    if (paramJSONObject != null) {
      return new Json(paramJSONObject);
    }
    return null;
  }
  
  public final String getStr(String paramString)
  {
    return getStr(paramString, null);
  }
  
  public final String getStr(String paramString1, String paramString2)
  {
    Json localJson = get(paramString1, null);
    paramString1 = paramString2;
    if (localJson != null) {
      paramString1 = localJson.asStr(paramString2);
    }
    return paramString1;
  }
  
  public final String getStrAt(int paramInt)
  {
    return getStrAt(paramInt, null);
  }
  
  public final String getStrAt(int paramInt, String paramString)
  {
    Json localJson = getAt(paramInt, null);
    String str = paramString;
    if (localJson != null) {
      str = localJson.asStr(paramString);
    }
    return str;
  }
  
  public final Iterator<Json> iterator()
  {
    assertType(new Type[] { Type.ARRAY });
    return new c(this);
  }
  
  public final Iterable<String> keys()
  {
    assertType(new Type[] { Type.OBJECT });
    return new a(this);
  }
  
  public int length()
  {
    assertType(new Type[] { Type.ARRAY, Type.OBJECT });
    if (this.type == Type.ARRAY) {
      return ((JSONArray)this.obj).length();
    }
    return ((JSONObject)this.obj).length();
  }
  
  public final Json put(String paramString, Object paramObject)
  {
    assertType(new Type[] { Type.OBJECT });
    Object localObject1;
    Object localObject2;
    if (!Util.empty(paramString))
    {
      localObject1 = paramObject;
      localObject2 = paramObject;
    }
    try
    {
      if ((paramObject instanceof Json))
      {
        localObject2 = paramObject;
        localObject1 = ((Json)paramObject).obj;
      }
      localObject2 = localObject1;
      ((JSONObject)this.obj).putOpt(paramString, localObject1);
      return this;
    }
    catch (Exception paramString)
    {
      throw new IllegalArgumentException("" + localObject2);
    }
  }
  
  public final Json putAt(int paramInt, Object paramObject)
  {
    assertType(new Type[] { Type.ARRAY });
    int i = paramInt;
    if (paramInt < 0) {
      i = paramInt + ((JSONArray)this.obj).length();
    }
    Object localObject1 = paramObject;
    Object localObject2 = paramObject;
    try
    {
      if ((paramObject instanceof Json))
      {
        localObject2 = paramObject;
        localObject1 = ((Json)paramObject).obj;
      }
      localObject2 = localObject1;
      ((JSONArray)this.obj).put(i, localObject1);
      return this;
    }
    catch (Exception paramObject)
    {
      throw new IllegalArgumentException("index " + i + ", value " + localObject2);
    }
  }
  
  public void readExternal(ObjectInput paramObjectInput)
  {
    this.type = Type.valueOf(paramObjectInput.readUTF());
    paramObjectInput = paramObjectInput.readUTF();
    switch (d.ik[this.type.ordinal()])
    {
    default: 
      return;
    case 1: 
      this.obj = null;
      return;
    case 2: 
      this.obj = Boolean.valueOf(paramObjectInput);
      return;
    case 3: 
      this.obj = Double.valueOf(paramObjectInput);
      return;
    case 4: 
      this.obj = paramObjectInput;
      return;
    case 6: 
      try
      {
        this.obj = new JSONObject(paramObjectInput);
        return;
      }
      catch (Exception paramObjectInput)
      {
        return;
      }
    }
    try
    {
      this.obj = new JSONArray(paramObjectInput);
      return;
    }
    catch (Exception paramObjectInput) {}
  }
  
  public final <T> T[] toArray(Class<T> paramClass, T[] paramArrayOfT)
  {
    assertType(new Type[] { Type.ARRAY });
    int i = ((JSONArray)this.obj).length();
    if ((paramArrayOfT == null) || (paramArrayOfT.length < i)) {
      paramArrayOfT = Array.newInstance(paramClass, i);
    }
    while (paramClass == String.class) {
      for (;;)
      {
        i -= 1;
        if (i < 0) {
          break;
        }
        Array.set(paramArrayOfT, i, getStrAt(i));
      }
    }
    if (paramClass == Integer.class) {
      for (;;)
      {
        i -= 1;
        if (i < 0) {
          break;
        }
        Array.set(paramArrayOfT, i, getIntAt(i, Integer.valueOf(0)));
      }
    }
    if (paramClass == Long.class) {
      for (;;)
      {
        i -= 1;
        if (i < 0) {
          break;
        }
        Array.set(paramArrayOfT, i, getLongAt(i, Long.valueOf(0L)));
      }
    }
    if (paramClass == Float.class) {
      for (;;)
      {
        i -= 1;
        if (i < 0) {
          break;
        }
        Array.set(paramArrayOfT, i, getFloatAt(i, Float.valueOf(0.0F)));
      }
    }
    if (paramClass == Double.class) {
      for (;;)
      {
        i -= 1;
        if (i < 0) {
          break;
        }
        Array.set(paramArrayOfT, i, getDoubleAt(i, Double.valueOf(0.0D)));
      }
    }
    if (paramClass == Boolean.class) {
      for (;;)
      {
        i -= 1;
        if (i < 0) {
          break;
        }
        Array.set(paramArrayOfT, i, getBoolAt(i, Boolean.valueOf(false)));
      }
    }
    if (paramClass == JSONObject.class) {
      for (;;)
      {
        i -= 1;
        if (i < 0) {
          break;
        }
        Array.set(paramArrayOfT, i, getObjectAt(i));
      }
    }
    if (paramClass == JSONArray.class) {
      for (;;)
      {
        i -= 1;
        if (i < 0) {
          break;
        }
        Array.set(paramArrayOfT, i, getArrayAt(i));
      }
    }
    return (Object[])paramArrayOfT;
  }
  
  public final String toString()
  {
    return "type=" + this.type + ",obj=" + this.obj;
  }
  
  public void writeExternal(ObjectOutput paramObjectOutput)
  {
    paramObjectOutput.writeUTF(this.type.toString());
    paramObjectOutput.writeUTF(this.obj.toString());
  }
}
