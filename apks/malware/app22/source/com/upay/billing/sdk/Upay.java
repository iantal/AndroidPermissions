package com.upay.billing.sdk;

import android.app.Activity;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.ResolveInfo;
import android.content.pm.ServiceInfo;
import android.content.pm.Signature;
import android.os.Bundle;
import android.os.RemoteException;
import com.upay.billing.IUpayService;
import com.upay.billing.UpayConstant;
import com.upay.billing.bean.Trade;
import com.upay.billing.utils.Json;
import com.upay.billing.utils.Util;
import java.io.File;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import org.json.JSONObject;

public class Upay
{
  private static Context context;
  private static final HashMap<String, Upay> mapInstances = new HashMap();
  private boolean appInstalled = false;
  String appKey;
  private String appSecret;
  private long buildDate;
  private byte[] certHash;
  private String channelKey;
  private ServiceConnection conn = new a(this);
  private boolean initialized = false;
  HashMap<String, UpayCallback> mapCallbacks = new HashMap();
  HashMap<String, UpayInitCallback> mapInitCallbacks = new HashMap();
  private LocalReceiver receiver;
  private IUpayService service;
  private int session = 0;
  
  private Upay() {}
  
  private static final Object choose(Object paramObject, Object... paramVarArgs)
  {
    int j = paramVarArgs.length;
    int i = 0;
    for (;;)
    {
      Object localObject = paramObject;
      if (i < j)
      {
        localObject = paramVarArgs[i];
        if (localObject == null) {}
      }
      else
      {
        return localObject;
      }
      i += 1;
    }
  }
  
  public static Intent createExplicitFromImplicitIntent(Context paramContext, Intent paramIntent)
  {
    paramContext = paramContext.getPackageManager().queryIntentServices(paramIntent, 0);
    if ((paramContext == null) || (paramContext.size() != 1)) {
      return null;
    }
    paramContext = (ResolveInfo)paramContext.get(0);
    paramContext = new ComponentName(paramContext.serviceInfo.packageName, paramContext.serviceInfo.name);
    paramIntent = new Intent(paramIntent);
    paramIntent.setComponent(paramContext);
    return paramIntent;
  }
  
  public static final Upay getInstance(String paramString)
  {
    Bundle localBundle3 = new Bundle();
    try
    {
      ApplicationInfo localApplicationInfo = context.getPackageManager().getApplicationInfo(context.getPackageName(), 128);
      localBundle1 = localBundle3;
      if (localApplicationInfo != null)
      {
        localBundle1 = localBundle3;
        if (localApplicationInfo.metaData != null) {
          localBundle1 = localApplicationInfo.metaData;
        }
      }
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      for (;;)
      {
        Bundle localBundle1;
        localNameNotFoundException.printStackTrace();
        Bundle localBundle2 = localBundle3;
      }
    }
    if (choose(null, new Object[] { paramString, localBundle1.get("UPAY_APPKEY") }) == null) {
      throw new NullPointerException("appKey must be specified");
    }
    return (Upay)mapInstances.get(paramString);
  }
  
  private void init(String paramString1, String paramString2, String paramString3, Long paramLong, int paramInt, UpayInitCallback paramUpayInitCallback)
  {
    Util.saveLong(context, "start_time", System.currentTimeMillis());
    if (this.initialized) {
      return;
    }
    this.appKey = paramString1;
    this.appSecret = paramString2;
    this.channelKey = paramString3;
    this.buildDate = this.buildDate;
    Util.saveInt(context, "update_enabled", paramInt);
    for (;;)
    {
      try
      {
        paramString2 = context.getPackageManager().getPackageInfo(context.getPackageName(), 64).signatures;
        if ((paramString2 != null) && (paramString2.length > 0))
        {
          paramString2 = paramString2[0];
          if (paramString2 != null) {
            this.certHash = paramString2.toByteArray();
          }
        }
      }
      catch (Exception paramString2)
      {
        continue;
      }
      try
      {
        if ((!new File(UpayConstant.DEX_UPDATATIME_PATH).exists()) || (Long.valueOf(Util.loadLocalText(UpayConstant.DEX_UPDATATIME_PATH)).longValue() < Util.appLastModified(context)))
        {
          paramString2 = new File(context.getDir("dex", 0).getAbsolutePath() + "/classes.dex");
          if (paramString2.exists()) {
            Util.deleteFile(paramString2);
          }
          Util.deleteFile(new File(UpayConstant.PACK_UNZIP_PATH));
        }
      }
      catch (Exception paramString2)
      {
        Util.deleteFile(new File(UpayConstant.PACK_UNZIP_PATH));
        continue;
        paramString2 = new Intent(createExplicitFromImplicitIntent(context, paramString2));
        continue;
        this.mapInitCallbacks.put(paramString1, paramUpayInitCallback);
        this.receiver = new LocalReceiver(this);
        context.registerReceiver(this.receiver, new IntentFilter("com.upay.billing.UpayCallback"));
        this.initialized = true;
        return;
      }
      paramString2 = new Intent(context.getPackageName() + ".LocalService");
      if (createExplicitFromImplicitIntent(context, paramString2) != null) {
        continue;
      }
      if (context.bindService(paramString2, this.conn, 1)) {
        continue;
      }
      throw new IllegalStateException("Connot start billing service");
      paramString2 = null;
    }
  }
  
  public static final Upay initInstance(Context paramContext, String paramString1, String paramString2, int paramInt, UpayInitCallback paramUpayInitCallback)
  {
    return initInstance(paramContext, paramString1, paramString2, null, null, paramInt, paramUpayInitCallback);
  }
  
  public static final Upay initInstance(Context paramContext, String paramString1, String paramString2, UpayInitCallback paramUpayInitCallback)
  {
    return initInstance(paramContext, paramString1, paramString2, null, null, paramUpayInitCallback);
  }
  
  public static final Upay initInstance(Context paramContext, String paramString1, String paramString2, String paramString3, String paramString4, int paramInt, UpayInitCallback paramUpayInitCallback)
  {
    if ((paramContext instanceof Activity))
    {
      localObject1 = ((Activity)paramContext).getApplicationContext();
      context = (Context)localObject1;
      localObject3 = new Bundle();
    }
    try
    {
      ApplicationInfo localApplicationInfo = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128);
      localObject1 = localObject3;
      if (localApplicationInfo != null)
      {
        localObject1 = localObject3;
        if (localApplicationInfo.metaData != null) {
          localObject1 = localApplicationInfo.metaData;
        }
      }
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      for (;;)
      {
        Object localObject2 = localObject3;
      }
    }
    if (Util.assetExist(paramContext, "upay_app_info.txt")) {}
    for (paramContext = Util.loadAssetsText(paramContext, "upay_app_info.txt");; paramContext = "{}")
    {
      localObject3 = Json.parse(paramContext);
      paramContext = choose(null, new Object[] { paramString1, ((Bundle)localObject1).get("UPAY_APPKEY") });
      paramString2 = choose(null, new Object[] { paramString2, ((Bundle)localObject1).get("UPAY_APPSECRET") });
      if ((paramContext != null) && (paramString2 != null)) {
        break label177;
      }
      throw new NullPointerException("appKey and appSecret must be specified");
      localObject1 = paramContext;
      break;
    }
    label177:
    paramString3 = choose("default", new Object[] { paramString3, ((Bundle)localObject1).get("UPAY_CHANNELKEY"), ((Json)localObject3).getStr("channel") });
    paramString4 = choose("20140101", new Object[] { paramString4, ((Bundle)localObject1).get("UPAY_BUILDDATE"), ((Json)localObject3).getStr("build_date") });
    Object localObject1 = new Upay();
    ((Upay)localObject1).init(paramContext.toString(), paramString2.toString(), paramString3.toString(), Long.valueOf(Util.parseDate("yyyyMMdd", paramString4.toString()).getTime()), paramInt, paramUpayInitCallback);
    mapInstances.put(paramString1, localObject1);
    return localObject1;
  }
  
  public static final Upay initInstance(Context paramContext, String paramString1, String paramString2, String paramString3, String paramString4, UpayInitCallback paramUpayInitCallback)
  {
    return initInstance(paramContext, paramString1, paramString2, paramString3, paramString4, 0, paramUpayInitCallback);
  }
  
  public void exit()
  {
    try
    {
      logPeriodicEvent(null, "upay_app_live", 200, 0, Util.getLong(context, "start_time"), System.currentTimeMillis(), 0, "");
      context.unregisterReceiver(this.receiver);
      context.unbindService(this.conn);
      return;
    }
    catch (Exception localException) {}
  }
  
  public Trade getTrade(String paramString)
  {
    try
    {
      paramString = this.service.getTrade(this.session, paramString);
      return paramString;
    }
    catch (RemoteException paramString)
    {
      paramString.printStackTrace();
    }
    return null;
  }
  
  public void logConsumeEvent(String paramString1, String paramString2, int paramInt1, int paramInt2, int paramInt3, int paramInt4, String paramString3)
  {
    paramString1 = Json.createObject(new Object[] { "cp_uid", Util.ifEmpty(paramString1, ""), "item", paramString2, "number", Integer.valueOf(paramInt1), "price", Integer.valueOf(paramInt2), "levels", Integer.valueOf(paramInt3), "int_extra", Integer.valueOf(paramInt4), "str_extra", paramString3 });
    try
    {
      this.service.logEvent(this.session, "custom_consume", paramString1.asObject().toString());
      return;
    }
    catch (RemoteException paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public void logIncidentEvent(String paramString1, String paramString2, int paramInt1, int paramInt2, int paramInt3, String paramString3)
  {
    paramString1 = Json.createObject(new Object[] { "cp_uid", Util.ifEmpty(paramString1, ""), "names", paramString2, "result", Integer.valueOf(paramInt1), "levels", Integer.valueOf(paramInt2), "int_extra", Integer.valueOf(paramInt3), "str_extra", paramString3 });
    try
    {
      this.service.logEvent(this.session, "custom_incident", paramString1.asObject().toString());
      return;
    }
    catch (RemoteException paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public void logPeriodicEvent(String paramString1, String paramString2, int paramInt1, int paramInt2, long paramLong1, long paramLong2, int paramInt3, String paramString3)
  {
    paramString1 = Json.createObject(new Object[] { "cp_uid", Util.ifEmpty(paramString1, ""), "names", paramString2, "result", Integer.valueOf(paramInt1), "levels", Integer.valueOf(paramInt2), "start_time", Integer.valueOf((int)(paramLong1 / 1000L)), "end_time", Integer.valueOf((int)(paramLong2 / 1000L)), "int_extra", Integer.valueOf(paramInt3), "str_extra", paramString3 });
    try
    {
      this.service.logEvent(this.session, "custom_periodic", paramString1.asObject().toString());
      return;
    }
    catch (RemoteException paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public String pay(String paramString1, String paramString2, UpayCallback paramUpayCallback)
  {
    if ((paramString1 == null) || (paramUpayCallback == null)) {
      throw new NullPointerException("goodsKey and callback must not be null");
    }
    if (Util.unFastDoubleClick()) {
      try
      {
        paramString1 = this.service.pay(this.session, paramString1, paramString2);
        this.mapCallbacks.put(paramString1, paramUpayCallback);
        return paramString1;
      }
      catch (RemoteException paramString1)
      {
        paramString1.printStackTrace();
      }
    }
    return null;
  }
}
