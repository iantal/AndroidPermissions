package net.tsz.afinal.b;

import java.lang.reflect.Array;

public class d
{
  static
  {
    if (!d.class.desiredAssertionStatus()) {}
    for (boolean bool = true;; bool = false)
    {
      a = bool;
      return;
    }
  }
  
  private d() {}
  
  public static <T> T[] a(T[] paramArrayOfT, int paramInt)
  {
    if (paramArrayOfT == null) {
      throw new NullPointerException();
    }
    if (paramInt < 0) {
      throw new NegativeArraySizeException();
    }
    return a(paramArrayOfT, 0, paramInt);
  }
  
  public static <T> T[] a(T[] paramArrayOfT, int paramInt1, int paramInt2)
  {
    int i = paramArrayOfT.length;
    if (paramInt1 > paramInt2) {
      throw new IllegalArgumentException();
    }
    if ((paramInt1 < 0) || (paramInt1 > i)) {
      throw new ArrayIndexOutOfBoundsException();
    }
    paramInt2 -= paramInt1;
    i = Math.min(paramInt2, i - paramInt1);
    Object[] arrayOfObject = (Object[])Array.newInstance(paramArrayOfT.getClass().getComponentType(), paramInt2);
    System.arraycopy(paramArrayOfT, paramInt1, arrayOfObject, 0, i);
    return arrayOfObject;
  }
}
