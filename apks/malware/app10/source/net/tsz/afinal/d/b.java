package net.tsz.afinal.d;

import java.io.UnsupportedEncodingException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import org.apache.http.HttpEntity;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.message.BasicNameValuePair;

public class b
{
  private static String c = "UTF-8";
  protected ConcurrentHashMap<String, String> a;
  protected ConcurrentHashMap<String, c> b;
  
  public b()
  {
    d();
  }
  
  private void d()
  {
    this.a = new ConcurrentHashMap();
    this.b = new ConcurrentHashMap();
  }
  
  public HttpEntity a()
  {
    Object localObject;
    if (!this.b.isEmpty())
    {
      localObject = new e();
      Iterator localIterator = this.a.entrySet().iterator();
      int j;
      int i;
      for (;;)
      {
        if (!localIterator.hasNext())
        {
          j = this.b.entrySet().size();
          localIterator = this.b.entrySet().iterator();
          i = 0;
          if (localIterator.hasNext()) {
            break;
          }
          return localObject;
        }
        localEntry = (Map.Entry)localIterator.next();
        ((e)localObject).a((String)localEntry.getKey(), (String)localEntry.getValue());
      }
      Map.Entry localEntry = (Map.Entry)localIterator.next();
      c localC = (c)localEntry.getValue();
      boolean bool;
      if (localC.a != null)
      {
        if (i != j - 1) {
          break label212;
        }
        bool = true;
        label166:
        if (localC.c == null) {
          break label217;
        }
        ((e)localObject).a((String)localEntry.getKey(), localC.a(), localC.a, localC.c, bool);
      }
      for (;;)
      {
        i += 1;
        break;
        label212:
        bool = false;
        break label166;
        label217:
        ((e)localObject).a((String)localEntry.getKey(), localC.a(), localC.a, bool);
      }
    }
    try
    {
      localObject = new UrlEncodedFormEntity(b(), c);
      return localObject;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException)
    {
      localUnsupportedEncodingException.printStackTrace();
    }
    return null;
  }
  
  public void a(String paramString1, String paramString2)
  {
    if ((paramString1 != null) && (paramString2 != null)) {
      this.a.put(paramString1, paramString2);
    }
  }
  
  protected List<BasicNameValuePair> b()
  {
    LinkedList localLinkedList = new LinkedList();
    Iterator localIterator = this.a.entrySet().iterator();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return localLinkedList;
      }
      Map.Entry localEntry = (Map.Entry)localIterator.next();
      localLinkedList.add(new BasicNameValuePair((String)localEntry.getKey(), (String)localEntry.getValue()));
    }
  }
  
  public String c()
  {
    return URLEncodedUtils.format(b(), c);
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    Iterator localIterator = this.a.entrySet().iterator();
    if (!localIterator.hasNext()) {
      localIterator = this.b.entrySet().iterator();
    }
    for (;;)
    {
      if (!localIterator.hasNext())
      {
        return localStringBuilder.toString();
        localEntry = (Map.Entry)localIterator.next();
        if (localStringBuilder.length() > 0) {
          localStringBuilder.append("&");
        }
        localStringBuilder.append((String)localEntry.getKey());
        localStringBuilder.append("=");
        localStringBuilder.append((String)localEntry.getValue());
        break;
      }
      Map.Entry localEntry = (Map.Entry)localIterator.next();
      if (localStringBuilder.length() > 0) {
        localStringBuilder.append("&");
      }
      localStringBuilder.append((String)localEntry.getKey());
      localStringBuilder.append("=");
      localStringBuilder.append("FILE");
    }
  }
}
