package net.tsz.afinal.d;

import android.os.SystemClock;
import java.io.File;
import java.io.IOException;
import java.net.UnknownHostException;
import net.tsz.afinal.b.e;
import net.tsz.afinal.d.a.b;
import net.tsz.afinal.d.a.c;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpRequestRetryHandler;
import org.apache.http.client.HttpResponseException;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.AbstractHttpClient;
import org.apache.http.protocol.HttpContext;

public class d<T>
  extends e<Object, Object, Object>
  implements net.tsz.afinal.d.a.a
{
  private final AbstractHttpClient d;
  private final HttpContext e;
  private final c f = new c();
  private final b g = new b();
  private final a<T> h;
  private int i = 0;
  private String j = null;
  private boolean k = false;
  private String l;
  private long m;
  
  public d(AbstractHttpClient paramAbstractHttpClient, HttpContext paramHttpContext, a<T> paramA, String paramString)
  {
    this.d = paramAbstractHttpClient;
    this.e = paramHttpContext;
    this.h = paramA;
    this.l = paramString;
  }
  
  private void a(HttpResponse paramHttpResponse)
  {
    StatusLine localStatusLine = paramHttpResponse.getStatusLine();
    Object localObject;
    if (localStatusLine.getStatusCode() >= 300)
    {
      localObject = "response status error code:" + localStatusLine.getStatusCode();
      paramHttpResponse = (HttpResponse)localObject;
      if (localStatusLine.getStatusCode() == 416)
      {
        paramHttpResponse = (HttpResponse)localObject;
        if (this.k) {
          paramHttpResponse = localObject + " \n maybe you have download complete.";
        }
      }
      c(new Object[] { Integer.valueOf(3), new HttpResponseException(localStatusLine.getStatusCode(), localStatusLine.getReasonPhrase()), Integer.valueOf(localStatusLine.getStatusCode()), paramHttpResponse });
      return;
    }
    for (;;)
    {
      try
      {
        localObject = paramHttpResponse.getEntity();
        paramHttpResponse = null;
        if (localObject != null)
        {
          this.m = SystemClock.uptimeMillis();
          if (this.j != null) {
            paramHttpResponse = this.g.a((HttpEntity)localObject, this, this.j, this.k);
          }
        }
        else
        {
          c(new Object[] { Integer.valueOf(4), paramHttpResponse });
          return;
        }
      }
      catch (IOException paramHttpResponse)
      {
        c(new Object[] { Integer.valueOf(3), paramHttpResponse, Integer.valueOf(0), paramHttpResponse.getMessage() });
        return;
      }
      paramHttpResponse = this.f.a((HttpEntity)localObject, this, this.l);
    }
  }
  
  private void a(HttpUriRequest paramHttpUriRequest)
  {
    Object localObject;
    if ((this.k) && (this.j != null))
    {
      localObject = new File(this.j);
      if ((!((File)localObject).isFile()) || (!((File)localObject).exists())) {
        break label347;
      }
    }
    label347:
    for (long l1 = ((File)localObject).length();; l1 = 0L)
    {
      if (l1 > 0L) {
        paramHttpUriRequest.setHeader("RANGE", "bytes=" + l1 + "-");
      }
      localObject = null;
      HttpRequestRetryHandler localHttpRequestRetryHandler = this.d.getHttpRequestRetryHandler();
      boolean bool = true;
      for (;;)
      {
        if (!bool)
        {
          if (localObject == null) {
            break;
          }
          throw ((Throwable)localObject);
        }
        try
        {
          if (!c())
          {
            localObject = this.d.execute(paramHttpUriRequest, this.e);
            if (!c()) {
              a((HttpResponse)localObject);
            }
          }
          return;
        }
        catch (UnknownHostException paramHttpUriRequest)
        {
          c(new Object[] { Integer.valueOf(3), paramHttpUriRequest, Integer.valueOf(0), "unknownHostException：can't resolve host" });
          return;
        }
        catch (IOException localIOException1)
        {
          n = this.i + 1;
          this.i = n;
          bool = localHttpRequestRetryHandler.retryRequest(localIOException1, n, this.e);
        }
        catch (NullPointerException localNullPointerException)
        {
          IOException localIOException2 = new IOException("NPE in HttpClient" + localNullPointerException.getMessage());
          n = this.i + 1;
          this.i = n;
          bool = localHttpRequestRetryHandler.retryRequest(localIOException2, n, this.e);
        }
        catch (Exception localException)
        {
          IOException localIOException3 = new IOException("Exception" + localException.getMessage());
          int n = this.i + 1;
          this.i = n;
          bool = localHttpRequestRetryHandler.retryRequest(localIOException3, n, this.e);
        }
      }
      throw new IOException("未知网络错误");
    }
  }
  
  protected Object a(Object... paramVarArgs)
  {
    if ((paramVarArgs != null) && (paramVarArgs.length == 3))
    {
      this.j = String.valueOf(paramVarArgs[1]);
      this.k = ((Boolean)paramVarArgs[2]).booleanValue();
    }
    try
    {
      c(new Object[] { Integer.valueOf(1) });
      a((HttpUriRequest)paramVarArgs[0]);
      return null;
    }
    catch (IOException paramVarArgs)
    {
      for (;;)
      {
        c(new Object[] { Integer.valueOf(3), paramVarArgs, Integer.valueOf(0), paramVarArgs.getMessage() });
      }
    }
  }
  
  public void a(long paramLong1, long paramLong2, boolean paramBoolean)
  {
    if ((this.h != null) && (this.h.isProgress()))
    {
      if (!paramBoolean) {
        break label52;
      }
      c(new Object[] { Integer.valueOf(2), Long.valueOf(paramLong1), Long.valueOf(paramLong2) });
    }
    label52:
    long l1;
    do
    {
      return;
      l1 = SystemClock.uptimeMillis();
    } while (l1 - this.m < this.h.getRate());
    this.m = l1;
    c(new Object[] { Integer.valueOf(2), Long.valueOf(paramLong1), Long.valueOf(paramLong2) });
  }
  
  protected void b(Object... paramVarArgs)
  {
    switch (Integer.valueOf(String.valueOf(paramVarArgs[0])).intValue())
    {
    }
    for (;;)
    {
      super.b(paramVarArgs);
      return;
      if (this.h != null)
      {
        this.h.onStart();
        continue;
        if (this.h != null)
        {
          this.h.onLoading(Long.valueOf(String.valueOf(paramVarArgs[1])).longValue(), Long.valueOf(String.valueOf(paramVarArgs[2])).longValue());
          continue;
          if (this.h != null)
          {
            this.h.onFailure((Throwable)paramVarArgs[1], ((Integer)paramVarArgs[2]).intValue(), (String)paramVarArgs[3]);
            continue;
            if (this.h != null) {
              this.h.onSuccess(paramVarArgs[1]);
            }
          }
        }
      }
    }
  }
}
