package net.tsz.afinal.a.a;

import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnLongClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import java.lang.reflect.Method;
import net.tsz.afinal.c.b;

public class a
  implements View.OnClickListener, View.OnLongClickListener, AdapterView.OnItemClickListener, AdapterView.OnItemLongClickListener, AdapterView.OnItemSelectedListener
{
  private Object a;
  private String b;
  private String c;
  private String d;
  private String e;
  private String f;
  private String g;
  
  public a(Object paramObject)
  {
    this.a = paramObject;
  }
  
  private static Object a(Object paramObject, String paramString, Object... paramVarArgs)
  {
    if (paramObject == null) {
      return null;
    }
    try
    {
      Method localMethod = paramObject.getClass().getDeclaredMethod(paramString, new Class[] { View.class });
      if (localMethod != null) {
        return localMethod.invoke(paramObject, paramVarArgs);
      }
      throw new b("no such method:" + paramString);
    }
    catch (Exception paramObject)
    {
      paramObject.printStackTrace();
    }
    return null;
  }
  
  private static boolean b(Object paramObject, String paramString, Object... paramVarArgs)
  {
    if (paramObject == null) {}
    for (;;)
    {
      return false;
      try
      {
        Method localMethod = paramObject.getClass().getDeclaredMethod(paramString, new Class[] { View.class });
        if (localMethod != null)
        {
          paramObject = localMethod.invoke(paramObject, paramVarArgs);
          if (paramObject != null) {
            return Boolean.valueOf(paramObject.toString()).booleanValue();
          }
        }
        else
        {
          throw new b("no such method:" + paramString);
        }
      }
      catch (Exception paramObject)
      {
        paramObject.printStackTrace();
      }
    }
    return false;
  }
  
  private static Object c(Object paramObject, String paramString, Object... paramVarArgs)
  {
    if (paramObject == null) {
      return null;
    }
    try
    {
      Method localMethod = paramObject.getClass().getDeclaredMethod(paramString, new Class[] { AdapterView.class, View.class, Integer.TYPE, Long.TYPE });
      if (localMethod != null) {
        return localMethod.invoke(paramObject, paramVarArgs);
      }
      throw new b("no such method:" + paramString);
    }
    catch (Exception paramObject)
    {
      paramObject.printStackTrace();
    }
    return null;
  }
  
  private static boolean d(Object paramObject, String paramString, Object... paramVarArgs)
  {
    if (paramObject == null) {
      throw new b("invokeItemLongClickMethod: handler is null :");
    }
    try
    {
      Method localMethod = paramObject.getClass().getDeclaredMethod(paramString, new Class[] { AdapterView.class, View.class, Integer.TYPE, Long.TYPE });
      if (localMethod != null)
      {
        paramObject = localMethod.invoke(paramObject, paramVarArgs);
        if (paramObject == null) {}
        for (boolean bool = false;; bool = Boolean.valueOf(paramObject.toString()).booleanValue()) {
          return Boolean.valueOf(bool).booleanValue();
        }
      }
      throw new b("no such method:" + paramString);
    }
    catch (Exception paramObject)
    {
      paramObject.printStackTrace();
    }
    return false;
  }
  
  private static Object e(Object paramObject, String paramString, Object... paramVarArgs)
  {
    if (paramObject == null) {
      return null;
    }
    try
    {
      Method localMethod = paramObject.getClass().getDeclaredMethod(paramString, new Class[] { AdapterView.class, View.class, Integer.TYPE, Long.TYPE });
      if (localMethod != null) {
        return localMethod.invoke(paramObject, paramVarArgs);
      }
      throw new b("no such method:" + paramString);
    }
    catch (Exception paramObject)
    {
      paramObject.printStackTrace();
    }
    return null;
  }
  
  private static Object f(Object paramObject, String paramString, Object... paramVarArgs)
  {
    if (paramObject == null) {
      return null;
    }
    try
    {
      Method localMethod = paramObject.getClass().getDeclaredMethod(paramString, new Class[] { AdapterView.class });
      if (localMethod != null) {
        return localMethod.invoke(paramObject, paramVarArgs);
      }
      throw new b("no such method:" + paramString);
    }
    catch (Exception paramObject)
    {
      paramObject.printStackTrace();
    }
    return null;
  }
  
  public a a(String paramString)
  {
    this.b = paramString;
    return this;
  }
  
  public a b(String paramString)
  {
    this.c = paramString;
    return this;
  }
  
  public a c(String paramString)
  {
    this.g = paramString;
    return this;
  }
  
  public a d(String paramString)
  {
    this.d = paramString;
    return this;
  }
  
  public a e(String paramString)
  {
    this.e = paramString;
    return this;
  }
  
  public a f(String paramString)
  {
    this.f = paramString;
    return this;
  }
  
  public void onClick(View paramView)
  {
    a(this.a, this.b, new Object[] { paramView });
  }
  
  public void onItemClick(AdapterView<?> paramAdapterView, View paramView, int paramInt, long paramLong)
  {
    c(this.a, this.d, new Object[] { paramAdapterView, paramView, Integer.valueOf(paramInt), Long.valueOf(paramLong) });
  }
  
  public boolean onItemLongClick(AdapterView<?> paramAdapterView, View paramView, int paramInt, long paramLong)
  {
    return d(this.a, this.g, new Object[] { paramAdapterView, paramView, Integer.valueOf(paramInt), Long.valueOf(paramLong) });
  }
  
  public void onItemSelected(AdapterView<?> paramAdapterView, View paramView, int paramInt, long paramLong)
  {
    e(this.a, this.e, new Object[] { paramAdapterView, paramView, Integer.valueOf(paramInt), Long.valueOf(paramLong) });
  }
  
  public boolean onLongClick(View paramView)
  {
    return b(this.a, this.c, new Object[] { paramView });
  }
  
  public void onNothingSelected(AdapterView<?> paramAdapterView)
  {
    f(this.a, this.f, new Object[] { paramAdapterView });
  }
}
