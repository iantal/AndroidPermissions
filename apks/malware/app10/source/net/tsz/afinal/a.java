package net.tsz.afinal;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import net.tsz.afinal.d.f;
import org.apache.http.HttpEntity;
import org.apache.http.HttpVersion;
import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.params.ConnManagerParams;
import org.apache.http.conn.params.ConnPerRouteBean;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;
import org.apache.http.protocol.SyncBasicHttpContext;

public class a
{
  private static int a = 10;
  private static int b = 10000;
  private static int c = 5;
  private static int d = 3;
  private static final ThreadFactory i = new b();
  private static final Executor j = Executors.newFixedThreadPool(d, i);
  private final DefaultHttpClient e;
  private final HttpContext f;
  private String g = "utf-8";
  private final Map<String, String> h;
  
  public a()
  {
    BasicHttpParams localBasicHttpParams = new BasicHttpParams();
    ConnManagerParams.setTimeout(localBasicHttpParams, b);
    ConnManagerParams.setMaxConnectionsPerRoute(localBasicHttpParams, new ConnPerRouteBean(a));
    ConnManagerParams.setMaxTotalConnections(localBasicHttpParams, 10);
    HttpConnectionParams.setSoTimeout(localBasicHttpParams, b);
    HttpConnectionParams.setConnectionTimeout(localBasicHttpParams, b);
    HttpConnectionParams.setTcpNoDelay(localBasicHttpParams, true);
    HttpConnectionParams.setSocketBufferSize(localBasicHttpParams, 8192);
    HttpProtocolParams.setVersion(localBasicHttpParams, HttpVersion.HTTP_1_1);
    Object localObject = new SchemeRegistry();
    ((SchemeRegistry)localObject).register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
    ((SchemeRegistry)localObject).register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
    localObject = new ThreadSafeClientConnManager(localBasicHttpParams, (SchemeRegistry)localObject);
    this.f = new SyncBasicHttpContext(new BasicHttpContext());
    this.e = new DefaultHttpClient((ClientConnectionManager)localObject, localBasicHttpParams);
    this.e.addRequestInterceptor(new c(this));
    this.e.addResponseInterceptor(new d(this));
    this.e.setHttpRequestRetryHandler(new f(c));
    this.h = new HashMap();
  }
  
  public static String a(String paramString, net.tsz.afinal.d.b paramB)
  {
    String str = paramString;
    if (paramB != null)
    {
      paramB = paramB.c();
      str = paramString + "?" + paramB;
    }
    return str;
  }
  
  private HttpEntity a(net.tsz.afinal.d.b paramB)
  {
    HttpEntity localHttpEntity = null;
    if (paramB != null) {
      localHttpEntity = paramB.a();
    }
    return localHttpEntity;
  }
  
  private HttpEntityEnclosingRequestBase a(HttpEntityEnclosingRequestBase paramHttpEntityEnclosingRequestBase, HttpEntity paramHttpEntity)
  {
    if (paramHttpEntity != null) {
      paramHttpEntityEnclosingRequestBase.setEntity(paramHttpEntity);
    }
    return paramHttpEntityEnclosingRequestBase;
  }
  
  public void a(int paramInt)
  {
    HttpParams localHttpParams = this.e.getParams();
    ConnManagerParams.setTimeout(localHttpParams, paramInt);
    HttpConnectionParams.setSoTimeout(localHttpParams, paramInt);
    HttpConnectionParams.setConnectionTimeout(localHttpParams, paramInt);
  }
  
  public void a(String paramString, net.tsz.afinal.d.a<? extends Object> paramA)
  {
    b(paramString, null, paramA);
  }
  
  public void a(String paramString, net.tsz.afinal.d.b paramB, net.tsz.afinal.d.a<? extends Object> paramA)
  {
    a(this.e, this.f, new HttpGet(a(paramString, paramB)), null, paramA);
  }
  
  public void a(String paramString1, HttpEntity paramHttpEntity, String paramString2, net.tsz.afinal.d.a<? extends Object> paramA)
  {
    a(this.e, this.f, a(new HttpPost(paramString1), paramHttpEntity), paramString2, paramA);
  }
  
  protected <T> void a(DefaultHttpClient paramDefaultHttpClient, HttpContext paramHttpContext, HttpUriRequest paramHttpUriRequest, String paramString, net.tsz.afinal.d.a<T> paramA)
  {
    if (paramString != null) {
      paramHttpUriRequest.addHeader("Content-Type", paramString);
    }
    new net.tsz.afinal.d.d(paramDefaultHttpClient, paramHttpContext, paramA, this.g).a(j, new Object[] { paramHttpUriRequest });
  }
  
  public void b(String paramString, net.tsz.afinal.d.b paramB, net.tsz.afinal.d.a<? extends Object> paramA)
  {
    a(paramString, a(paramB), null, paramA);
  }
}
