package a.a;

import java.io.Serializable;
import java.util.Collections;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.Map;

public class u
  implements gq<u, aa>, Serializable, Cloneable
{
  public static final Map<aa, hf> c;
  private static final hy d = new hy("ActiveUser");
  private static final hq e = new hq("provider", (byte)11, (short)1);
  private static final hq f = new hq("puid", (byte)11, (short)2);
  private static final Map<Class<? extends ia>, ib> g = new HashMap();
  public String a;
  public String b;
  
  static
  {
    g.put(ic.class, new x(null));
    g.put(id.class, new z(null));
    EnumMap localEnumMap = new EnumMap(aa.class);
    localEnumMap.put(aa.a, new hf("provider", (byte)1, new hg((byte)11)));
    localEnumMap.put(aa.b, new hf("puid", (byte)1, new hg((byte)11)));
    c = Collections.unmodifiableMap(localEnumMap);
    hf.a(u.class, c);
  }
  
  public u() {}
  
  public u(String paramString1, String paramString2)
  {
    this();
    this.a = paramString1;
    this.b = paramString2;
  }
  
  public void a()
  {
    if (this.a == null) {
      throw new hu("Required field 'provider' was not present! Struct: " + toString());
    }
    if (this.b == null) {
      throw new hu("Required field 'puid' was not present! Struct: " + toString());
    }
  }
  
  public void a(ht paramHt)
  {
    ((ib)g.get(paramHt.y())).b().b(paramHt, this);
  }
  
  public void a(boolean paramBoolean)
  {
    if (!paramBoolean) {
      this.a = null;
    }
  }
  
  public void b(ht paramHt)
  {
    ((ib)g.get(paramHt.y())).b().a(paramHt, this);
  }
  
  public void b(boolean paramBoolean)
  {
    if (!paramBoolean) {
      this.b = null;
    }
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder("ActiveUser(");
    localStringBuilder.append("provider:");
    if (this.a == null)
    {
      localStringBuilder.append("null");
      localStringBuilder.append(", ");
      localStringBuilder.append("puid:");
      if (this.b != null) {
        break label83;
      }
      localStringBuilder.append("null");
    }
    for (;;)
    {
      localStringBuilder.append(")");
      return localStringBuilder.toString();
      localStringBuilder.append(this.a);
      break;
      label83:
      localStringBuilder.append(this.b);
    }
  }
}
