package a.a;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

class bn
  extends ic<bl>
{
  private bn() {}
  
  public void a(ht paramHt, bl paramBl)
  {
    paramHt.f();
    Object localObject = paramHt.h();
    if (((hq)localObject).b == 0)
    {
      paramHt.g();
      if (!paramBl.c()) {
        throw new hu("Required field 'ts' was not found in serialized data! Struct: " + toString());
      }
    }
    else
    {
      switch (((hq)localObject).c)
      {
      default: 
        hw.a(paramHt, ((hq)localObject).b);
      }
      for (;;)
      {
        paramHt.i();
        break;
        if (((hq)localObject).b == 11)
        {
          paramBl.a = paramHt.v();
          paramBl.a(true);
        }
        else
        {
          hw.a(paramHt, ((hq)localObject).b);
          continue;
          if (((hq)localObject).b == 13)
          {
            localObject = paramHt.j();
            paramBl.b = new HashMap(((hs)localObject).c * 2);
            int i = 0;
            while (i < ((hs)localObject).c)
            {
              String str = paramHt.v();
              em localEm = new em();
              localEm.a(paramHt);
              paramBl.b.put(str, localEm);
              i += 1;
            }
            paramHt.k();
            paramBl.b(true);
          }
          else
          {
            hw.a(paramHt, ((hq)localObject).b);
            continue;
            if (((hq)localObject).b == 10)
            {
              paramBl.c = paramHt.t();
              paramBl.c(true);
            }
            else
            {
              hw.a(paramHt, ((hq)localObject).b);
              continue;
              if (((hq)localObject).b == 8)
              {
                paramBl.d = paramHt.s();
                paramBl.d(true);
              }
              else
              {
                hw.a(paramHt, ((hq)localObject).b);
                continue;
                if (((hq)localObject).b == 10)
                {
                  paramBl.e = paramHt.t();
                  paramBl.e(true);
                }
                else
                {
                  hw.a(paramHt, ((hq)localObject).b);
                }
              }
            }
          }
        }
      }
    }
    paramBl.d();
  }
  
  public void b(ht paramHt, bl paramBl)
  {
    paramBl.d();
    paramHt.a(bl.e());
    if (paramBl.a != null)
    {
      paramHt.a(bl.f());
      paramHt.a(paramBl.a);
      paramHt.b();
    }
    if (paramBl.b != null)
    {
      paramHt.a(bl.g());
      paramHt.a(new hs((byte)11, (byte)12, paramBl.b.size()));
      Iterator localIterator = paramBl.b.entrySet().iterator();
      while (localIterator.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)localIterator.next();
        paramHt.a((String)localEntry.getKey());
        ((em)localEntry.getValue()).b(paramHt);
      }
      paramHt.d();
      paramHt.b();
    }
    if (paramBl.a())
    {
      paramHt.a(bl.h());
      paramHt.a(paramBl.c);
      paramHt.b();
    }
    if (paramBl.b())
    {
      paramHt.a(bl.i());
      paramHt.a(paramBl.d);
      paramHt.b();
    }
    paramHt.a(bl.j());
    paramHt.a(paramBl.e);
    paramHt.b();
    paramHt.c();
    paramHt.a();
  }
}
