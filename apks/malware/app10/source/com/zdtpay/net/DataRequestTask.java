package com.zdtpay.net;

import android.content.Context;
import com.a.a.a.b.a;
import com.zdtpay.ZDTPayParamInfo;
import com.zdtpay.ZDTPaySDK;
import com.zdtpay.ZTbie;
import com.zdtpay.tools.MyLogPrinter;
import com.zdtpay.tools.b;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.concurrent.TimeUnit;

public class DataRequestTask
{
  public static int a = 0;
  public static int b = 1;
  
  public static void a(Context paramContext, int paramInt, String paramString, HashMap paramHashMap, DataRequestTask.RequestCallBack paramRequestCallBack)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    com.a.a.a.d localD = com.zdtpay.f.a();
    HashMap localHashMap = paramHashMap;
    Object localObject;
    if (paramHashMap == null) {
      localObject = paramString;
    }
    for (;;)
    {
      try
      {
        localHashMap = new HashMap();
        localObject = paramString;
        if (b.d != null)
        {
          localObject = paramString;
          localHashMap.put(com.zdtpay.tools.c.i, b.d.getAppkey());
          localObject = paramString;
          localHashMap.put("appsecret", b.d.getAppsecret());
          localObject = paramString;
          localHashMap.put(com.zdtpay.tools.c.j, b.d.getMobile());
          localObject = paramString;
          localHashMap.put(com.zdtpay.tools.c.k, b.d.getMobile_type());
          localObject = paramString;
          localHashMap.put(com.zdtpay.tools.c.m, b.d.getProvince());
        }
        localObject = paramString;
        localHashMap.put(com.zdtpay.tools.c.e, com.zdtpay.tools.f.f(paramContext));
        localObject = paramString;
        localHashMap.put(com.zdtpay.tools.c.f, com.zdtpay.tools.f.d(paramContext));
        localObject = paramString;
        localHashMap.put(com.zdtpay.tools.c.g, com.zdtpay.tools.f.e(paramContext));
        localObject = paramString;
        localHashMap.put("version", ZDTPaySDK.getVersion());
        localObject = paramString;
        localHashMap.put("type", com.zdtpay.tools.f.i(paramContext));
        localObject = paramString;
        paramHashMap = localHashMap.keySet().iterator();
      }
      catch (Exception paramString)
      {
        String str;
        paramString.printStackTrace();
        if (!((String)localObject).contains("order.php")) {
          return;
        }
        ZTbie.a(paramContext, "15081435");
        return;
        localObject = paramString;
        localStringBuffer.append(str + "=" + URLEncoder.encode((String)localHashMap.get(str), "UTF-8") + "&");
        continue;
      }
      localObject = paramString;
      if (!paramHashMap.hasNext())
      {
        localObject = paramString;
        if (localStringBuffer.length() != 0)
        {
          localObject = paramString;
          localStringBuffer.deleteCharAt(localStringBuffer.length() - 1);
        }
        paramHashMap = paramString;
        localObject = paramString;
        if (paramInt == a)
        {
          localObject = paramString;
          paramHashMap = paramString + "?" + localStringBuffer.toString().trim();
        }
        localObject = paramHashMap;
        MyLogPrinter.b("get url type = " + paramInt + " url = " + paramHashMap);
        localObject = paramHashMap;
        paramString = new d(paramInt, paramHashMap, new c(paramRequestCallBack), localHashMap);
        localObject = paramHashMap;
        paramString.a(TimeUnit.SECONDS, 5);
        localObject = paramHashMap;
        localD.a(paramString);
        localObject = paramHashMap;
        if (!paramHashMap.contains("order.php")) {
          return;
        }
        localObject = paramHashMap;
        ZTbie.a(paramContext, "15081422");
        return;
      }
      localObject = paramString;
      str = ((String)paramHashMap.next()).trim();
      localObject = paramString;
      if (localHashMap.get(str) != null) {
        continue;
      }
      localObject = paramString;
      MyLogPrinter.b(str + "=null");
    }
  }
  
  public static void a(Context paramContext, int paramInt1, String paramString, HashMap paramHashMap, DataRequestTask.RequestCallBack paramRequestCallBack, int paramInt2)
  {
    new Thread(new f(paramHashMap, paramContext, paramInt1, paramString, new e(paramContext.getMainLooper(), paramRequestCallBack))).start();
  }
}
