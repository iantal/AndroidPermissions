package com.lp.sdk.yninterface.mmqiang;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.Vector;

public class MoyHttpClient
{
  private Map<String, String> mapRespHeader;
  
  public MoyHttpClient() {}
  
  public static MoyHttpClient getInstance()
  {
    return new MoyHttpClient();
  }
  
  public byte[] httpGet(String paramString)
  {
    return httpGet(paramString, null);
  }
  
  public byte[] httpGet(String paramString, Vector<String[]> paramVector)
  {
    for (;;)
    {
      try
      {
        paramString = (HttpURLConnection)new URL(paramString).openConnection();
        paramString.setConnectTimeout(30000);
        paramString.setReadTimeout(30000);
        if (paramVector != null)
        {
          i = 0;
          if (i < paramVector.size()) {}
        }
        else
        {
          int j = paramString.getResponseCode();
          if ((paramString.getHeaderFields() != null) && (paramString.getHeaderFields().size() > 0))
          {
            if (this.mapRespHeader != null) {
              break label220;
            }
            this.mapRespHeader = new HashMap();
            break label220;
            paramVector = paramString.getHeaderFieldKey(i);
            if (paramVector != null) {
              continue;
            }
          }
          if (j != 200) {
            break label218;
          }
          paramString = paramString.getInputStream();
          paramVector = new ByteArrayOutputStream();
          i = paramString.read();
          if (i != -1) {
            continue;
          }
          localObject = paramVector.toByteArray();
          paramVector.close();
          paramString.close();
          return localObject;
        }
        paramString.setRequestProperty(((String[])paramVector.get(i))[0], ((String[])paramVector.get(i))[1]);
        i += 1;
        continue;
        Object localObject = paramString.getHeaderField(paramVector);
        this.mapRespHeader.put(paramVector, localObject);
        i += 1;
        continue;
        paramVector.write(i);
        continue;
        return null;
      }
      catch (Exception paramString)
      {
        paramString.printStackTrace();
      }
      label218:
      label220:
      int i = 0;
    }
  }
  
  public byte[] httpPost(String paramString, byte[] paramArrayOfByte)
  {
    Vector localVector = new Vector();
    localVector.add(new String[] { "Content-Type", "application/x-www-form-urlencoded; charset=UTF-8" });
    return httpPost(paramString, paramArrayOfByte, localVector);
  }
  
  public byte[] httpPost(String paramString, byte[] paramArrayOfByte, Vector<String[]> paramVector)
  {
    for (;;)
    {
      try
      {
        paramString = (HttpURLConnection)new URL(paramString).openConnection();
        paramString.setRequestMethod("POST");
        paramString.setConnectTimeout(30000);
        paramString.setReadTimeout(30000);
        if (paramVector != null)
        {
          i = 0;
          if (i < paramVector.size()) {}
        }
        else
        {
          paramString.setDoOutput(true);
          paramString.getOutputStream().write(paramArrayOfByte);
          int j = paramString.getResponseCode();
          if ((paramString.getHeaderFields() != null) && (paramString.getHeaderFields().size() > 0))
          {
            if (this.mapRespHeader != null) {
              break label255;
            }
            this.mapRespHeader = new HashMap();
            break label255;
            paramArrayOfByte = paramString.getHeaderFieldKey(i);
            if (paramArrayOfByte != null) {
              continue;
            }
          }
          if (j != 200) {
            break label247;
          }
          paramString = paramString.getInputStream();
          paramArrayOfByte = new ByteArrayOutputStream();
          i = paramString.read();
          if (i != -1) {
            continue;
          }
          paramVector = paramArrayOfByte.toByteArray();
          paramArrayOfByte.close();
          paramString.close();
          return paramVector;
        }
        paramString.setRequestProperty(((String[])paramVector.get(i))[0], ((String[])paramVector.get(i))[1]);
        i += 1;
        continue;
        paramVector = paramString.getHeaderField(paramArrayOfByte);
        this.mapRespHeader.put(paramArrayOfByte, paramVector);
        i += 1;
        continue;
        paramArrayOfByte.write(i);
        continue;
        paramString.getHeaderFields();
      }
      catch (Exception paramString)
      {
        paramString.printStackTrace();
        return null;
      }
      label247:
      continue;
      label255:
      int i = 0;
    }
  }
  
  public void setProxy(String paramString, int paramInt)
  {
    System.getProperties().put("proxySet", "true");
    System.getProperties().put("proxyHost", paramString);
    System.getProperties().put("proxyPort", paramInt);
  }
}
