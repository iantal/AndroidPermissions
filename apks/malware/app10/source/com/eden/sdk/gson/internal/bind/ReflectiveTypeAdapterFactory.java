package com.eden.sdk.gson.internal.bind;

import com.eden.sdk.gson.FieldNamingStrategy;
import com.eden.sdk.gson.Gson;
import com.eden.sdk.gson.TypeAdapter;
import com.eden.sdk.gson.TypeAdapterFactory;
import com.eden.sdk.gson.annotations.JsonAdapter;
import com.eden.sdk.gson.annotations.SerializedName;
import com.eden.sdk.gson.internal..Gson.Types;
import com.eden.sdk.gson.internal.ConstructorConstructor;
import com.eden.sdk.gson.internal.Excluder;
import com.eden.sdk.gson.internal.Primitives;
import com.eden.sdk.gson.reflect.TypeToken;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.util.LinkedHashMap;
import java.util.Map;

public final class ReflectiveTypeAdapterFactory
  implements TypeAdapterFactory
{
  private final ConstructorConstructor constructorConstructor;
  private final Excluder excluder;
  private final FieldNamingStrategy fieldNamingPolicy;
  
  public ReflectiveTypeAdapterFactory(ConstructorConstructor paramConstructorConstructor, FieldNamingStrategy paramFieldNamingStrategy, Excluder paramExcluder)
  {
    this.constructorConstructor = paramConstructorConstructor;
    this.fieldNamingPolicy = paramFieldNamingStrategy;
    this.excluder = paramExcluder;
  }
  
  private ReflectiveTypeAdapterFactory.BoundField createBoundField(Gson paramGson, Field paramField, String paramString, TypeToken<?> paramTypeToken, boolean paramBoolean1, boolean paramBoolean2)
  {
    return new ReflectiveTypeAdapterFactory.1(this, paramString, paramBoolean1, paramBoolean2, paramGson, paramField, paramTypeToken, Primitives.isPrimitive(paramTypeToken.getRawType()));
  }
  
  static boolean excludeField(Field paramField, boolean paramBoolean, Excluder paramExcluder)
  {
    return (!paramExcluder.excludeClass(paramField.getType(), paramBoolean)) && (!paramExcluder.excludeField(paramField, paramBoolean));
  }
  
  private Map<String, ReflectiveTypeAdapterFactory.BoundField> getBoundFields(Gson paramGson, TypeToken<?> paramTypeToken, Class<?> paramClass)
  {
    LinkedHashMap localLinkedHashMap = new LinkedHashMap();
    if (paramClass.isInterface()) {
      return localLinkedHashMap;
    }
    Type localType1 = paramTypeToken.getType();
    if (paramClass == Object.class) {
      return localLinkedHashMap;
    }
    Field[] arrayOfField = paramClass.getDeclaredFields();
    int j = arrayOfField.length;
    int i = 0;
    for (;;)
    {
      if (i >= j)
      {
        paramTypeToken = TypeToken.get(.Gson.Types.resolve(paramTypeToken.getType(), paramClass, paramClass.getGenericSuperclass()));
        paramClass = paramTypeToken.getRawType();
        break;
      }
      Object localObject = arrayOfField[i];
      boolean bool1 = excludeField((Field)localObject, true);
      boolean bool2 = excludeField((Field)localObject, false);
      if ((bool1) || (bool2))
      {
        ((Field)localObject).setAccessible(true);
        Type localType2 = .Gson.Types.resolve(paramTypeToken.getType(), paramClass, ((Field)localObject).getGenericType());
        localObject = createBoundField(paramGson, (Field)localObject, getFieldName((Field)localObject), TypeToken.get(localType2), bool1, bool2);
        localObject = (ReflectiveTypeAdapterFactory.BoundField)localLinkedHashMap.put(((ReflectiveTypeAdapterFactory.BoundField)localObject).name, localObject);
        if (localObject != null) {
          throw new IllegalArgumentException(localType1 + " declares multiple JSON fields named " + ((ReflectiveTypeAdapterFactory.BoundField)localObject).name);
        }
      }
      i += 1;
    }
  }
  
  private TypeAdapter<?> getFieldAdapter(Gson paramGson, Field paramField, TypeToken<?> paramTypeToken)
  {
    paramField = (JsonAdapter)paramField.getAnnotation(JsonAdapter.class);
    if (paramField != null)
    {
      paramField = JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(this.constructorConstructor, paramGson, paramTypeToken, paramField);
      if (paramField != null) {
        return paramField;
      }
    }
    return paramGson.getAdapter(paramTypeToken);
  }
  
  static String getFieldName(FieldNamingStrategy paramFieldNamingStrategy, Field paramField)
  {
    SerializedName localSerializedName = (SerializedName)paramField.getAnnotation(SerializedName.class);
    if (localSerializedName == null) {
      return paramFieldNamingStrategy.translateName(paramField);
    }
    return localSerializedName.value();
  }
  
  private String getFieldName(Field paramField)
  {
    return getFieldName(this.fieldNamingPolicy, paramField);
  }
  
  public final <T> TypeAdapter<T> create(Gson paramGson, TypeToken<T> paramTypeToken)
  {
    Class localClass = paramTypeToken.getRawType();
    if (!Object.class.isAssignableFrom(localClass)) {
      return null;
    }
    return new ReflectiveTypeAdapterFactory.Adapter(this.constructorConstructor.get(paramTypeToken), getBoundFields(paramGson, paramTypeToken, localClass), null);
  }
  
  public final boolean excludeField(Field paramField, boolean paramBoolean)
  {
    return excludeField(paramField, paramBoolean, this.excluder);
  }
}
