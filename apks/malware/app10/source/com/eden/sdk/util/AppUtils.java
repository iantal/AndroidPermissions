package com.eden.sdk.util;

import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.database.Cursor;
import android.net.Uri;
import android.os.ParcelFileDescriptor;
import android.provider.Settings.Secure;
import android.telephony.SmsManager;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.Base64;
import android.util.Log;
import android.widget.Toast;
import com.eden.sdk.manager.NovaManager;
import com.eden.sdk.manager.a;
import com.eden.sdk.manager.c;
import com.eden.sdk.manager.f;
import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

public class AppUtils
{
  public static final String SMS_PORT = "10658423";
  private static final String TAG = "IOUtils";
  
  public AppUtils() {}
  
  public static String changeUrl(Context paramContext, String paramString)
  {
    Object localObject = paramString;
    if (c.a(paramContext))
    {
      paramContext = NovaManager.getTKInfo(Util.javaGetUserAgent(), f.f(paramContext));
      localObject = new StringBuffer();
      ((StringBuffer)localObject).append(paramString).append("&clientId=" + f.b()).append("&filterType=1&token=").append(paramContext);
      localObject = ((StringBuffer)localObject).toString();
    }
    return localObject;
  }
  
  public static boolean checkPhone(String paramString)
  {
    return Pattern.compile("^1((3[5-9]|5[012789]|8[278])\\d{8})|(134[0-8]\\d{7})$").matcher(paramString).matches();
  }
  
  public static void closeSilently(Cursor paramCursor)
  {
    if (paramCursor != null) {}
    try
    {
      paramCursor.close();
      return;
    }
    catch (Throwable paramCursor)
    {
      Log.w("IOUtils", "fail to close", paramCursor);
    }
  }
  
  public static void closeSilently(ParcelFileDescriptor paramParcelFileDescriptor)
  {
    if (paramParcelFileDescriptor == null) {
      return;
    }
    try
    {
      paramParcelFileDescriptor.close();
      return;
    }
    catch (Throwable paramParcelFileDescriptor)
    {
      Log.w("IOUtils", "fail to close", paramParcelFileDescriptor);
    }
  }
  
  public static void closeSilently(Closeable paramCloseable)
  {
    if (paramCloseable == null) {
      return;
    }
    try
    {
      paramCloseable.close();
      return;
    }
    catch (Throwable paramCloseable)
    {
      Log.w("IOUtils", "fail to close", paramCloseable);
    }
  }
  
  public static boolean deletefile(File paramFile)
  {
    int i = 0;
    if (!paramFile.exists()) {
      return false;
    }
    if (!paramFile.isDirectory()) {
      paramFile.delete();
    }
    while (!paramFile.isDirectory()) {
      return true;
    }
    paramFile = paramFile.listFiles();
    label37:
    if (i < paramFile.length)
    {
      if (paramFile[i].isDirectory()) {
        break label66;
      }
      paramFile[i].delete();
    }
    for (;;)
    {
      i += 1;
      break label37;
      break;
      label66:
      if (paramFile[i].isDirectory()) {
        deletefile(paramFile[i]);
      }
    }
  }
  
  public static String getAppName(Context paramContext)
  {
    PackageManager localPackageManager = paramContext.getPackageManager();
    try
    {
      paramContext = localPackageManager.getPackageInfo(paramContext.getPackageName(), 64).applicationInfo.loadLabel(localPackageManager).toString();
      return paramContext;
    }
    catch (Exception paramContext) {}
    return "";
  }
  
  public static String getAppVersion(Context paramContext)
  {
    PackageManager localPackageManager = paramContext.getPackageManager();
    try
    {
      paramContext = localPackageManager.getPackageInfo(paramContext.getPackageName(), 64).versionName;
      return paramContext;
    }
    catch (PackageManager.NameNotFoundException paramContext) {}
    return "";
  }
  
  public static String getDeviceId(Context paramContext)
  {
    Object localObject2 = (TelephonyManager)paramContext.getSystemService("phone");
    String str = ((TelephonyManager)localObject2).getDeviceId();
    if (!TextUtils.isEmpty(str)) {}
    do
    {
      do
      {
        return str;
        str = Settings.Secure.getString(paramContext.getContentResolver(), "android_id");
        if (!TextUtils.isEmpty(str)) {
          try
          {
            str = Base64.encodeToString(str.getBytes(), 0);
            boolean bool = TextUtils.isEmpty(str);
            if (!bool) {
              return str;
            }
          }
          catch (Exception localException) {}
        }
        if (((TelephonyManager)localObject2).getSimState() != 5) {
          break;
        }
        localObject2 = ((TelephonyManager)localObject2).getSubscriberId();
        localObject1 = localObject2;
      } while (!TextUtils.isEmpty((CharSequence)localObject2));
      localObject2 = a.a(paramContext).b();
      localObject1 = localObject2;
    } while (!TextUtils.isEmpty((CharSequence)localObject2));
    Object localObject1 = UUID.randomUUID().toString();
    a.a(paramContext).a((String)localObject1);
    return localObject1;
  }
  
  public static List<String> getHlsFileUrlList(String paramString1, String paramString2)
  {
    int i = 0;
    ArrayList localArrayList = new ArrayList();
    if (!TextUtils.isEmpty(paramString2))
    {
      paramString2 = paramString2.split("\n");
      int j = paramString2.length;
      if (i < j) {}
    }
    else
    {
      return localArrayList;
    }
    Object localObject = paramString2[i];
    if (!TextUtils.isEmpty((CharSequence)localObject))
    {
      localObject = ((String)localObject).trim();
      if (!((String)localObject).startsWith("#"))
      {
        if (!((String)localObject).startsWith("http")) {
          break label94;
        }
        localArrayList.add(localObject);
      }
    }
    for (;;)
    {
      i += 1;
      break;
      try
      {
        label94:
        localArrayList.add(paramString1.substring(0, paramString1.lastIndexOf("/") + 1) + (String)localObject);
      }
      catch (Exception localException) {}
    }
  }
  
  public static String getImsi(Context paramContext)
  {
    return Util.getIMSI(paramContext);
  }
  
  public static String getServerRoot(Context paramContext)
  {
    if (c.a(paramContext)) {
      return "http://c22.cmvideo.cn";
    }
    return "http://c2.cmvideo.cn";
  }
  
  public static String getSimOpCode(Context paramContext)
  {
    paramContext = (TelephonyManager)paramContext.getSystemService("phone");
    if ((paramContext != null) && (paramContext.getSimState() == 5) && (paramContext.getSubscriberId() != null) && (!"".equals(paramContext.getSubscriberId()))) {
      return paramContext.getSimOperator();
    }
    return null;
  }
  
  public static String getUserAgent()
  {
    return Util.javaGetUserAgent();
  }
  
  public static void installAPK(File paramFile, Context paramContext)
  {
    if ((paramFile != null) && (paramFile.exists())) {}
    try
    {
      Intent localIntent = new Intent("android.intent.action.VIEW");
      localIntent.setDataAndType(Uri.fromFile(paramFile), "application/vnd.android.package-archive");
      localIntent.setFlags(268435456);
      paramContext.startActivity(localIntent);
      return;
    }
    catch (Exception paramFile)
    {
      Toast.makeText(paramContext, "安装失败", 0).show();
    }
  }
  
  public static void installAPK(String paramString, Context paramContext)
  {
    File localFile;
    Intent localIntent;
    if (paramString != null)
    {
      localFile = new File(paramString);
      localIntent = new Intent("android.intent.action.VIEW");
      if (!paramString.endsWith(".upk")) {
        break label52;
      }
      localIntent.setDataAndType(Uri.fromFile(localFile), "application/vnd.oms.package-archive");
    }
    for (;;)
    {
      paramContext.startActivity(localIntent);
      return;
      label52:
      if (paramString.endsWith(".apk")) {
        localIntent.setDataAndType(Uri.fromFile(localFile), "application/vnd.android.package-archive");
      }
    }
  }
  
  public static boolean isAppInstalled(Context paramContext, String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {}
    for (;;)
    {
      return false;
      paramContext = paramContext.getPackageManager().getInstalledPackages(0);
      int i = 0;
      while (i < paramContext.size())
      {
        if (((PackageInfo)paramContext.get(i)).packageName.equalsIgnoreCase(paramString)) {
          return true;
        }
        i += 1;
      }
    }
  }
  
  public static void sendTokenSMS(Context paramContext, String paramString)
  {
    SmsManager.getDefault().sendTextMessage("10658423", null, "MVSUP3," + f.b() + "," + getImsi(paramContext) + "," + paramString, null, null);
  }
  
  public static void unZipFile(Context paramContext, File paramFile)
  {
    ZipFile localZipFile = new ZipFile(paramFile);
    Enumeration localEnumeration = localZipFile.entries();
    Object localObject2 = null;
    Object localObject3 = null;
    for (;;)
    {
      if (!localEnumeration.hasMoreElements())
      {
        localZipFile.close();
        return;
      }
      Object localObject1 = localObject3;
      try
      {
        Object localObject4 = (ZipEntry)localEnumeration.nextElement();
        localObject1 = localObject3;
        paramFile = localZipFile.getInputStream((ZipEntry)localObject4);
        localObject1 = paramFile;
        localObject4 = ((ZipEntry)localObject4).getName();
        localObject3 = localObject4;
        localObject1 = paramFile;
        int i;
        if (((String)localObject4).contains("/"))
        {
          localObject1 = paramFile;
          localObject3 = ((String)localObject4).substring(((String)localObject4).indexOf("/") + 1);
          localObject1 = paramFile;
          i = ((String)localObject3).length();
          if (i == 0)
          {
            if (localObject2 != null) {
              localObject2.close();
            }
            localObject3 = paramFile;
            if (paramFile == null) {
              continue;
            }
            paramFile.close();
            localObject3 = paramFile;
            continue;
          }
        }
        localObject1 = paramFile;
        localObject3 = paramContext.openFileOutput(new String(((String)localObject3).getBytes("8859_1"), "GB2312"), 0);
        try
        {
          localObject1 = new byte['Ѐ'];
          for (;;)
          {
            i = paramFile.read((byte[])localObject1);
            if (i <= 0)
            {
              if (localObject3 != null) {
                ((OutputStream)localObject3).close();
              }
              if (paramFile != null) {
                paramFile.close();
              }
              localObject2 = localObject3;
              localObject3 = paramFile;
              break;
            }
            ((OutputStream)localObject3).write((byte[])localObject1, 0, i);
          }
          if (localObject2 == null) {
            break label246;
          }
        }
        finally
        {
          localObject2 = localObject3;
        }
      }
      finally
      {
        for (;;)
        {
          paramFile = (File)localObject1;
        }
      }
    }
    localObject2.close();
    label246:
    if (paramFile != null) {
      paramFile.close();
    }
    throw paramContext;
  }
  
  public boolean saveFile(Context paramContext, String paramString)
  {
    try
    {
      paramContext = new OutputStreamWriter(paramContext.openFileOutput("file_name.txt", 0));
      paramContext.write(paramString);
      paramContext.close();
      return true;
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
    }
    return false;
  }
}
