package com.eden.sdk.unluac.decompile.branch;

import com.eden.sdk.unluac.decompile.Constant;
import com.eden.sdk.unluac.decompile.Registers;
import com.eden.sdk.unluac.decompile.expression.ConstantExpression;
import com.eden.sdk.unluac.decompile.expression.Expression;
import com.eden.sdk.unluac.parse.LBoolean;

public class TrueNode
  extends Branch
{
  public final boolean invert;
  public final int register;
  
  public TrueNode(int paramInt1, boolean paramBoolean, int paramInt2, int paramInt3, int paramInt4)
  {
    super(paramInt2, paramInt3, paramInt4);
    this.register = paramInt1;
    this.invert = paramBoolean;
    this.setTarget = paramInt1;
  }
  
  public Expression asExpression(Registers paramRegisters)
  {
    if (this.invert) {}
    for (paramRegisters = LBoolean.LTRUE;; paramRegisters = LBoolean.LFALSE) {
      return new ConstantExpression(new Constant(paramRegisters), -1);
    }
  }
  
  public int getRegister()
  {
    return this.register;
  }
  
  public Branch invert()
  {
    int i = this.register;
    if (this.invert) {}
    for (boolean bool = false;; bool = true) {
      return new TrueNode(i, bool, this.line, this.end, this.begin);
    }
  }
  
  public String toString()
  {
    return "TrueNode[invert=" + this.invert + ";line=" + this.line + ";begin=" + this.begin + ";end=" + this.end + "]";
  }
  
  public void useExpression(Expression paramExpression) {}
}
