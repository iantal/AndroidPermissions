package com.eden.sdk.unluac.decompile.expression;

import com.eden.sdk.unluac.decompile.Output;
import java.util.ArrayList;

public class FunctionCall
  extends Expression
{
  private final Expression[] arguments;
  private final Expression function;
  private final boolean multiple;
  
  public FunctionCall(Expression paramExpression, Expression[] paramArrayOfExpression, boolean paramBoolean)
  {
    super(9);
    this.function = paramExpression;
    this.arguments = paramArrayOfExpression;
    this.multiple = paramBoolean;
  }
  
  private boolean isMethodCall()
  {
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (this.function.isMemberAccess())
    {
      bool1 = bool2;
      if (this.arguments.length > 0)
      {
        bool1 = bool2;
        if (this.function.getTable() == this.arguments[0]) {
          bool1 = true;
        }
      }
    }
    return bool1;
  }
  
  public boolean beginsWithParen()
  {
    if (isMethodCall())
    {
      localExpression = this.function.getTable();
      if ((localExpression.isClosure()) || (localExpression.isConstant()) || (localExpression.beginsWithParen())) {}
    }
    while ((!this.function.isClosure()) && (!this.function.isConstant()) && (!this.function.beginsWithParen()))
    {
      Expression localExpression;
      return false;
      return true;
    }
    return true;
  }
  
  public int getConstantIndex()
  {
    int j = this.function.getConstantIndex();
    Expression[] arrayOfExpression = this.arguments;
    int k = arrayOfExpression.length;
    int i = 0;
    for (;;)
    {
      if (i >= k) {
        return j;
      }
      j = Math.max(arrayOfExpression[i].getConstantIndex(), j);
      i += 1;
    }
  }
  
  public boolean isMultiple()
  {
    return this.multiple;
  }
  
  public void print(Output paramOutput)
  {
    ArrayList localArrayList = new ArrayList(this.arguments.length);
    int i;
    if (isMethodCall())
    {
      Expression localExpression = this.function.getTable();
      if ((localExpression.isClosure()) || (localExpression.isConstant()))
      {
        paramOutput.print("(");
        localExpression.print(paramOutput);
        paramOutput.print(")");
        paramOutput.print(":");
        paramOutput.print(this.function.getField());
        i = 1;
      }
      for (;;)
      {
        if (i >= this.arguments.length)
        {
          paramOutput.print("(");
          Expression.printSequence(paramOutput, localArrayList, false, true);
          paramOutput.print(")");
          return;
          localExpression.print(paramOutput);
          break;
        }
        localArrayList.add(this.arguments[i]);
        i += 1;
      }
    }
    if ((this.function.isClosure()) || (this.function.isConstant()))
    {
      paramOutput.print("(");
      this.function.print(paramOutput);
      paramOutput.print(")");
    }
    for (;;)
    {
      i = 0;
      while (i < this.arguments.length)
      {
        localArrayList.add(this.arguments[i]);
        i += 1;
      }
      break;
      this.function.print(paramOutput);
    }
  }
  
  public void printMultiple(Output paramOutput)
  {
    if (!this.multiple) {
      paramOutput.print("(");
    }
    print(paramOutput);
    if (!this.multiple) {
      paramOutput.print(")");
    }
  }
}
