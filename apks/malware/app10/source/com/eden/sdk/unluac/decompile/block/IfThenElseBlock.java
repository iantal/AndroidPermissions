package com.eden.sdk.unluac.decompile.block;

import com.eden.sdk.unluac.decompile.Output;
import com.eden.sdk.unluac.decompile.Registers;
import com.eden.sdk.unluac.decompile.branch.Branch;
import com.eden.sdk.unluac.decompile.expression.Expression;
import com.eden.sdk.unluac.decompile.statement.Statement;
import com.eden.sdk.unluac.parse.LFunction;
import java.util.ArrayList;
import java.util.List;

public class IfThenElseBlock
  extends Block
{
  private final Branch branch;
  private final boolean emptyElse;
  private final int loopback;
  public ElseEndBlock partner;
  private final Registers r;
  private final List<Statement> statements;
  
  public IfThenElseBlock(LFunction paramLFunction, Branch paramBranch, int paramInt, boolean paramBoolean, Registers paramRegisters)
  {
    super(paramLFunction, paramBranch.begin, paramBranch.end);
    this.branch = paramBranch;
    this.loopback = paramInt;
    this.emptyElse = paramBoolean;
    this.r = paramRegisters;
    this.statements = new ArrayList(paramBranch.end - paramBranch.begin + 1);
  }
  
  public void addStatement(Statement paramStatement)
  {
    this.statements.add(paramStatement);
  }
  
  public boolean breakable()
  {
    return false;
  }
  
  public int compareTo(Block paramBlock)
  {
    if (paramBlock == this.partner) {
      return -1;
    }
    return super.compareTo(paramBlock);
  }
  
  public int getLoopback()
  {
    return this.loopback;
  }
  
  public boolean isContainer()
  {
    return true;
  }
  
  public boolean isUnprotected()
  {
    return true;
  }
  
  public void print(Output paramOutput)
  {
    paramOutput.print("if ");
    this.branch.asExpression(this.r).print(paramOutput);
    paramOutput.print(" then");
    paramOutput.println();
    paramOutput.indent();
    if ((this.statements.size() == 1) && ((this.statements.get(0) instanceof Break)) && (((Break)this.statements.get(0)).target == this.loopback)) {
      paramOutput.dedent();
    }
    do
    {
      return;
      Statement.printSequence(paramOutput, this.statements);
      paramOutput.dedent();
    } while (!this.emptyElse);
    paramOutput.println("else");
    paramOutput.println("end");
  }
  
  public int scopeEnd()
  {
    return this.end - 2;
  }
}
