package com.eden.sdk.unluac.decompile.block;

import com.eden.sdk.unluac.decompile.Decompiler;
import com.eden.sdk.unluac.decompile.operation.Operation;
import com.eden.sdk.unluac.decompile.statement.Statement;
import com.eden.sdk.unluac.parse.LFunction;

public abstract class Block
  extends Statement
  implements Comparable<Block>
{
  public int begin;
  public int end;
  protected final LFunction function;
  public boolean loopRedirectAdjustment = false;
  
  public Block(LFunction paramLFunction, int paramInt1, int paramInt2)
  {
    this.function = paramLFunction;
    this.begin = paramInt1;
    this.end = paramInt2;
  }
  
  public abstract void addStatement(Statement paramStatement);
  
  public abstract boolean breakable();
  
  public int compareTo(Block paramBlock)
  {
    if (this.begin < paramBlock.begin) {}
    do
    {
      return -1;
      if (this.begin != paramBlock.begin) {
        break;
      }
      if (this.end < paramBlock.end) {
        return 1;
      }
    } while ((this.end != paramBlock.end) || ((isContainer()) && (!paramBlock.isContainer())));
    if ((!isContainer()) && (paramBlock.isContainer())) {
      return 1;
    }
    return 0;
    return 1;
  }
  
  public boolean contains(int paramInt)
  {
    return (this.begin <= paramInt) && (paramInt < this.end);
  }
  
  public boolean contains(Block paramBlock)
  {
    return (this.begin <= paramBlock.begin) && (this.end >= paramBlock.end);
  }
  
  public abstract int getLoopback();
  
  public abstract boolean isContainer();
  
  public abstract boolean isUnprotected();
  
  public Operation process(Decompiler paramDecompiler)
  {
    return new Block.1(this, this.end - 1, this);
  }
  
  public int scopeEnd()
  {
    return this.end - 1;
  }
}
