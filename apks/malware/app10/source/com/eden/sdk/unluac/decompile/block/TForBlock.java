package com.eden.sdk.unluac.decompile.block;

import com.eden.sdk.unluac.decompile.Output;
import com.eden.sdk.unluac.decompile.Registers;
import com.eden.sdk.unluac.decompile.expression.Expression;
import com.eden.sdk.unluac.decompile.statement.Statement;
import com.eden.sdk.unluac.decompile.target.Target;
import com.eden.sdk.unluac.parse.LFunction;
import java.util.ArrayList;
import java.util.List;

public class TForBlock
  extends Block
{
  private final int length;
  private final Registers r;
  private final int register;
  private final List<Statement> statements;
  
  public TForBlock(LFunction paramLFunction, int paramInt1, int paramInt2, int paramInt3, int paramInt4, Registers paramRegisters)
  {
    super(paramLFunction, paramInt1, paramInt2);
    this.register = paramInt3;
    this.length = paramInt4;
    this.r = paramRegisters;
    this.statements = new ArrayList(paramInt2 - paramInt1 + 1);
  }
  
  public void addStatement(Statement paramStatement)
  {
    this.statements.add(paramStatement);
  }
  
  public boolean breakable()
  {
    return true;
  }
  
  public int getLoopback()
  {
    throw new IllegalStateException();
  }
  
  public boolean isContainer()
  {
    return true;
  }
  
  public boolean isUnprotected()
  {
    return false;
  }
  
  public void print(Output paramOutput)
  {
    paramOutput.print("for ");
    this.r.getTarget(this.register + 3, this.begin - 1).print(paramOutput);
    int i = this.register + 4;
    for (;;)
    {
      if (i > this.register + 2 + this.length)
      {
        paramOutput.print(" in ");
        Expression localExpression = this.r.getValue(this.register, this.begin - 1);
        localExpression.print(paramOutput);
        if (!localExpression.isMultiple())
        {
          paramOutput.print(", ");
          localExpression = this.r.getValue(this.register + 1, this.begin - 1);
          localExpression.print(paramOutput);
          if (!localExpression.isMultiple())
          {
            paramOutput.print(", ");
            this.r.getValue(this.register + 2, this.begin - 1).print(paramOutput);
          }
        }
        paramOutput.print(" do");
        paramOutput.println();
        paramOutput.indent();
        Statement.printSequence(paramOutput, this.statements);
        paramOutput.dedent();
        paramOutput.print("end");
        return;
      }
      paramOutput.print(", ");
      this.r.getTarget(i, this.begin - 1).print(paramOutput);
      i += 1;
    }
  }
  
  public int scopeEnd()
  {
    return this.end - 3;
  }
}
