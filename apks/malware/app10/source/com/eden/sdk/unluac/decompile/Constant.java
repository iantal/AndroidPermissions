package com.eden.sdk.unluac.decompile;

import com.eden.sdk.unluac.parse.LBoolean;
import com.eden.sdk.unluac.parse.LNil;
import com.eden.sdk.unluac.parse.LNumber;
import com.eden.sdk.unluac.parse.LObject;
import com.eden.sdk.unluac.parse.LString;
import java.util.HashSet;
import java.util.Set;

public class Constant
{
  private static final Set<String> reservedWords;
  private final boolean bool;
  private final LNumber number;
  private final String string;
  private final int type;
  
  static
  {
    HashSet localHashSet = new HashSet();
    reservedWords = localHashSet;
    localHashSet.add("and");
    reservedWords.add("break");
    reservedWords.add("do");
    reservedWords.add("else");
    reservedWords.add("elseif");
    reservedWords.add("end");
    reservedWords.add("false");
    reservedWords.add("for");
    reservedWords.add("function");
    reservedWords.add("if");
    reservedWords.add("in");
    reservedWords.add("local");
    reservedWords.add("nil");
    reservedWords.add("not");
    reservedWords.add("or");
    reservedWords.add("repeat");
    reservedWords.add("return");
    reservedWords.add("then");
    reservedWords.add("true");
    reservedWords.add("until");
    reservedWords.add("while");
  }
  
  public Constant(int paramInt)
  {
    this.type = 2;
    this.bool = false;
    this.number = LNumber.makeInteger(paramInt);
    this.string = null;
  }
  
  public Constant(LObject paramLObject)
  {
    if ((paramLObject instanceof LNil))
    {
      this.type = 0;
      this.bool = false;
      this.number = null;
      this.string = null;
      return;
    }
    if ((paramLObject instanceof LBoolean))
    {
      this.type = 1;
      if (paramLObject == LBoolean.LTRUE) {}
      for (;;)
      {
        this.bool = bool1;
        this.number = null;
        this.string = null;
        return;
        bool1 = false;
      }
    }
    if ((paramLObject instanceof LNumber))
    {
      this.type = 2;
      this.bool = false;
      this.number = ((LNumber)paramLObject);
      this.string = null;
      return;
    }
    if ((paramLObject instanceof LString))
    {
      this.type = 3;
      this.bool = false;
      this.number = null;
      this.string = ((LString)paramLObject).deref();
      return;
    }
    throw new IllegalArgumentException("Illegal constant type: " + paramLObject.toString());
  }
  
  public int asInteger()
  {
    if (!isInteger()) {
      throw new IllegalStateException();
    }
    return (int)this.number.value();
  }
  
  public String asName()
  {
    if (this.type != 3) {
      throw new IllegalStateException();
    }
    return this.string;
  }
  
  public boolean isBoolean()
  {
    return this.type == 1;
  }
  
  public boolean isIdentifier()
  {
    boolean bool2 = true;
    boolean bool1;
    if (!isString())
    {
      bool1 = false;
      return bool1;
    }
    if (reservedWords.contains(this.string)) {
      return false;
    }
    if (this.string.length() == 0) {
      return false;
    }
    char c = this.string.charAt(0);
    if ((c != '_') && (!Character.isLetter(c))) {
      return false;
    }
    int i = 1;
    for (;;)
    {
      bool1 = bool2;
      if (i >= this.string.length()) {
        break;
      }
      c = this.string.charAt(i);
      if ((!Character.isLetter(c)) && (!Character.isDigit(c)) && (c != '_')) {
        return false;
      }
      i += 1;
    }
  }
  
  public boolean isInteger()
  {
    return this.number.value() == Math.round(this.number.value());
  }
  
  public boolean isNil()
  {
    return this.type == 0;
  }
  
  public boolean isNumber()
  {
    return this.type == 2;
  }
  
  public boolean isString()
  {
    return this.type == 3;
  }
  
  public void print(Output paramOutput)
  {
    int n = 0;
    String str;
    switch (this.type)
    {
    default: 
      throw new IllegalStateException();
    case 0: 
      paramOutput.print("nil");
      return;
    case 1: 
      if (this.bool) {}
      for (str = "true";; str = "false")
      {
        paramOutput.print(str);
        return;
      }
    case 2: 
      paramOutput.print(this.number.toString());
      return;
    }
    int i = 0;
    int j = 0;
    int k = 0;
    if (i >= this.string.length())
    {
      if ((j != 0) || ((k <= 1) && ((k != 1) || (this.string.indexOf('\n') == this.string.length() - 1)))) {
        break label367;
      }
      str = "]]";
      i = 0;
      if (this.string.indexOf(str) >= 0) {
        break label282;
      }
      paramOutput.print("[");
    }
    for (;;)
    {
      if (i <= 0)
      {
        paramOutput.print("[");
        i = paramOutput.getIndentationLevel();
        paramOutput.setIndentationLevel(0);
        paramOutput.println();
        paramOutput.print(this.string);
        paramOutput.print(str);
        paramOutput.setIndentationLevel(i);
        return;
        int m;
        if (this.string.charAt(i) == '\n')
        {
          m = 1;
          label229:
          m = k + m;
          if (this.string.charAt(i) != '\r') {
            break label276;
          }
        }
        label276:
        for (k = 1;; k = 0)
        {
          j += k;
          i += 1;
          k = m;
          break;
          m = 0;
          break label229;
        }
        label282:
        i += 1;
        str = "]";
        j = i;
        for (;;)
        {
          if (j <= 0)
          {
            str = str + "]";
            break;
          }
          str = str + "=";
          j -= 1;
        }
      }
      paramOutput.print("=");
      i -= 1;
    }
    label367:
    paramOutput.print("\"");
    i = n;
    if (i >= this.string.length())
    {
      paramOutput.print("\"");
      return;
    }
    char c = this.string.charAt(i);
    if ((c <= '\037') || (c >= '')) {
      if (c == '\007') {
        paramOutput.print("\\a");
      }
    }
    for (;;)
    {
      i += 1;
      break;
      if (c == '\b')
      {
        paramOutput.print("\\b");
      }
      else if (c == '\f')
      {
        paramOutput.print("\\f");
      }
      else if (c == '\n')
      {
        paramOutput.print("\\n");
      }
      else if (c == '\r')
      {
        paramOutput.print("\\r");
      }
      else if (c == '\t')
      {
        paramOutput.print("\\t");
      }
      else if (c == '\013')
      {
        paramOutput.print("\\v");
      }
      else
      {
        str = Integer.toString(c);
        j = str.length();
        paramOutput.print("\\");
        for (;;)
        {
          if (j >= 3)
          {
            paramOutput.print(str);
            break;
          }
          paramOutput.print("0");
          j += 1;
        }
        if (c == '"') {
          paramOutput.print("\\\"");
        } else if (c == '\\') {
          paramOutput.print("\\\\");
        } else {
          paramOutput.print(Character.toString(c));
        }
      }
    }
  }
}
