package com.eden.sdk.unluac.decompile.expression;

import com.eden.sdk.unluac.decompile.Declaration;
import com.eden.sdk.unluac.decompile.Decompiler;
import com.eden.sdk.unluac.decompile.Output;
import com.eden.sdk.unluac.decompile.target.TableTarget;
import com.eden.sdk.unluac.decompile.target.Target;
import com.eden.sdk.unluac.decompile.target.VariableTarget;
import com.eden.sdk.unluac.parse.LFunction;
import com.eden.sdk.unluac.parse.LUpvalue;

public class ClosureExpression
  extends Expression
{
  private Declaration[] declList;
  private final LFunction function;
  private int upvalueLine;
  
  public ClosureExpression(LFunction paramLFunction, Declaration[] paramArrayOfDeclaration, int paramInt)
  {
    super(9);
    this.function = paramLFunction;
    this.upvalueLine = paramInt;
    this.declList = paramArrayOfDeclaration;
  }
  
  private void printMain(Output paramOutput, Decompiler paramDecompiler, boolean paramBoolean)
  {
    paramOutput.print("(");
    int i;
    int j;
    if (paramBoolean)
    {
      i = 0;
      if (this.function.numParams > i)
      {
        new VariableTarget(paramDecompiler.declList[i]).print(paramOutput);
        j = i + 1;
        label49:
        if (j < this.function.numParams) {
          break label132;
        }
      }
      if ((this.function.vararg & 0x1) == 1)
      {
        if (this.function.numParams <= i) {
          break label165;
        }
        paramOutput.print(", ...");
      }
    }
    for (;;)
    {
      paramOutput.print(")");
      paramOutput.println();
      paramOutput.indent();
      paramDecompiler.decompile();
      paramDecompiler.print(paramOutput);
      paramOutput.dedent();
      paramOutput.print("end");
      return;
      i = 1;
      break;
      label132:
      paramOutput.print(", ");
      new VariableTarget(paramDecompiler.declList[j]).print(paramOutput);
      j += 1;
      break label49;
      label165:
      paramOutput.print("...");
    }
  }
  
  public int closureUpvalueLine()
  {
    return this.upvalueLine;
  }
  
  public int getConstantIndex()
  {
    return -1;
  }
  
  public boolean isClosure()
  {
    return true;
  }
  
  public boolean isUpvalueOf(int paramInt)
  {
    int i = 0;
    for (;;)
    {
      if (i >= this.function.upvalues.length) {
        return false;
      }
      LUpvalue localLUpvalue = this.function.upvalues[i];
      if ((localLUpvalue.instack) && (localLUpvalue.idx == paramInt)) {
        return true;
      }
      i += 1;
    }
  }
  
  public void print(Output paramOutput)
  {
    Decompiler localDecompiler = new Decompiler(this.function);
    paramOutput.print("function");
    printMain(paramOutput, localDecompiler, true);
  }
  
  public void printClosure(Output paramOutput, Target paramTarget)
  {
    Decompiler localDecompiler = new Decompiler(this.function);
    paramOutput.print("function ");
    if ((this.function.numParams > 0) && (localDecompiler.declList[0].name.equals("self")) && ((paramTarget instanceof TableTarget)))
    {
      paramTarget.printMethod(paramOutput);
      printMain(paramOutput, localDecompiler, false);
      return;
    }
    paramTarget.print(paramOutput);
    printMain(paramOutput, localDecompiler, true);
  }
}
