package com.eden.sdk.unluac.decompile;

import com.eden.sdk.unluac.decompile.expression.Expression;
import com.eden.sdk.unluac.decompile.expression.LocalVariable;
import com.eden.sdk.unluac.decompile.target.Target;
import com.eden.sdk.unluac.decompile.target.VariableTarget;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Registers
{
  private final Declaration[][] decls;
  private final Function f;
  public final int length;
  public final int registers;
  private boolean[] startedLines;
  private final int[][] updated;
  private final Expression[][] values;
  
  public Registers(int paramInt1, int paramInt2, Declaration[] paramArrayOfDeclaration, Function paramFunction)
  {
    this.registers = paramInt1;
    this.length = paramInt2;
    this.decls = ((Declaration[][])Array.newInstance(Declaration.class, new int[] { paramInt1, paramInt2 + 1 }));
    int i = 0;
    if (i >= paramArrayOfDeclaration.length)
    {
      this.values = ((Expression[][])Array.newInstance(Expression.class, new int[] { paramInt1, paramInt2 + 1 }));
      i = 0;
    }
    for (;;)
    {
      if (i >= paramInt1)
      {
        this.updated = ((int[][])Array.newInstance(Integer.TYPE, new int[] { paramInt1, paramInt2 + 1 }));
        this.startedLines = new boolean[paramInt2 + 1];
        Arrays.fill(this.startedLines, false);
        this.f = paramFunction;
        return;
        Declaration localDeclaration = paramArrayOfDeclaration[i];
        int j = 0;
        label142:
        int k;
        if (this.decls[j][localDeclaration.begin] == null)
        {
          localDeclaration.register = j;
          k = localDeclaration.begin;
        }
        for (;;)
        {
          if (k > localDeclaration.end)
          {
            i += 1;
            break;
            j += 1;
            break label142;
          }
          this.decls[j][k] = localDeclaration;
          k += 1;
        }
      }
      this.values[i][0] = Expression.NIL;
      i += 1;
    }
  }
  
  private void newDeclaration(Declaration paramDeclaration, int paramInt1, int paramInt2, int paramInt3)
  {
    for (;;)
    {
      if (paramInt2 > paramInt3) {
        return;
      }
      this.decls[paramInt1][paramInt2] = paramDeclaration;
      paramInt2 += 1;
    }
  }
  
  public Declaration getDeclaration(int paramInt1, int paramInt2)
  {
    return this.decls[paramInt1][paramInt2];
  }
  
  public Expression getExpression(int paramInt1, int paramInt2)
  {
    if (isLocal(paramInt1, paramInt2 - 1)) {
      return new LocalVariable(getDeclaration(paramInt1, paramInt2 - 1));
    }
    return this.values[paramInt1][(paramInt2 - 1)];
  }
  
  public Expression getKExpression(int paramInt1, int paramInt2)
  {
    if ((paramInt1 & 0x100) != 0) {
      return this.f.getConstantExpression(paramInt1 & 0xFF);
    }
    return getExpression(paramInt1, paramInt2);
  }
  
  public List<Declaration> getNewLocals(int paramInt)
  {
    ArrayList localArrayList = new ArrayList(this.registers);
    int i = 0;
    for (;;)
    {
      if (i >= this.registers) {
        return localArrayList;
      }
      if (isNewLocal(i, paramInt)) {
        localArrayList.add(getDeclaration(i, paramInt));
      }
      i += 1;
    }
  }
  
  public Target getTarget(int paramInt1, int paramInt2)
  {
    if (!isLocal(paramInt1, paramInt2)) {
      throw new IllegalStateException("No declaration exists in register " + paramInt1 + " at line " + paramInt2);
    }
    return new VariableTarget(this.decls[paramInt1][paramInt2]);
  }
  
  public int getUpdated(int paramInt1, int paramInt2)
  {
    return this.updated[paramInt1][paramInt2];
  }
  
  public Expression getValue(int paramInt1, int paramInt2)
  {
    return this.values[paramInt1][(paramInt2 - 1)];
  }
  
  public boolean isAssignable(int paramInt1, int paramInt2)
  {
    return (isLocal(paramInt1, paramInt2)) && (!this.decls[paramInt1][paramInt2].forLoop);
  }
  
  public boolean isLocal(int paramInt1, int paramInt2)
  {
    if (paramInt1 < 0) {}
    while (this.decls[paramInt1][paramInt2] == null) {
      return false;
    }
    return true;
  }
  
  public boolean isNewLocal(int paramInt1, int paramInt2)
  {
    Declaration localDeclaration = this.decls[paramInt1][paramInt2];
    return (localDeclaration != null) && (localDeclaration.begin == paramInt2) && (!localDeclaration.forLoop);
  }
  
  public void setExplicitLoopVariable(int paramInt1, int paramInt2, int paramInt3)
  {
    Declaration localDeclaration2 = getDeclaration(paramInt1, paramInt2);
    Declaration localDeclaration1 = localDeclaration2;
    if (localDeclaration2 == null)
    {
      localDeclaration1 = new Declaration("_FORV_" + paramInt1 + "_", paramInt2, paramInt3);
      localDeclaration1.register = paramInt1;
      newDeclaration(localDeclaration1, paramInt1, paramInt2, paramInt3);
    }
    localDeclaration1.forLoopExplicit = true;
  }
  
  public void setInternalLoopVariable(int paramInt1, int paramInt2, int paramInt3)
  {
    Declaration localDeclaration2 = getDeclaration(paramInt1, paramInt2);
    Declaration localDeclaration1 = localDeclaration2;
    if (localDeclaration2 == null)
    {
      localDeclaration1 = new Declaration("_FOR_", paramInt2, paramInt3);
      localDeclaration1.register = paramInt1;
      newDeclaration(localDeclaration1, paramInt1, paramInt2, paramInt3);
    }
    localDeclaration1.forLoop = true;
  }
  
  public void setValue(int paramInt1, int paramInt2, Expression paramExpression)
  {
    this.values[paramInt1][paramInt2] = paramExpression;
    this.updated[paramInt1][paramInt2] = paramInt2;
  }
  
  public void startLine(int paramInt)
  {
    this.startedLines[paramInt] = true;
    int i = 0;
    for (;;)
    {
      if (i >= this.registers) {
        return;
      }
      this.values[i][paramInt] = this.values[i][(paramInt - 1)];
      this.updated[i][paramInt] = this.updated[i][(paramInt - 1)];
      i += 1;
    }
  }
}
