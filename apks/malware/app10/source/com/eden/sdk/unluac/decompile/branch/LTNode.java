package com.eden.sdk.unluac.decompile.branch;

import com.eden.sdk.unluac.decompile.Registers;
import com.eden.sdk.unluac.decompile.expression.BinaryExpression;
import com.eden.sdk.unluac.decompile.expression.Expression;
import com.eden.sdk.unluac.decompile.expression.UnaryExpression;

public class LTNode
  extends Branch
{
  private final boolean invert;
  private final int left;
  private final int right;
  
  public LTNode(int paramInt1, int paramInt2, boolean paramBoolean, int paramInt3, int paramInt4, int paramInt5)
  {
    super(paramInt3, paramInt4, paramInt5);
    this.left = paramInt1;
    this.right = paramInt2;
    this.invert = paramBoolean;
  }
  
  public Expression asExpression(Registers paramRegisters)
  {
    int j = 0;
    int i = 0;
    Object localObject1 = paramRegisters.getKExpression(this.left, this.line);
    Object localObject2 = paramRegisters.getKExpression(this.right, this.line);
    label84:
    Object localObject3;
    if (((this.left | this.right) & 0x100) == 0)
    {
      if (paramRegisters.getUpdated(this.left, this.line) > paramRegisters.getUpdated(this.right, this.line)) {
        i = 1;
      }
      if (i != 0) {
        break label158;
      }
      paramRegisters = "<";
      if (i != 0) {
        break label164;
      }
      localObject3 = localObject1;
      label92:
      if (i != 0) {
        break label171;
      }
    }
    for (;;)
    {
      localObject1 = new BinaryExpression(paramRegisters, localObject3, (Expression)localObject2, 3, 1);
      paramRegisters = (Registers)localObject1;
      if (this.invert) {
        paramRegisters = new UnaryExpression("not ", (Expression)localObject1, 7);
      }
      return paramRegisters;
      i = j;
      if (((Expression)localObject2).getConstantIndex() < ((Expression)localObject1).getConstantIndex()) {
        i = 1;
      }
      break;
      label158:
      paramRegisters = ">";
      break label84;
      label164:
      localObject3 = localObject2;
      break label92;
      label171:
      localObject2 = localObject1;
    }
  }
  
  public int getRegister()
  {
    return -1;
  }
  
  public Branch invert()
  {
    int i = this.left;
    int j = this.right;
    if (this.invert) {}
    for (boolean bool = false;; bool = true) {
      return new LTNode(i, j, bool, this.line, this.end, this.begin);
    }
  }
  
  public void useExpression(Expression paramExpression) {}
}
