package com.eden.sdk.b;

import android.util.Log;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import org.apache.http.HttpEntity;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.message.BasicNameValuePair;

public final class ad
{
  protected boolean a;
  protected boolean b;
  protected final ConcurrentHashMap<String, String> c = new ConcurrentHashMap();
  protected final ConcurrentHashMap<String, b> d = new ConcurrentHashMap();
  protected final ConcurrentHashMap<String, ae> e = new ConcurrentHashMap();
  protected final ConcurrentHashMap<String, Object> f = new ConcurrentHashMap();
  protected String g = "UTF-8";
  
  public ad()
  {
    this((byte)0);
  }
  
  private ad(byte paramByte) {}
  
  private List<BasicNameValuePair> a(String paramString, Object paramObject)
  {
    LinkedList localLinkedList = new LinkedList();
    Map localMap;
    Iterator localIterator;
    if ((paramObject instanceof Map))
    {
      localMap = (Map)paramObject;
      paramObject = new ArrayList(localMap.keySet());
      if ((paramObject.size() > 0) && ((paramObject.get(0) instanceof Comparable))) {
        Collections.sort(paramObject);
      }
      localIterator = paramObject.iterator();
      if (localIterator.hasNext()) {}
    }
    for (;;)
    {
      return localLinkedList;
      paramObject = localIterator.next();
      if (!(paramObject instanceof String)) {
        break;
      }
      Object localObject = localMap.get(paramObject);
      if (localObject == null) {
        break;
      }
      if (paramString == null) {}
      for (paramObject = (String)paramObject;; paramObject = String.format("%s[%s]", new Object[] { paramString, paramObject }))
      {
        localLinkedList.addAll(a(paramObject, localObject));
        break;
      }
      int j;
      int i;
      if ((paramObject instanceof List))
      {
        paramObject = (List)paramObject;
        j = paramObject.size();
        i = 0;
        while (i < j)
        {
          localLinkedList.addAll(a(String.format("%s[%d]", new Object[] { paramString, Integer.valueOf(i) }), paramObject.get(i)));
          i += 1;
        }
      }
      else if ((paramObject instanceof Object[]))
      {
        paramObject = (Object[])paramObject;
        j = paramObject.length;
        i = 0;
        while (i < j)
        {
          localLinkedList.addAll(a(String.format("%s[%d]", new Object[] { paramString, Integer.valueOf(i) }), paramObject[i]));
          i += 1;
        }
      }
      else
      {
        if (!(paramObject instanceof Set)) {
          break label350;
        }
        paramObject = ((Set)paramObject).iterator();
        while (paramObject.hasNext()) {
          localLinkedList.addAll(a(paramString, paramObject.next()));
        }
      }
    }
    label350:
    localLinkedList.add(new BasicNameValuePair(paramString, paramObject.toString()));
    return localLinkedList;
  }
  
  private HttpEntity a()
  {
    try
    {
      UrlEncodedFormEntity localUrlEncodedFormEntity = new UrlEncodedFormEntity(b(), this.g);
      return localUrlEncodedFormEntity;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException)
    {
      Log.e("RequestParams", "createFormEntity failed", localUnsupportedEncodingException);
    }
    return null;
  }
  
  private List<BasicNameValuePair> b()
  {
    LinkedList localLinkedList = new LinkedList();
    Iterator localIterator = this.c.entrySet().iterator();
    for (;;)
    {
      if (!localIterator.hasNext())
      {
        localLinkedList.addAll(a(null, this.f));
        return localLinkedList;
      }
      Map.Entry localEntry = (Map.Entry)localIterator.next();
      localLinkedList.add(new BasicNameValuePair((String)localEntry.getKey(), (String)localEntry.getValue()));
    }
  }
  
  public final HttpEntity a(c paramC)
  {
    label52:
    label74:
    label96:
    Object localObject2;
    label136:
    label171:
    label206:
    Object localObject3;
    if (this.b)
    {
      if ((this.e.isEmpty()) && (this.d.isEmpty()))
      {
        bool = false;
        localObject1 = new aa(paramC, bool);
        paramC = this.c.entrySet().iterator();
        if (paramC.hasNext()) {
          break label136;
        }
        paramC = this.f.entrySet().iterator();
        if (paramC.hasNext()) {
          break label171;
        }
        paramC = this.e.entrySet().iterator();
        if (paramC.hasNext()) {
          break label206;
        }
        localObject2 = this.d.entrySet().iterator();
      }
      b localB;
      do
      {
        if (!((Iterator)localObject2).hasNext())
        {
          return localObject1;
          bool = true;
          break;
          localObject2 = (Map.Entry)paramC.next();
          ((aa)localObject1).a((String)((Map.Entry)localObject2).getKey(), ((Map.Entry)localObject2).getValue());
          break label52;
          localObject2 = (Map.Entry)paramC.next();
          ((aa)localObject1).a((String)((Map.Entry)localObject2).getKey(), ((Map.Entry)localObject2).getValue());
          break label74;
          localObject2 = (Map.Entry)paramC.next();
          ((aa)localObject1).a((String)((Map.Entry)localObject2).getKey(), ((Map.Entry)localObject2).getValue());
          break label96;
        }
        paramC = (Map.Entry)((Iterator)localObject2).next();
        localB = (b)paramC.getValue();
      } while (localB.a == null);
      localObject3 = (String)paramC.getKey();
      InputStream localInputStream = localB.a;
      String str = localB.b;
      paramC = localB.c;
      boolean bool = localB.d;
      if (paramC == null) {
        paramC = "application/octet-stream";
      }
      for (;;)
      {
        ((aa)localObject1).a((String)localObject3, new b(localInputStream, str, paramC, bool));
        break;
      }
    }
    if ((this.d.isEmpty()) && (this.e.isEmpty())) {
      return a();
    }
    paramC = new e(paramC);
    paramC.a(this.a);
    Object localObject1 = this.c.entrySet().iterator();
    if (!((Iterator)localObject1).hasNext())
    {
      localObject1 = a(null, this.f).iterator();
      label419:
      if (((Iterator)localObject1).hasNext()) {
        break label516;
      }
      localObject1 = this.d.entrySet().iterator();
      label441:
      if (((Iterator)localObject1).hasNext()) {
        break label548;
      }
      localObject1 = this.e.entrySet().iterator();
    }
    for (;;)
    {
      if (!((Iterator)localObject1).hasNext())
      {
        return paramC;
        localObject2 = (Map.Entry)((Iterator)localObject1).next();
        paramC.a((String)((Map.Entry)localObject2).getKey(), (String)((Map.Entry)localObject2).getValue(), this.g);
        break;
        label516:
        localObject2 = (BasicNameValuePair)((Iterator)localObject1).next();
        paramC.a(((BasicNameValuePair)localObject2).getName(), ((BasicNameValuePair)localObject2).getValue(), this.g);
        break label419;
        label548:
        localObject2 = (Map.Entry)((Iterator)localObject1).next();
        localObject3 = (b)((Map.Entry)localObject2).getValue();
        if (((b)localObject3).a == null) {
          break label441;
        }
        paramC.a((String)((Map.Entry)localObject2).getKey(), ((b)localObject3).b, ((b)localObject3).a, ((b)localObject3).c);
        break label441;
      }
      localObject2 = (Map.Entry)((Iterator)localObject1).next();
      localObject3 = (ae)((Map.Entry)localObject2).getValue();
      paramC.a((String)((Map.Entry)localObject2).getKey(), ((ae)localObject3).a, ((ae)localObject3).b);
    }
  }
  
  public final void a(String paramString1, String paramString2)
  {
    Object localObject1;
    if ((paramString1 != null) && (paramString2 != null))
    {
      Object localObject2 = this.f.get(paramString1);
      localObject1 = localObject2;
      if (localObject2 == null)
      {
        localObject2 = new HashSet();
        localObject1 = localObject2;
        if (paramString1 != null)
        {
          this.f.put(paramString1, localObject2);
          localObject1 = localObject2;
        }
      }
      if (!(localObject1 instanceof List)) {
        break label75;
      }
      ((List)localObject1).add(paramString2);
    }
    label75:
    while (!(localObject1 instanceof Set)) {
      return;
    }
    ((Set)localObject1).add(paramString2);
  }
  
  public final String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    Iterator localIterator = this.c.entrySet().iterator();
    if (!localIterator.hasNext())
    {
      localIterator = this.d.entrySet().iterator();
      label43:
      if (localIterator.hasNext()) {
        break label165;
      }
      localIterator = this.e.entrySet().iterator();
      label65:
      if (localIterator.hasNext()) {
        break label220;
      }
      localIterator = a(null, this.f).iterator();
    }
    for (;;)
    {
      if (!localIterator.hasNext())
      {
        return localStringBuilder.toString();
        localObject = (Map.Entry)localIterator.next();
        if (localStringBuilder.length() > 0) {
          localStringBuilder.append("&");
        }
        localStringBuilder.append((String)((Map.Entry)localObject).getKey());
        localStringBuilder.append("=");
        localStringBuilder.append((String)((Map.Entry)localObject).getValue());
        break;
        label165:
        localObject = (Map.Entry)localIterator.next();
        if (localStringBuilder.length() > 0) {
          localStringBuilder.append("&");
        }
        localStringBuilder.append((String)((Map.Entry)localObject).getKey());
        localStringBuilder.append("=");
        localStringBuilder.append("STREAM");
        break label43;
        label220:
        localObject = (Map.Entry)localIterator.next();
        if (localStringBuilder.length() > 0) {
          localStringBuilder.append("&");
        }
        localStringBuilder.append((String)((Map.Entry)localObject).getKey());
        localStringBuilder.append("=");
        localStringBuilder.append("FILE");
        break label65;
      }
      Object localObject = (BasicNameValuePair)localIterator.next();
      if (localStringBuilder.length() > 0) {
        localStringBuilder.append("&");
      }
      localStringBuilder.append(((BasicNameValuePair)localObject).getName());
      localStringBuilder.append("=");
      localStringBuilder.append(((BasicNameValuePair)localObject).getValue());
    }
  }
}
