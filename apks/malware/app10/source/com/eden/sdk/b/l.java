package com.eden.sdk.b;

import android.util.Log;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.UnknownHostException;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpRequestRetryHandler;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.AbstractHttpClient;
import org.apache.http.protocol.HttpContext;

public final class l
  implements Runnable
{
  private final AbstractHttpClient a;
  private final HttpContext b;
  private final HttpUriRequest c;
  private final c d;
  private int e;
  private boolean f = false;
  private boolean g = false;
  private boolean h = false;
  
  public l(AbstractHttpClient paramAbstractHttpClient, HttpContext paramHttpContext, HttpUriRequest paramHttpUriRequest, c paramC)
  {
    this.a = paramAbstractHttpClient;
    this.b = paramHttpContext;
    this.c = paramHttpUriRequest;
    this.d = paramC;
  }
  
  private void c()
  {
    try
    {
      if ((!this.h) && (this.f) && (!this.g))
      {
        this.g = true;
        if (this.d != null) {
          this.d.sendCancelMessage();
        }
      }
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public final boolean a()
  {
    if (this.f) {
      c();
    }
    return this.f;
  }
  
  public final boolean b()
  {
    return (a()) || (this.h);
  }
  
  public final void run()
  {
    if (a()) {}
    do
    {
      return;
      if (this.d != null) {
        this.d.sendStartMessage();
      }
    } while (a());
    label81:
    boolean bool;
    for (;;)
    {
      HttpRequestRetryHandler localHttpRequestRetryHandler;
      Object localObject;
      int j;
      try
      {
        localHttpRequestRetryHandler = this.a.getHttpRequestRetryHandler();
        localObject = null;
        j = 1;
      }
      catch (IOException localIOException1)
      {
        if (a()) {
          break label448;
        }
      }
      throw ((Throwable)localObject);
      if (this.d != null)
      {
        this.d.sendFailureMessage(0, null, null, localIOException1);
        if (a()) {
          break label459;
        }
        if (this.d != null) {
          this.d.sendFinishMessage();
        }
        this.h = true;
      }
      label448:
      label459:
      label461:
      do
      {
        for (;;)
        {
          try
          {
            if (a()) {
              break label81;
            }
            if (this.c.getURI().getScheme() == null) {
              throw new MalformedURLException("No valid URI scheme was provided");
            }
          }
          catch (UnknownHostException localUnknownHostException)
          {
            IOException localIOException2 = new IOException("UnknownHostException exception: " + localUnknownHostException.getMessage());
            if (this.e <= 0) {
              break label471;
            }
            i = this.e + 1;
            this.e = i;
            if (!localHttpRequestRetryHandler.retryRequest(localIOException2, i, this.b)) {
              break label471;
            }
            bool = true;
            break label468;
            localObject = localIOException2;
            j = bool;
            if (!bool) {
              break label461;
            }
            localObject = localIOException2;
            j = bool;
            if (this.d == null) {
              break label461;
            }
            this.d.sendRetryMessage(this.e);
            localObject = localIOException2;
            j = bool;
            break label461;
          }
          catch (Exception localException)
          {
            Log.e("AsyncHttpRequest", "Unhandled exception origin cause", localException);
            localObject = new IOException("Unhandled exception: " + localException.getMessage());
            break;
            HttpResponse localHttpResponse = this.a.execute(this.c, this.b);
            if ((a()) || (this.d == null)) {
              break label81;
            }
            this.d.sendResponseMessage(localHttpResponse);
          }
          catch (NullPointerException localNullPointerException)
          {
            IOException localIOException3 = new IOException("NPE in HttpClient: " + localNullPointerException.getMessage());
            i = this.e + 1;
            this.e = i;
            bool = localHttpRequestRetryHandler.retryRequest(localIOException3, i, this.b);
            continue;
          }
          catch (IOException localIOException4) {}
          if (a()) {
            break label81;
          }
          int i = this.e + 1;
          this.e = i;
          bool = localHttpRequestRetryHandler.retryRequest(localIOException4, i, this.b);
        }
        Log.e("AsyncHttpRequest", "makeRequestWithRetries returned error, but handler is null", localIOException4);
        break label81;
        break;
      } while (j != 0);
    }
    for (;;)
    {
      label468:
      break;
      label471:
      bool = false;
    }
  }
}
