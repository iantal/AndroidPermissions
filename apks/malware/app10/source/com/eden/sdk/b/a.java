package com.eden.sdk.b;

import android.content.Context;
import android.util.Log;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.lang.reflect.Field;
import java.net.URI;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.apache.http.HttpEntity;
import org.apache.http.HttpVersion;
import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.conn.params.ConnManagerParams;
import org.apache.http.conn.params.ConnPerRouteBean;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.entity.HttpEntityWrapper;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;
import org.apache.http.protocol.SyncBasicHttpContext;

public final class a
{
  public final DefaultHttpClient a;
  final Map<String, String> b;
  private int c = 10;
  private int d = 10000;
  private final HttpContext e;
  private ExecutorService f;
  private final Map<Context, List<ac>> g;
  private boolean h = true;
  
  public a()
  {
    this((byte)0);
  }
  
  private a(byte paramByte)
  {
    this(localSchemeRegistry);
  }
  
  private a(SchemeRegistry paramSchemeRegistry)
  {
    BasicHttpParams localBasicHttpParams = new BasicHttpParams();
    ConnManagerParams.setTimeout(localBasicHttpParams, this.d);
    ConnManagerParams.setMaxConnectionsPerRoute(localBasicHttpParams, new ConnPerRouteBean(this.c));
    ConnManagerParams.setMaxTotalConnections(localBasicHttpParams, 10);
    HttpConnectionParams.setSoTimeout(localBasicHttpParams, this.d);
    HttpConnectionParams.setConnectionTimeout(localBasicHttpParams, this.d);
    HttpConnectionParams.setTcpNoDelay(localBasicHttpParams, true);
    HttpConnectionParams.setSocketBufferSize(localBasicHttpParams, 8192);
    HttpProtocolParams.setVersion(localBasicHttpParams, HttpVersion.HTTP_1_1);
    paramSchemeRegistry = new ThreadSafeClientConnManager(localBasicHttpParams, paramSchemeRegistry);
    this.f = Executors.newCachedThreadPool();
    this.g = Collections.synchronizedMap(new WeakHashMap());
    this.b = new HashMap();
    this.e = new SyncBasicHttpContext(new BasicHttpContext());
    this.a = new DefaultHttpClient(paramSchemeRegistry, localBasicHttpParams);
    this.a.addRequestInterceptor(new h(this));
    this.a.addResponseInterceptor(new i(this));
    this.a.addRequestInterceptor(new j(this), 0);
    this.a.setHttpRequestRetryHandler(new d());
  }
  
  private ac a(DefaultHttpClient paramDefaultHttpClient, HttpContext paramHttpContext, HttpUriRequest paramHttpUriRequest, String paramString, c paramC, Context paramContext)
  {
    if (paramHttpUriRequest == null) {
      throw new IllegalArgumentException("HttpUriRequest must not be null");
    }
    if (paramC == null) {
      throw new IllegalArgumentException("ResponseHandler must not be null");
    }
    if (paramC.getUseSynchronousMode()) {
      throw new IllegalArgumentException("Synchronous ResponseHandler used in AsyncHttpClient. You should create your response handler in a looper thread or use SyncHttpClient instead.");
    }
    if (paramString != null) {
      paramHttpUriRequest.setHeader("Content-Type", paramString);
    }
    paramC.setRequestHeaders(paramHttpUriRequest.getAllHeaders());
    paramC.setRequestURI(paramHttpUriRequest.getURI());
    paramDefaultHttpClient = new l(paramDefaultHttpClient, paramHttpContext, paramHttpUriRequest, paramC);
    this.f.submit(paramDefaultHttpClient);
    paramString = new ac(paramDefaultHttpClient);
    Map localMap;
    if (paramContext != null)
    {
      paramHttpContext = (List)this.g.get(paramContext);
      localMap = this.g;
      paramDefaultHttpClient = paramHttpContext;
      if (paramHttpContext != null) {}
    }
    try
    {
      paramDefaultHttpClient = Collections.synchronizedList(new LinkedList());
      this.g.put(paramContext, paramDefaultHttpClient);
      if ((paramC instanceof ab)) {
        ((ab)paramC).a(paramHttpUriRequest);
      }
      paramDefaultHttpClient.add(paramString);
      paramDefaultHttpClient = paramDefaultHttpClient.iterator();
      if (!paramDefaultHttpClient.hasNext()) {
        return paramString;
      }
    }
    finally {}
    paramHttpContext = (ac)paramDefaultHttpClient.next();
    paramHttpUriRequest = (l)paramHttpContext.a.get();
    if ((paramHttpUriRequest != null) && (!paramHttpUriRequest.a()))
    {
      i = 0;
      label272:
      if (i != 0) {
        break label348;
      }
      paramHttpUriRequest = (l)paramHttpContext.a.get();
      if ((paramHttpUriRequest == null) || (paramHttpUriRequest.b())) {
        break label342;
      }
      i = 0;
      label302:
      if (i != 0) {
        break label348;
      }
    }
    label342:
    label348:
    for (int i = 0;; i = 1)
    {
      if (i != 0) {
        paramHttpContext.a.clear();
      }
      if (i == 0) {
        break;
      }
      paramDefaultHttpClient.remove();
      break;
      i = 1;
      break label272;
      i = 1;
      break label302;
    }
  }
  
  private static HttpEntity a(ad paramAd, c paramC)
  {
    HttpEntity localHttpEntity = null;
    if (paramAd != null) {}
    try
    {
      localHttpEntity = paramAd.a(paramC);
      return localHttpEntity;
    }
    catch (IOException paramAd)
    {
      if (paramC != null)
      {
        paramC.sendFailureMessage(0, null, null, paramAd);
        return null;
      }
      paramAd.printStackTrace();
    }
    return null;
  }
  
  public static void a(InputStream paramInputStream)
  {
    if (paramInputStream != null) {}
    try
    {
      paramInputStream.close();
      return;
    }
    catch (IOException paramInputStream)
    {
      Log.w("AsyncHttpClient", "Cannot close input stream", paramInputStream);
    }
  }
  
  public static void a(OutputStream paramOutputStream)
  {
    if (paramOutputStream != null) {}
    try
    {
      paramOutputStream.close();
      return;
    }
    catch (IOException paramOutputStream)
    {
      Log.w("AsyncHttpClient", "Cannot close output stream", paramOutputStream);
    }
  }
  
  public static void a(HttpEntity paramHttpEntity)
  {
    if ((paramHttpEntity instanceof HttpEntityWrapper)) {
      for (;;)
      {
        int j;
        int i;
        try
        {
          arrayOfField = HttpEntityWrapper.class.getDeclaredFields();
          j = arrayOfField.length;
          i = 0;
        }
        catch (Throwable paramHttpEntity)
        {
          Field[] arrayOfField;
          boolean bool;
          Log.e("AsyncHttpClient", "wrappedEntity consume", paramHttpEntity);
          return;
        }
        if (localField == null) {
          break;
        }
        localField.setAccessible(true);
        paramHttpEntity = (HttpEntity)localField.get(paramHttpEntity);
        if (paramHttpEntity == null) {
          break;
        }
        paramHttpEntity.consumeContent();
        return;
        Field localField = arrayOfField[i];
        bool = localField.getName().equals("wrappedEntity");
        if (!bool)
        {
          i += 1;
          if (i >= j) {
            localField = null;
          }
        }
      }
    }
  }
  
  public final ac a(Context paramContext, String paramString, c paramC)
  {
    DefaultHttpClient localDefaultHttpClient = this.a;
    HttpContext localHttpContext = this.e;
    boolean bool = this.h;
    String str;
    if (paramString == null) {
      str = null;
    }
    for (;;)
    {
      return a(localDefaultHttpClient, localHttpContext, new HttpGet(str), null, paramC, paramContext);
      str = paramString;
      if (bool) {
        str = paramString.replace(" ", "%20");
      }
    }
  }
  
  public final ac a(Context paramContext, String paramString1, HttpEntity paramHttpEntity, String paramString2, c paramC)
  {
    DefaultHttpClient localDefaultHttpClient = this.a;
    HttpContext localHttpContext = this.e;
    paramString1 = new HttpPost(URI.create(paramString1).normalize());
    if (paramHttpEntity != null) {
      paramString1.setEntity(paramHttpEntity);
    }
    return a(localDefaultHttpClient, localHttpContext, paramString1, paramString2, paramC, paramContext);
  }
  
  public final ac a(String paramString, ad paramAd, c paramC)
  {
    return a(null, paramString, a(paramAd, paramC), null, paramC);
  }
  
  public final void a()
  {
    this.b.clear();
  }
  
  public final void a(String paramString1, String paramString2)
  {
    this.b.put(paramString1, paramString2);
  }
}
