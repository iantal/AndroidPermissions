package com.eden.sdk.b;

import android.util.Log;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.message.BasicHeader;

final class e
  implements HttpEntity
{
  private static final byte[] a = "\r\n".getBytes();
  private static final byte[] b = "Content-Transfer-Encoding: binary\r\n".getBytes();
  private static final char[] c = "-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".toCharArray();
  private final String d;
  private final byte[] e;
  private final byte[] f;
  private boolean g;
  private final List<f> h = new ArrayList();
  private final ByteArrayOutputStream i = new ByteArrayOutputStream();
  private final c j;
  private int k;
  private int l;
  
  public e(c paramC)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    Random localRandom = new Random();
    int m = 0;
    for (;;)
    {
      if (m >= 30)
      {
        this.d = localStringBuilder.toString();
        this.e = ("--" + this.d + "\r\n").getBytes();
        this.f = ("--" + this.d + "--\r\n").getBytes();
        this.j = paramC;
        return;
      }
      localStringBuilder.append(c[localRandom.nextInt(c.length)]);
      m += 1;
    }
  }
  
  private void a(int paramInt)
  {
    this.k += paramInt;
    this.j.sendProgressMessage(this.k, this.l);
  }
  
  private static String b(String paramString)
  {
    String str = paramString;
    if (paramString == null) {
      str = "application/octet-stream";
    }
    return str;
  }
  
  private static byte[] b(String paramString1, String paramString2)
  {
    return ("Content-Disposition: form-data; name=\"" + paramString1 + "\"; filename=\"" + paramString2 + "\"\r\n").getBytes();
  }
  
  private static byte[] c(String paramString)
  {
    return ("Content-Type: " + b(paramString) + "\r\n").getBytes();
  }
  
  public final void a(String paramString1, File paramFile, String paramString2)
  {
    this.h.add(new f(this, paramString1, paramFile, b(paramString2)));
  }
  
  public final void a(String paramString1, String paramString2, InputStream paramInputStream, String paramString3)
  {
    this.i.write(this.e);
    this.i.write(b(paramString1, paramString2));
    this.i.write(c(paramString3));
    this.i.write(b);
    this.i.write(a);
    paramString1 = new byte['က'];
    for (;;)
    {
      int m = paramInputStream.read(paramString1);
      if (m == -1)
      {
        this.i.write(a);
        this.i.flush();
        a.a(this.i);
        return;
      }
      this.i.write(paramString1, 0, m);
    }
  }
  
  public final void a(String paramString1, String paramString2, String paramString3)
  {
    String str = paramString3;
    if (paramString3 == null) {
      str = "UTF-8";
    }
    paramString3 = "text/plain; charset=" + str;
    try
    {
      this.i.write(this.e);
      this.i.write(("Content-Disposition: form-data; name=\"" + paramString1 + "\"\r\n").getBytes());
      this.i.write(c(paramString3));
      this.i.write(a);
      this.i.write(paramString2.getBytes());
      this.i.write(a);
      return;
    }
    catch (IOException paramString1)
    {
      Log.e("SimpleMultipartEntity", "addPart ByteArrayOutputStream exception", paramString1);
    }
  }
  
  public final void a(boolean paramBoolean)
  {
    this.g = paramBoolean;
  }
  
  public final void consumeContent()
  {
    if (isStreaming()) {
      throw new UnsupportedOperationException("Streaming entity does not implement #consumeContent()");
    }
  }
  
  public final InputStream getContent()
  {
    throw new UnsupportedOperationException("getContent() is not supported. Use writeTo() instead.");
  }
  
  public final Header getContentEncoding()
  {
    return null;
  }
  
  public final long getContentLength()
  {
    long l1 = this.i.size();
    Iterator localIterator = this.h.iterator();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return l1 + this.f.length;
      }
      f localF = (f)localIterator.next();
      long l2 = localF.a.length() + a.length + localF.b.length;
      if (l2 < 0L) {
        return -1L;
      }
      l1 += l2;
    }
  }
  
  public final Header getContentType()
  {
    return new BasicHeader("Content-Type", "multipart/form-data; boundary=" + this.d);
  }
  
  public final boolean isChunked()
  {
    return false;
  }
  
  public final boolean isRepeatable()
  {
    return this.g;
  }
  
  public final boolean isStreaming()
  {
    return false;
  }
  
  public final void writeTo(OutputStream paramOutputStream)
  {
    this.k = 0;
    this.l = ((int)getContentLength());
    this.i.writeTo(paramOutputStream);
    a(this.i.size());
    Iterator localIterator = this.h.iterator();
    if (!localIterator.hasNext())
    {
      paramOutputStream.write(this.f);
      a(this.f.length);
      return;
    }
    f localF = (f)localIterator.next();
    paramOutputStream.write(localF.b);
    localF.c.a(localF.b.length);
    FileInputStream localFileInputStream = new FileInputStream(localF.a);
    byte[] arrayOfByte = new byte['က'];
    for (;;)
    {
      int m = localFileInputStream.read(arrayOfByte);
      if (m == -1)
      {
        paramOutputStream.write(a);
        localF.c.a(a.length);
        paramOutputStream.flush();
        a.a(localFileInputStream);
        break;
      }
      paramOutputStream.write(arrayOfByte, 0, m);
      localF.c.a(m);
    }
  }
}
