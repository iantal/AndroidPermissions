package com.fastfun.sdk.util;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.URLEncoder;
import java.util.Enumeration;
import java.util.Locale;

public class DeviceUtils
{
  public DeviceUtils() {}
  
  public static void appendDeviceInfo(Context paramContext, StringBuffer paramStringBuffer)
  {
    paramStringBuffer.append("&").append("imei").append("=").append(getImei(paramContext));
    paramStringBuffer.append("&").append("imsi").append("=").append(getImsi(paramContext));
    paramStringBuffer.append("&").append("iccid").append("=").append(getIccid(paramContext));
    paramStringBuffer.append("&").append("pmodel").append("=").append(encodeData(getModel()));
    paramStringBuffer.append("&").append("osversion").append("=").append(encodeData(getRelease()));
    paramStringBuffer.append("&").append("nwtype").append("=").append(encodeData(getNetWorkType(paramContext)));
    paramStringBuffer.append("&").append("ctech").append("=").append(encodeData(getNetworkClass(paramContext)));
  }
  
  private static String emptyStr(String paramString)
  {
    String str = paramString;
    if (TextUtils.isEmpty(paramString)) {
      str = "";
    }
    return str;
  }
  
  private static String encodeData(String paramString)
  {
    try
    {
      paramString = URLEncoder.encode(paramString, "UTF-8");
      return paramString;
    }
    catch (UnsupportedEncodingException paramString)
    {
      paramString.printStackTrace();
    }
    return "";
  }
  
  public static String getCarrierName(Context paramContext)
  {
    try
    {
      String str = ((TelephonyManager)paramContext.getSystemService("phone")).getNetworkOperatorName();
      return str;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return getImsi(paramContext);
  }
  
  public static String getCountryCode()
  {
    try
    {
      String str1 = Locale.getDefault().getCountry();
      return emptyStr(str1);
    }
    catch (Exception localException)
    {
      for (;;)
      {
        String str2 = "";
      }
    }
  }
  
  public static String getCpuRatioCur()
  {
    try
    {
      String str = new BufferedReader(new FileReader("/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq")).readLine().trim();
      return str;
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      localFileNotFoundException.printStackTrace();
      return "";
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        localIOException.printStackTrace();
      }
    }
  }
  
  public static String getCpuRatioMax()
  {
    for (String str1 = "";; str1 = str1 + new String(arrayOfByte))
    {
      try
      {
        InputStream localInputStream = new ProcessBuilder(new String[] { "/system/bin/cat", "/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq" }).start().getInputStream();
        arrayOfByte = new byte[24];
        if (localInputStream.read(arrayOfByte) != -1) {
          continue;
        }
        localInputStream.close();
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          byte[] arrayOfByte;
          localIOException.printStackTrace();
          String str2 = "N/A";
        }
      }
      return str1.trim();
    }
  }
  
  public static int getHeightPixels(Context paramContext)
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
    return localDisplayMetrics.heightPixels;
  }
  
  public static final String getIccid(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSimSerialNumber();
      return paramContext;
    }
    catch (Exception paramContext) {}
    return "";
  }
  
  public static String getImei(Context paramContext)
  {
    String str2 = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
    String str1;
    if (str2 != null)
    {
      str1 = str2;
      if (str2.length() > 0) {}
    }
    else
    {
      str1 = getImsi(paramContext);
    }
    return str1;
  }
  
  public static final String getImsi(Context paramContext)
  {
    return ImsiUtil.getImsi(paramContext);
  }
  
  public static String getIpAddress()
  {
    try
    {
      localObject = NetworkInterface.getNetworkInterfaces();
      boolean bool = ((Enumeration)localObject).hasMoreElements();
      if (bool) {
        break label18;
      }
    }
    catch (SocketException localSocketException)
    {
      for (;;)
      {
        Object localObject;
        label18:
        Enumeration localEnumeration;
        InetAddress localInetAddress;
        Log.e("WifiPreference IpAddress", localSocketException.toString());
      }
    }
    return "";
    localEnumeration = ((NetworkInterface)((Enumeration)localObject).nextElement()).getInetAddresses();
    do
    {
      if (!localEnumeration.hasMoreElements()) {
        break;
      }
      localInetAddress = (InetAddress)localEnumeration.nextElement();
    } while (localInetAddress.isLoopbackAddress());
    localObject = localInetAddress.getHostAddress().toString();
    return localObject;
  }
  
  public static String getLanguageCode()
  {
    try
    {
      String str1 = Locale.getDefault().getLanguage();
      return emptyStr(str1);
    }
    catch (Exception localException)
    {
      for (;;)
      {
        String str2 = "";
      }
    }
  }
  
  /* Error */
  public static String getMacAddress(Context paramContext)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 270
    //   4: invokevirtual 95	android/content/Context:getSystemService	(Ljava/lang/String;)Ljava/lang/Object;
    //   7: checkcast 272	android/net/wifi/WifiManager
    //   10: invokevirtual 276	android/net/wifi/WifiManager:getConnectionInfo	()Landroid/net/wifi/WifiInfo;
    //   13: invokevirtual 280	android/net/wifi/WifiInfo:getMacAddress	()Ljava/lang/String;
    //   16: astore_0
    //   17: aload_0
    //   18: ifnull +14 -> 32
    //   21: aload_0
    //   22: astore_1
    //   23: aload_0
    //   24: ldc 71
    //   26: invokevirtual 284	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   29: ifeq +7 -> 36
    //   32: ldc_w 286
    //   35: astore_1
    //   36: aload_1
    //   37: areturn
    //   38: astore_1
    //   39: ldc_w 286
    //   42: astore_0
    //   43: aload_1
    //   44: invokevirtual 101	java/lang/Exception:printStackTrace	()V
    //   47: aload_0
    //   48: areturn
    //   49: astore_1
    //   50: goto -7 -> 43
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	53	0	paramContext	Context
    //   22	15	1	localObject	Object
    //   38	6	1	localException1	Exception
    //   49	1	1	localException2	Exception
    // Exception table:
    //   from	to	target	type
    //   0	17	38	java/lang/Exception
    //   23	32	49	java/lang/Exception
  }
  
  public static String getManufacturer()
  {
    return Build.MANUFACTURER;
  }
  
  public static String getMenoryRatio()
  {
    try
    {
      String str = new BufferedReader(new FileReader("/proc/meminfo"), 8192).readLine();
      if (str != null)
      {
        str = str.substring(str.indexOf(":") + 2, str.indexOf("k") - 1).trim();
        return str;
      }
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return "";
  }
  
  public static String getModel()
  {
    return Build.MODEL;
  }
  
  public static String getNetWorkType(Context paramContext)
  {
    try
    {
      Object localObject = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if ((localObject != null) && (((NetworkInfo)localObject).isConnected()))
      {
        localObject = ((NetworkInfo)localObject).getTypeName();
        if (((String)localObject).equalsIgnoreCase("WIFI")) {
          return "WIFI";
        }
        if (((String)localObject).equalsIgnoreCase("MOBILE")) {
          return ((TelephonyManager)paramContext.getSystemService("phone")).getNetworkType();
        }
        return "";
      }
    }
    catch (Exception paramContext)
    {
      return "";
    }
    return "";
  }
  
  public static String getNetworkClass(Context paramContext)
  {
    return NetworkClassUtil.getNetworkClass(getNetWorkType(paramContext));
  }
  
  public static String getNetworkTypeName(Context paramContext)
  {
    try
    {
      paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if (paramContext == null) {
        return "GPRS";
      }
      paramContext = paramContext.getTypeName();
      if (paramContext.compareTo("MOBILE") != 0)
      {
        int i = paramContext.compareTo("mobile");
        if (i != 0) {}
      }
      else
      {
        return "GPRS";
      }
      paramContext = paramContext.trim();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "GPRS";
  }
  
  public static String getRelease()
  {
    return Build.VERSION.RELEASE;
  }
  
  public static String getSSID(Context paramContext)
  {
    try
    {
      paramContext = ((WifiManager)paramContext.getSystemService("wifi")).getConnectionInfo().getSSID();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  public static int getScreenDensity(Context paramContext)
  {
    try
    {
      DisplayMetrics localDisplayMetrics = new DisplayMetrics();
      ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
      int i = localDisplayMetrics.densityDpi;
      return i;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return 0;
  }
  
  /* Error */
  public static long[] getTcpRxTxBytes(Context paramContext)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 13
    //   3: aconst_null
    //   4: astore 12
    //   6: lconst_0
    //   7: lstore 8
    //   9: aload_0
    //   10: invokestatic 373	com/fastfun/sdk/util/DeviceUtils:getUid	(Landroid/content/Context;)I
    //   13: istore_1
    //   14: new 171	java/lang/StringBuilder
    //   17: dup
    //   18: ldc_w 375
    //   21: invokespecial 176	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   24: iload_1
    //   25: invokevirtual 378	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   28: ldc_w 380
    //   31: invokevirtual 182	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   34: invokevirtual 185	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   37: astore_0
    //   38: new 171	java/lang/StringBuilder
    //   41: dup
    //   42: ldc_w 375
    //   45: invokespecial 176	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   48: iload_1
    //   49: invokevirtual 378	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   52: ldc_w 382
    //   55: invokevirtual 182	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   58: invokevirtual 185	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   61: astore 15
    //   63: new 122	java/io/FileReader
    //   66: dup
    //   67: aload_0
    //   68: invokespecial 127	java/io/FileReader:<init>	(Ljava/lang/String;)V
    //   71: astore 11
    //   73: new 120	java/io/BufferedReader
    //   76: dup
    //   77: aload 11
    //   79: sipush 500
    //   82: invokespecial 299	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   85: astore 10
    //   87: aload 10
    //   89: invokevirtual 133	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   92: invokevirtual 254	java/lang/String:toString	()Ljava/lang/String;
    //   95: invokevirtual 138	java/lang/String:trim	()Ljava/lang/String;
    //   98: invokestatic 388	java/lang/Long:parseLong	(Ljava/lang/String;)J
    //   101: lstore 4
    //   103: aload 11
    //   105: ifnull +8 -> 113
    //   108: aload 11
    //   110: invokevirtual 389	java/io/FileReader:close	()V
    //   113: lload 4
    //   115: lstore_2
    //   116: aload 10
    //   118: ifnull +11 -> 129
    //   121: aload 10
    //   123: invokevirtual 390	java/io/BufferedReader:close	()V
    //   126: lload 4
    //   128: lstore_2
    //   129: new 122	java/io/FileReader
    //   132: dup
    //   133: aload 15
    //   135: invokespecial 127	java/io/FileReader:<init>	(Ljava/lang/String;)V
    //   138: astore 10
    //   140: new 120	java/io/BufferedReader
    //   143: dup
    //   144: aload 10
    //   146: sipush 500
    //   149: invokespecial 299	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   152: astore_0
    //   153: aload_0
    //   154: invokevirtual 133	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   157: invokevirtual 254	java/lang/String:toString	()Ljava/lang/String;
    //   160: invokevirtual 138	java/lang/String:trim	()Ljava/lang/String;
    //   163: invokestatic 388	java/lang/Long:parseLong	(Ljava/lang/String;)J
    //   166: lstore 6
    //   168: aload 10
    //   170: ifnull +8 -> 178
    //   173: aload 10
    //   175: invokevirtual 389	java/io/FileReader:close	()V
    //   178: lload 6
    //   180: lstore 4
    //   182: aload_0
    //   183: ifnull +11 -> 194
    //   186: aload_0
    //   187: invokevirtual 390	java/io/BufferedReader:close	()V
    //   190: lload 6
    //   192: lstore 4
    //   194: lload_2
    //   195: lstore 6
    //   197: lload_2
    //   198: lconst_0
    //   199: lcmp
    //   200: ifge +6 -> 206
    //   203: lconst_0
    //   204: lstore 6
    //   206: lload 4
    //   208: lconst_0
    //   209: lcmp
    //   210: ifge +214 -> 424
    //   213: lload 8
    //   215: lstore_2
    //   216: iconst_2
    //   217: newarray long
    //   219: dup
    //   220: iconst_0
    //   221: lload 6
    //   223: lastore
    //   224: dup
    //   225: iconst_1
    //   226: lload_2
    //   227: lastore
    //   228: areturn
    //   229: astore 11
    //   231: aconst_null
    //   232: astore_0
    //   233: aconst_null
    //   234: astore 10
    //   236: aload 11
    //   238: invokevirtual 101	java/lang/Exception:printStackTrace	()V
    //   241: aload 10
    //   243: ifnull +8 -> 251
    //   246: aload 10
    //   248: invokevirtual 389	java/io/FileReader:close	()V
    //   251: aload_0
    //   252: ifnull +306 -> 558
    //   255: aload_0
    //   256: invokevirtual 390	java/io/BufferedReader:close	()V
    //   259: lconst_0
    //   260: lstore_2
    //   261: goto -132 -> 129
    //   264: astore_0
    //   265: aload_0
    //   266: invokevirtual 101	java/lang/Exception:printStackTrace	()V
    //   269: lconst_0
    //   270: lstore_2
    //   271: goto -142 -> 129
    //   274: astore_0
    //   275: aconst_null
    //   276: astore 10
    //   278: aconst_null
    //   279: astore 11
    //   281: aload 11
    //   283: ifnull +8 -> 291
    //   286: aload 11
    //   288: invokevirtual 389	java/io/FileReader:close	()V
    //   291: aload 10
    //   293: ifnull +8 -> 301
    //   296: aload 10
    //   298: invokevirtual 390	java/io/BufferedReader:close	()V
    //   301: aload_0
    //   302: athrow
    //   303: astore 10
    //   305: aload 10
    //   307: invokevirtual 101	java/lang/Exception:printStackTrace	()V
    //   310: goto -9 -> 301
    //   313: astore_0
    //   314: aload_0
    //   315: invokevirtual 101	java/lang/Exception:printStackTrace	()V
    //   318: lload 4
    //   320: lstore_2
    //   321: goto -192 -> 129
    //   324: astore 11
    //   326: aconst_null
    //   327: astore_0
    //   328: aload 12
    //   330: astore 10
    //   332: aload 11
    //   334: invokevirtual 101	java/lang/Exception:printStackTrace	()V
    //   337: aload_0
    //   338: ifnull +7 -> 345
    //   341: aload_0
    //   342: invokevirtual 389	java/io/FileReader:close	()V
    //   345: aload 10
    //   347: ifnull +205 -> 552
    //   350: aload 10
    //   352: invokevirtual 390	java/io/BufferedReader:close	()V
    //   355: lconst_0
    //   356: lstore 4
    //   358: goto -164 -> 194
    //   361: astore_0
    //   362: aload_0
    //   363: invokevirtual 101	java/lang/Exception:printStackTrace	()V
    //   366: lconst_0
    //   367: lstore 4
    //   369: goto -175 -> 194
    //   372: astore_0
    //   373: aconst_null
    //   374: astore 10
    //   376: aload 13
    //   378: astore 11
    //   380: aload 10
    //   382: ifnull +8 -> 390
    //   385: aload 10
    //   387: invokevirtual 389	java/io/FileReader:close	()V
    //   390: aload 11
    //   392: ifnull +8 -> 400
    //   395: aload 11
    //   397: invokevirtual 390	java/io/BufferedReader:close	()V
    //   400: aload_0
    //   401: athrow
    //   402: astore 10
    //   404: aload 10
    //   406: invokevirtual 101	java/lang/Exception:printStackTrace	()V
    //   409: goto -9 -> 400
    //   412: astore_0
    //   413: aload_0
    //   414: invokevirtual 101	java/lang/Exception:printStackTrace	()V
    //   417: lload 6
    //   419: lstore 4
    //   421: goto -227 -> 194
    //   424: lload 4
    //   426: lstore_2
    //   427: goto -211 -> 216
    //   430: astore_0
    //   431: aload 13
    //   433: astore 11
    //   435: goto -55 -> 380
    //   438: astore 12
    //   440: aload_0
    //   441: astore 11
    //   443: aload 12
    //   445: astore_0
    //   446: goto -66 -> 380
    //   449: astore 11
    //   451: aload_0
    //   452: astore 12
    //   454: aload 11
    //   456: astore_0
    //   457: aload 10
    //   459: astore 11
    //   461: aload 12
    //   463: astore 10
    //   465: goto -85 -> 380
    //   468: astore 11
    //   470: aload 10
    //   472: astore_0
    //   473: aload 12
    //   475: astore 10
    //   477: goto -145 -> 332
    //   480: astore 11
    //   482: aload 10
    //   484: astore 12
    //   486: aload_0
    //   487: astore 10
    //   489: aload 12
    //   491: astore_0
    //   492: goto -160 -> 332
    //   495: astore_0
    //   496: aconst_null
    //   497: astore 10
    //   499: goto -218 -> 281
    //   502: astore_0
    //   503: goto -222 -> 281
    //   506: astore 12
    //   508: aload 10
    //   510: astore 11
    //   512: aload_0
    //   513: astore 10
    //   515: aload 12
    //   517: astore_0
    //   518: goto -237 -> 281
    //   521: astore 14
    //   523: aconst_null
    //   524: astore_0
    //   525: aload 11
    //   527: astore 10
    //   529: aload 14
    //   531: astore 11
    //   533: goto -297 -> 236
    //   536: astore 14
    //   538: aload 10
    //   540: astore_0
    //   541: aload 11
    //   543: astore 10
    //   545: aload 14
    //   547: astore 11
    //   549: goto -313 -> 236
    //   552: lconst_0
    //   553: lstore 4
    //   555: goto -361 -> 194
    //   558: lconst_0
    //   559: lstore_2
    //   560: goto -431 -> 129
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	563	0	paramContext	Context
    //   13	36	1	i	int
    //   115	445	2	l1	long
    //   101	453	4	l2	long
    //   166	252	6	l3	long
    //   7	207	8	l4	long
    //   85	212	10	localObject1	Object
    //   303	3	10	localException1	Exception
    //   330	56	10	localObject2	Object
    //   402	56	10	localException2	Exception
    //   463	81	10	localObject3	Object
    //   71	38	11	localFileReader	FileReader
    //   229	8	11	localException3	Exception
    //   279	8	11	localObject4	Object
    //   324	9	11	localException4	Exception
    //   378	64	11	localObject5	Object
    //   449	6	11	localObject6	Object
    //   459	1	11	localObject7	Object
    //   468	1	11	localException5	Exception
    //   480	1	11	localException6	Exception
    //   510	38	11	localObject8	Object
    //   4	325	12	localObject9	Object
    //   438	6	12	localObject10	Object
    //   452	38	12	localObject11	Object
    //   506	10	12	localObject12	Object
    //   1	431	13	localObject13	Object
    //   521	9	14	localException7	Exception
    //   536	10	14	localException8	Exception
    //   61	73	15	str	String
    // Exception table:
    //   from	to	target	type
    //   63	73	229	java/lang/Exception
    //   246	251	264	java/lang/Exception
    //   255	259	264	java/lang/Exception
    //   63	73	274	finally
    //   286	291	303	java/lang/Exception
    //   296	301	303	java/lang/Exception
    //   108	113	313	java/lang/Exception
    //   121	126	313	java/lang/Exception
    //   129	140	324	java/lang/Exception
    //   341	345	361	java/lang/Exception
    //   350	355	361	java/lang/Exception
    //   129	140	372	finally
    //   385	390	402	java/lang/Exception
    //   395	400	402	java/lang/Exception
    //   173	178	412	java/lang/Exception
    //   186	190	412	java/lang/Exception
    //   140	153	430	finally
    //   153	168	438	finally
    //   332	337	449	finally
    //   140	153	468	java/lang/Exception
    //   153	168	480	java/lang/Exception
    //   73	87	495	finally
    //   87	103	502	finally
    //   236	241	506	finally
    //   73	87	521	java/lang/Exception
    //   87	103	536	java/lang/Exception
  }
  
  private static int getUid(Context paramContext)
  {
    try
    {
      int i = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 1).uid;
      return i;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return -1;
  }
  
  public static int getVersionCode(Context paramContext)
  {
    try
    {
      int i = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 16384).versionCode;
      return i;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return 0;
  }
  
  public static int getWidthPixels(Context paramContext)
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
    return localDisplayMetrics.widthPixels;
  }
}
