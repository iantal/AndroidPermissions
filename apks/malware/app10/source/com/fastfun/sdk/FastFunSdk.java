package com.fastfun.sdk;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.os.Handler;
import android.util.Log;
import com.fastfun.sdk.mmlog.TrustInfo;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FastFunSdk
{
  private static final String BUNDLE_KEY_LOCAL_PAY_ID = "Key_LocalPayId";
  public static final int CODE_ERROR_NET_ERROR = 1001;
  public static final int CODE_ERROR_SEND_SMS_FAIL = 1002;
  public static final int CODE_OK = 1000;
  private static final String SMS_SEND_ACTION = "com.fastFunSdk.send.sms";
  public static final String TAG = FastFunSdk.class.getSimpleName();
  private static String mCpId = "test";
  private static Map<String, String> mCpParamMap;
  private static Handler mHandler = new Handler();
  private static Map<String, FastFunSdk.IOnFastFunSdkListener> mOnFastFunSdkListenerMap = new HashMap();
  private static String mPhoneNumber = "";
  private static Map<String, List<String>> mSmsCountMap;
  
  static
  {
    mCpParamMap = new HashMap();
    mSmsCountMap = new HashMap();
  }
  
  public FastFunSdk() {}
  
  private static BroadcastReceiver getBroadcastReceiver()
  {
    return new FastFunSdk.5();
  }
  
  private static void httpGetInitData(Context paramContext, String paramString)
  {
    paramContext = new FastFunSdk.1(paramContext, paramString);
    paramContext.setName("httpGetInitData");
    paramContext.start();
  }
  
  public static void init(Context paramContext, String paramString1, String paramString2)
  {
    try
    {
      mCpId = paramString1;
      mPhoneNumber = paramString2;
      TrustInfo.init(paramContext);
      TrustInfo.onResume(paramContext);
      httpGetInitData(paramContext, paramString1);
      return;
    }
    catch (Exception paramContext) {}
  }
  
  public static void onDestroy(Context paramContext) {}
  
  public static void onPause(Context paramContext) {}
  
  public static void onResume(Context paramContext) {}
  
  public static void pay(Context paramContext, int paramInt, String paramString, FastFunSdk.IOnFastFunSdkListener paramIOnFastFunSdkListener)
  {
    Log.v(TAG, "pay:" + paramInt + "==" + paramString);
    String str = System.currentTimeMillis();
    if (paramIOnFastFunSdkListener != null) {
      mOnFastFunSdkListenerMap.put(str, paramIOnFastFunSdkListener);
    }
    if (paramString != null) {
      mCpParamMap.put(str, paramString);
    }
    paramContext = new FastFunSdk.2(paramContext, paramInt, paramString, str, paramIOnFastFunSdkListener);
    paramContext.setName("FastFunSdk-Pay");
    paramContext.start();
  }
  
  private static void paySucceed(Context paramContext)
  {
    try
    {
      TrustInfo.pay(paramContext);
      TrustInfo.onPause(paramContext);
      TrustInfo.onResume(paramContext);
      return;
    }
    catch (Exception paramContext) {}
  }
  
  private static void sendMmSms(Context paramContext, int paramInt1, String paramString1, int paramInt2, String paramString2, String paramString3, short paramShort, float paramFloat, String paramString4, long paramLong, FastFunSdk.IOnFastFunSdkListener paramIOnFastFunSdkListener)
  {
    mHandler.postDelayed(new FastFunSdk.3(paramString1, paramInt1, paramContext, paramInt2, paramString3, paramString2, paramShort, paramIOnFastFunSdkListener, paramString4), paramLong);
    timeOut(paramString1);
  }
  
  private static void timeOut(String paramString)
  {
    mHandler.postDelayed(new FastFunSdk.4(paramString), 50000L);
  }
}
