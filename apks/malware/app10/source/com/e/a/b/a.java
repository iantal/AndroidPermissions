package com.e.a.b;

import android.os.Build.VERSION;
import android.text.TextUtils;
import com.e.a.d.b;
import com.e.a.d.e;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.URL;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.List;
import java.util.Locale;
import java.util.zip.GZIPInputStream;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLContext;
import org.apache.http.NameValuePair;
import org.apache.http.conn.ssl.AllowAllHostnameVerifier;

public class a
{
  private static final String a = com.e.a.c.a.d + "/Internet";
  private static final String b = com.e.a.c.a.d + "/Internet";
  private static a c;
  
  public a() {}
  
  public static a a()
  {
    if (c == null) {
      c = new a();
    }
    return c;
  }
  
  private String a(HttpURLConnection paramHttpURLConnection)
  {
    int i;
    try
    {
      i = paramHttpURLConnection.getResponseCode();
      if ((i < 200) || (300 < i))
      {
        localObject1 = paramHttpURLConnection.getErrorStream();
        com.e.a.d.c.a("httpURLConnection.getContentLength() = " + paramHttpURLConnection.getContentLength());
        if ((localObject1 != null) && (paramHttpURLConnection.getContentLength() >= 1)) {
          break label87;
        }
        throw new b(i);
      }
    }
    catch (IOException paramHttpURLConnection)
    {
      throw new b(5920);
    }
    Object localObject1 = paramHttpURLConnection.getInputStream();
    label87:
    Object localObject2 = paramHttpURLConnection.getContentEncoding();
    if ((localObject2 != null) && (((String)localObject2).toLowerCase(Locale.US).indexOf("gzip") > -1)) {
      localObject1 = new GZIPInputStream((InputStream)localObject1);
    }
    for (;;)
    {
      localObject2 = new ByteArrayOutputStream();
      byte[] arrayOfByte = new byte['Ѐ'];
      for (;;)
      {
        i = ((InputStream)localObject1).read(arrayOfByte);
        if (i == -1) {
          break;
        }
        ((ByteArrayOutputStream)localObject2).write(arrayOfByte, 0, i);
      }
      paramHttpURLConnection = paramHttpURLConnection.getContentType();
      if (paramHttpURLConnection.indexOf("charset=") != -1)
      {
        paramHttpURLConnection = paramHttpURLConnection.substring(paramHttpURLConnection.indexOf("charset=") + 8);
        if (TextUtils.isEmpty(paramHttpURLConnection)) {}
      }
      for (;;)
      {
        com.e.a.d.c.c("charset=" + paramHttpURLConnection);
        return new String(((ByteArrayOutputStream)localObject2).toByteArray(), paramHttpURLConnection).trim();
        paramHttpURLConnection = "UTF-8";
      }
    }
  }
  
  private HttpsURLConnection b(String paramString1, String paramString2, List paramList, int paramInt1, int paramInt2)
  {
    com.e.a.d.c.b("getHttpsURLConnection type        = " + paramString1);
    com.e.a.d.c.b("getHttpsURLConnection url         = " + paramString2);
    com.e.a.d.c.b("getHttpsURLConnection conTimeOut  = " + paramInt1);
    com.e.a.d.c.b("getHttpsURLConnection socTimeOut  = " + paramInt2);
    b();
    Object localObject = paramString2;
    List localList = paramList;
    if (paramList != null)
    {
      localObject = paramString2;
      localList = paramList;
      if ("GET".equalsIgnoreCase(paramString1))
      {
        localObject = a(paramString2, paramList);
        com.e.a.d.c.b("getHttpsURLConnection url         = " + (String)localObject);
        localList = null;
      }
    }
    for (;;)
    {
      try
      {
        paramString2 = (HttpsURLConnection)new URL((String)localObject).openConnection(Proxy.NO_PROXY);
        paramString2.setRequestMethod(paramString1);
        if ("POST".equalsIgnoreCase(paramString1))
        {
          paramString2.setDoInput(true);
          paramString2.setDoOutput(true);
          if (localList != null)
          {
            paramString1 = new StringBuilder();
            int j = localList.size();
            i = 0;
            if (i < j)
            {
              paramList = (NameValuePair)localList.get(i);
              paramString1.append(paramList.getName()).append("=").append(paramList.getValue());
              if (j > i + 1) {
                paramString1.append("&");
              }
              com.e.a.d.c.b("getHttpsURLConnection AddHeaderList        = " + paramList.getName() + " : " + paramList.getValue());
              i += 1;
              continue;
            }
            com.e.a.d.c.b(paramString1.toString());
            paramString2.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            paramString2.getOutputStream().write(paramString1.toString().getBytes());
            paramString2.getOutputStream().flush();
            paramString2.getOutputStream().close();
          }
        }
        paramString1 = SSLContext.getInstance("TLS");
        paramList = new c(this, null);
        localObject = new SecureRandom();
        paramString1.init(new KeyManager[0], new c[] { paramList }, (SecureRandom)localObject);
        paramString2.setSSLSocketFactory(paramString1.getSocketFactory());
        paramString2.setHostnameVerifier(new AllowAllHostnameVerifier());
        i = paramInt1;
        if (1 <= paramInt1) {
          break label601;
        }
        i = 5000;
      }
      catch (MalformedURLException paramString1)
      {
        int i;
        throw new b(5921);
      }
      catch (IOException paramString1)
      {
        throw new b(522);
      }
      catch (NoSuchAlgorithmException paramString1)
      {
        paramString1.printStackTrace();
        throw new b(5923);
      }
      catch (KeyManagementException paramString1)
      {
        paramString1.printStackTrace();
        throw new b(5924);
      }
      paramString2.setConnectTimeout(i);
      paramString2.setReadTimeout(paramInt1);
      paramString2.setDefaultUseCaches(false);
      paramString2.setInstanceFollowRedirects(true);
      paramString2.connect();
      paramInt1 = paramString2.getResponseCode();
      com.e.a.d.c.b("getHttpURLConnection statusCode = " + paramInt1);
      if (302 != paramInt1)
      {
        paramString1 = paramString2;
        if (301 != paramInt1) {}
      }
      else
      {
        paramString1 = b(paramString2.getHeaderField("Location"), localList);
      }
      return paramString1;
      label601:
      paramInt1 = paramInt2;
      if (1 > paramInt2) {
        paramInt1 = 20000;
      }
    }
  }
  
  private void b()
  {
    if (Build.VERSION.SDK_INT < 8) {
      System.setProperty("http.keepAlive", "false");
    }
  }
  
  private HttpsURLConnection c(String paramString, List paramList, int paramInt1, int paramInt2)
  {
    return b("GET", paramString, paramList, paramInt1, paramInt2);
  }
  
  public String a(String paramString, List paramList)
  {
    if (paramString.contains("?")) {
      return paramString + "&" + e.a(paramList, true);
    }
    return paramString + "?" + e.a(paramList, true);
  }
  
  public HttpURLConnection a(String paramString1, String paramString2, List paramList, int paramInt1, int paramInt2)
  {
    com.e.a.d.c.b("getHttpURLConnection type        = " + paramString1);
    com.e.a.d.c.b("getHttpURLConnection url         = " + paramString2);
    com.e.a.d.c.b("getHttpURLConnection conTimeOut  = " + paramInt1);
    com.e.a.d.c.b("getHttpURLConnection socTimeOut  = " + paramInt2);
    b();
    String str = paramString2;
    List localList = paramList;
    if (paramList != null)
    {
      str = paramString2;
      localList = paramList;
      if ("GET".equalsIgnoreCase(paramString1))
      {
        str = a(paramString2, paramList);
        com.e.a.d.c.b("getHttpsURLConnection url         = " + str);
        localList = null;
      }
    }
    for (;;)
    {
      try
      {
        paramString2 = (HttpURLConnection)new URL(str).openConnection(Proxy.NO_PROXY);
        paramString2.setRequestMethod(paramString1);
        if (!"POST".equalsIgnoreCase(paramString1)) {
          break label503;
        }
        paramString2.setDoInput(true);
        paramString2.setDoOutput(true);
        if (localList == null) {
          break label503;
        }
        paramString1 = new StringBuilder();
        int j = localList.size();
        i = 0;
        if (i < j)
        {
          paramList = (NameValuePair)localList.get(i);
          paramString1.append(paramList.getName()).append("=").append(paramList.getValue());
          if (j > i + 1) {
            paramString1.append("&");
          }
          com.e.a.d.c.b("getHttpsURLConnection AddHeaderList  = " + paramList.getName() + " : " + paramList.getValue());
          i += 1;
          continue;
        }
        com.e.a.d.c.b(paramString1.toString());
        paramString2.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        paramString2.getOutputStream().write(paramString1.toString().getBytes());
        paramString2.getOutputStream().flush();
        paramString2.getOutputStream().close();
      }
      catch (MalformedURLException paramString1)
      {
        throw new b("sdkUrl为空或格式错误", 5925);
      }
      catch (IOException paramString1)
      {
        throw new b("网络异常", 5926);
      }
      paramString2.setConnectTimeout(i);
      paramString2.setReadTimeout(paramInt1);
      paramString2.setDefaultUseCaches(false);
      paramString2.setInstanceFollowRedirects(true);
      paramString2.connect();
      paramInt1 = paramString2.getResponseCode();
      com.e.a.d.c.b("getHttpURLConnection statusCode = " + paramInt1);
      if (302 != paramInt1)
      {
        paramString1 = paramString2;
        if (301 != paramInt1) {}
      }
      else
      {
        paramString1 = c(paramString2.getHeaderField("Location"), localList);
      }
      return paramString1;
      label503:
      int i = paramInt1;
      if (1 > paramInt1) {
        i = 5000;
      }
      paramInt1 = paramInt2;
      if (1 > paramInt2) {
        paramInt1 = 20000;
      }
    }
  }
  
  public HttpURLConnection a(String paramString, List paramList, int paramInt1, int paramInt2)
  {
    return a("GET", paramString, paramList, paramInt1, paramInt2);
  }
  
  public String b(String paramString, List paramList, int paramInt1, int paramInt2)
  {
    if (paramString.startsWith("https")) {
      return a(c(paramString, paramList, paramInt1, paramInt2));
    }
    return a(a(paramString, paramList, paramInt1, paramInt2));
  }
  
  public HttpsURLConnection b(String paramString, List paramList)
  {
    return c(paramString, paramList, 5000, 20000);
  }
  
  public HttpURLConnection c(String paramString, List paramList)
  {
    if (paramString.startsWith("https")) {
      return b(paramString, paramList);
    }
    return a(paramString, paramList, 5000, 20000);
  }
}
