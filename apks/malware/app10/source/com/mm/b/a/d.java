package com.mm.b.a;

import android.os.Build;
import android.text.TextUtils;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.net.URLEncoder;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.message.BasicNameValuePair;

public abstract class d
  extends f
{
  private String m;
  private String n;
  private Map o;
  private l p;
  private boolean q;
  private boolean r;
  
  public d() {}
  
  private HttpUriRequest a(String paramString, Map paramMap, l paramL)
  {
    Iterator localIterator;
    if (paramL.equals(l.b))
    {
      paramL = new ArrayList();
      if (paramMap != null) {
        localIterator = paramMap.keySet().iterator();
      }
      for (;;)
      {
        if (!localIterator.hasNext()) {}
        try
        {
          paramMap = new UrlEncodedFormEntity(paramL);
          paramString = new HttpPost(paramString);
          paramString.setHeader(com.mm.c.a.f.I, b(com.mm.c.a.f.o + com.mm.c.a.f.w));
          paramString.setHeader(com.mm.c.a.f.C, com.mm.c.a.f.o);
          paramString.setEntity(paramMap);
          return paramString;
        }
        catch (UnsupportedEncodingException paramString)
        {
          String str;
          throw new RuntimeException(paramString.getMessage(), paramString);
        }
        str = (String)localIterator.next();
        paramL.add(new BasicNameValuePair(str, (String)paramMap.get(str)));
      }
    }
    if (paramString.indexOf("?") < 0) {
      paramString = paramString + "?";
    }
    for (;;)
    {
      if (paramMap != null)
      {
        localIterator = paramMap.keySet().iterator();
        if (!localIterator.hasNext()) {
          label224:
          paramString = paramString.replace("?&", "?").replace("+", "");
        }
      }
      for (;;)
      {
        try
        {
          if (!TextUtils.isEmpty(com.mm.c.a.f.n))
          {
            com.mm.c.a.f.n = URLEncoder.encode(com.mm.c.a.f.n, "utf-8");
            if (com.mm.c.a.f.n.length() > 15000) {
              com.mm.c.a.f.n = com.mm.c.a.f.n.substring(0, 15000);
            }
          }
          paramL = Build.MODEL;
          paramMap = paramL;
          if (TextUtils.isEmpty(paramL)) {
            paramMap = "";
          }
          paramString = new HttpGet(paramString);
          paramString.setHeader("V", com.mm.c.a.f.a);
          paramString.setHeader("H", com.mm.c.a.f.c);
          paramString.setHeader(com.mm.c.a.f.x, com.mm.c.a.f.b);
          paramString.setHeader(com.mm.c.a.f.y, com.mm.c.a.f.f);
          paramString.setHeader(com.mm.c.a.f.z, com.mm.c.a.f.e);
          paramString.setHeader(com.mm.c.a.f.A, com.mm.c.a.f.d);
          paramString.setHeader(com.mm.c.a.f.B, com.mm.c.a.f.n);
          paramString.setHeader(com.mm.c.a.f.C, com.mm.c.a.f.o);
          paramString.setHeader(com.mm.c.a.f.D, b(com.mm.c.a.f.o + com.mm.c.a.f.v));
          paramString.setHeader(com.mm.c.a.f.E, paramMap);
          paramString.setHeader(com.mm.c.a.f.F, com.mm.c.a.f.g);
          paramString.setHeader(com.mm.c.a.f.G, com.mm.c.a.f.h);
          paramString.setHeader(com.mm.c.a.f.H, com.mm.c.a.f.i);
          return paramString;
          paramL = (String)localIterator.next();
          try
          {
            if (paramMap.get(paramL) == null) {
              break label224;
            }
            paramL = paramString + "&" + paramL + "=" + URLEncoder.encode((String)paramMap.get(paramL), "utf-8");
            paramString = paramL;
          }
          catch (Exception paramL)
          {
            paramL.printStackTrace();
          }
        }
        catch (UnsupportedEncodingException paramMap)
        {
          paramMap.printStackTrace();
        }
      }
    }
  }
  
  private static String b(String paramString)
  {
    String str2 = "";
    String str1 = str2;
    try
    {
      MessageDigest localMessageDigest = MessageDigest.getInstance("MD5");
      str1 = str2;
      localMessageDigest.update(paramString.getBytes());
      str1 = str2;
      paramString = new BigInteger(1, localMessageDigest.digest()).toString(16);
      str1 = paramString;
      paramString = paramString.toUpperCase();
      return paramString;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return str1;
  }
  
  /* Error */
  public final String a(String paramString1, String paramString2, Map paramMap, l paramL)
  {
    // Byte code:
    //   0: aload_1
    //   1: invokevirtual 298	java/lang/String:trim	()Ljava/lang/String;
    //   4: astore 5
    //   6: aconst_null
    //   7: astore_1
    //   8: new 300	org/apache/http/impl/client/DefaultHttpClient
    //   11: dup
    //   12: invokespecial 301	org/apache/http/impl/client/DefaultHttpClient:<init>	()V
    //   15: astore_2
    //   16: aload_2
    //   17: invokevirtual 305	org/apache/http/impl/client/DefaultHttpClient:getParams	()Lorg/apache/http/params/HttpParams;
    //   20: ldc_w 307
    //   23: ldc_w 308
    //   26: invokeinterface 314 3 0
    //   31: pop
    //   32: aload_2
    //   33: invokevirtual 305	org/apache/http/impl/client/DefaultHttpClient:getParams	()Lorg/apache/http/params/HttpParams;
    //   36: ldc_w 316
    //   39: sipush 20000
    //   42: invokeinterface 314 3 0
    //   47: pop
    //   48: aload_0
    //   49: aload 5
    //   51: aload_3
    //   52: aload 4
    //   54: invokespecial 318	com/mm/b/a/d:a	(Ljava/lang/String;Ljava/util/Map;Lcom/mm/b/a/l;)Lorg/apache/http/client/methods/HttpUriRequest;
    //   57: astore_3
    //   58: aload_2
    //   59: invokevirtual 305	org/apache/http/impl/client/DefaultHttpClient:getParams	()Lorg/apache/http/params/HttpParams;
    //   62: ldc_w 320
    //   65: ldc_w 322
    //   68: invokeinterface 326 3 0
    //   73: pop
    //   74: aload_2
    //   75: aload_3
    //   76: invokevirtual 330	org/apache/http/impl/client/DefaultHttpClient:execute	(Lorg/apache/http/client/methods/HttpUriRequest;)Lorg/apache/http/HttpResponse;
    //   79: astore_2
    //   80: aload_2
    //   81: invokeinterface 336 1 0
    //   86: invokeinterface 341 1 0
    //   91: sipush 200
    //   94: if_icmpne +39 -> 133
    //   97: new 75	java/lang/StringBuilder
    //   100: dup
    //   101: aload_2
    //   102: invokeinterface 345 1 0
    //   107: invokestatic 350	org/apache/http/util/EntityUtils:toString	(Lorg/apache/http/HttpEntity;)Ljava/lang/String;
    //   110: invokespecial 84	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   113: astore_1
    //   114: aload_0
    //   115: iconst_0
    //   116: putfield 292	com/mm/b/a/d:r	Z
    //   119: aload_1
    //   120: invokevirtual 95	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   123: ldc_w 352
    //   126: ldc_w 354
    //   129: invokevirtual 357	java/lang/String:replaceAll	(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
    //   132: astore_1
    //   133: aload_1
    //   134: areturn
    //   135: astore_1
    //   136: aload_1
    //   137: invokevirtual 358	java/net/SocketException:printStackTrace	()V
    //   140: aload_0
    //   141: iconst_1
    //   142: putfield 292	com/mm/b/a/d:r	Z
    //   145: aconst_null
    //   146: areturn
    //   147: astore_1
    //   148: aload_1
    //   149: athrow
    //   150: astore_1
    //   151: aload_0
    //   152: iconst_1
    //   153: putfield 292	com/mm/b/a/d:r	Z
    //   156: aload_1
    //   157: invokevirtual 251	java/lang/Exception:printStackTrace	()V
    //   160: aconst_null
    //   161: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	162	0	this	d
    //   0	162	1	paramString1	String
    //   0	162	2	paramString2	String
    //   0	162	3	paramMap	Map
    //   0	162	4	paramL	l
    //   4	46	5	str	String
    // Exception table:
    //   from	to	target	type
    //   8	80	135	java/net/SocketException
    //   80	133	135	java/net/SocketException
    //   8	80	147	finally
    //   80	133	147	finally
    //   136	145	147	finally
    //   151	160	147	finally
    //   8	80	150	java/lang/Exception
    //   80	133	150	java/lang/Exception
  }
  
  public abstract void a(String paramString);
  
  public final void a(String paramString1, String paramString2, Map paramMap, boolean paramBoolean, l paramL)
  {
    this.m = paramString1;
    this.n = paramString2;
    this.o = paramMap;
    this.p = paramL;
    this.q = paramBoolean;
    new i(this, null).execute(new String[0]);
  }
  
  public abstract void a(boolean paramBoolean, String paramString);
}
