package com.lepeng.utils;

import android.app.Activity;
import android.content.Context;
import android.net.Uri;
import android.text.ClipboardManager;
import android.text.Editable;
import android.text.TextUtils;
import android.util.Log;
import android.widget.EditText;
import com.lepeng.data.UtilApplication;
import com.lepeng.data.UtilData;
import com.lepeng.utils.exception.CheckedExceptionHandler;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class StrUtil
{
  public static final String EMPTY_STRING = "";
  
  public StrUtil() {}
  
  public static ArrayList<String> TenRandom(int paramInt)
  {
    ArrayList localArrayList = new ArrayList();
    Object localObject = new Random();
    HashSet localHashSet = new HashSet();
    do
    {
      localHashSet.add(Integer.valueOf(((Random)localObject).nextInt(paramInt)));
    } while (localHashSet.size() != 15);
    localObject = localHashSet.iterator();
    for (;;)
    {
      if (!((Iterator)localObject).hasNext()) {
        return localArrayList;
      }
      localArrayList.add(((Integer)((Iterator)localObject).next()).toString());
    }
  }
  
  public static String bytesToHexString(byte[] paramArrayOfByte)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    int i = 0;
    for (;;)
    {
      if (i >= paramArrayOfByte.length) {
        return localStringBuilder.toString();
      }
      String str = Integer.toHexString(paramArrayOfByte[i] & 0xFF);
      if (str.length() == 1) {
        localStringBuilder.append('0');
      }
      localStringBuilder.append(str);
      i += 1;
    }
  }
  
  public static boolean contains(String paramString, char paramChar)
  {
    if ((paramString == null) || (paramString.length() == 0)) {}
    while (paramString.indexOf(paramChar) < 0) {
      return false;
    }
    return true;
  }
  
  public static void copyText(String paramString)
  {
    ((ClipboardManager)UtilApplication.getInstance().ctx.getSystemService("clipboard")).setText(paramString);
    L.toastShort("已复制");
  }
  
  public static void etSelectionLast(EditText... paramVarArgs)
  {
    int i = 0;
    for (;;)
    {
      if (i >= paramVarArgs.length) {
        return;
      }
      paramVarArgs[i].setSelection(paramVarArgs[i].getText().toString().length());
      i += 1;
    }
  }
  
  public static String formetFileSize(long paramLong)
  {
    DecimalFormat localDecimalFormat = new DecimalFormat("#.00");
    if (paramLong < 0L) {
      return String.valueOf(paramLong);
    }
    if (paramLong < 1024L) {
      return localDecimalFormat.format(paramLong) + "B";
    }
    if (paramLong < 1048576L) {
      return localDecimalFormat.format(paramLong / 1024.0D) + "K";
    }
    if (paramLong < 1073741824L) {
      return localDecimalFormat.format(paramLong / 1048576.0D) + "M";
    }
    return localDecimalFormat.format(paramLong / 1.073741824E9D) + "G";
  }
  
  public static String getAbsoluteImagePath(Activity paramActivity, Uri paramUri)
  {
    if (paramUri.toString().startsWith("file://")) {
      return paramUri.toString().replace("file://", "");
    }
    return null;
  }
  
  public static <T extends UtilData> List<T> getDataArray(String paramString, Class<? extends UtilData> paramClass)
  {
    if (paramString == null) {
      return null;
    }
    ArrayList localArrayList = new ArrayList();
    try
    {
      UtilData localUtilData = (UtilData)paramClass.newInstance();
      paramString = new JSONArray(getUnBomString(paramString));
      int i = 0;
      for (;;)
      {
        if (i >= paramString.length()) {
          return localArrayList;
        }
        localArrayList.add(UtilData.fromString(paramClass, ((JSONObject)paramString.get(i)).toString()));
        i += 1;
      }
      return null;
    }
    catch (JSONException paramString)
    {
      CheckedExceptionHandler.handleException(paramString);
      return null;
    }
    catch (InstantiationException paramString)
    {
      CheckedExceptionHandler.handleException(paramString);
      return null;
    }
    catch (IllegalAccessException paramString)
    {
      CheckedExceptionHandler.handleException(paramString);
      return null;
    }
    catch (ClassCastException paramString)
    {
      CheckedExceptionHandler.handleException(paramString);
    }
  }
  
  public static <T extends UtilData> T getDataObject(String paramString, Class<? extends UtilData> paramClass)
  {
    if (paramString == null) {
      return null;
    }
    return UtilData.fromString(paramClass, paramString);
  }
  
  public static String getFileNameByPath(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    return paramString.substring(paramString.lastIndexOf("/") + 1);
  }
  
  public static String getFileNameExtensionByPath(String paramString)
  {
    if (paramString == null) {}
    do
    {
      return null;
      paramString = paramString.substring(paramString.lastIndexOf(".") + 1);
    } while (paramString == null);
    return paramString.toLowerCase(UtilApplication.getInstance().getDefaultLocale());
  }
  
  public static String getNum(String paramString)
  {
    if (Pattern.compile("^((\\+{0,1}86){0,1})1[0-9]{10}").matcher(paramString).matches())
    {
      paramString = Pattern.compile("^((\\+{0,1}86){0,1})").matcher(paramString);
      StringBuffer localStringBuffer = new StringBuffer();
      for (;;)
      {
        if (!paramString.find())
        {
          paramString.appendTail(localStringBuffer);
          return localStringBuffer.toString();
        }
        paramString.appendReplacement(localStringBuffer, "");
      }
    }
    return "0";
  }
  
  public static String getNumber(Integer paramInteger)
  {
    if (paramInteger != null)
    {
      int i = paramInteger.intValue();
      if (i <= 0) {
        return "0";
      }
      if ((i > 0) && (i <= 100)) {
        return paramInteger.toString();
      }
      return "...";
    }
    return "0";
  }
  
  public static String getPhotoFileName()
  {
    Date localDate = new Date(System.currentTimeMillis());
    return new SimpleDateFormat("'IMG'_yyyy-MM-dd-HH-mm-ss", UtilApplication.getInstance().getDefaultLocale()).format(localDate);
  }
  
  public static String getShortClassName(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    return paramString.substring(paramString.lastIndexOf(".") + 1);
  }
  
  public static String getUnBomString(String paramString)
  {
    String str = paramString;
    if (paramString != null)
    {
      str = paramString;
      if (paramString.startsWith("﻿")) {
        str = paramString.substring(1);
      }
    }
    return str.toString();
  }
  
  public static String getxmlresult(String paramString)
  {
    if (!TextUtils.isEmpty(paramString))
    {
      if (paramString.indexOf("<result>") != -1)
      {
        String str1 = paramString.substring(paramString.indexOf("<result>") + "<result>".length(), paramString.lastIndexOf("</result>"));
        String str2 = paramString.substring(paramString.indexOf("<msg>") + "<msg>".length(), paramString.lastIndexOf("</msg>"));
        paramString = paramString.substring(paramString.indexOf("<sid>") + "<sid>".length(), paramString.lastIndexOf("</sid>"));
        Log.e("xmlresult===", "result=" + str1 + ",msg=" + str2 + ",sid=" + paramString);
        return str1 + "," + str2 + "," + paramString;
      }
    }
    else {
      return "";
    }
    return "";
  }
  
  public static String getyzm(String paramString)
  {
    paramString = Pattern.compile("[a-zA-Z0-9]{6}").matcher(paramString);
    if (paramString.find())
    {
      paramString = paramString.group().substring(0, 6);
      Log.e("getyzmmatchersuccess", paramString);
      return paramString;
    }
    Log.e("getyzmmatchererror", "");
    return "";
  }
  
  public static boolean isChinese(String paramString)
  {
    return paramString.length() < paramString.getBytes().length;
  }
  
  public static boolean isEmptyOrNull(String paramString)
  {
    return (paramString == null) || (paramString.trim().length() == 0) || (paramString.equalsIgnoreCase("null")) || (paramString.equals(""));
  }
  
  public static boolean isLowerChar(char paramChar)
  {
    return (paramChar >= 'a') && (paramChar <= 'z');
  }
  
  public static boolean isMaxLen1000(String paramString)
  {
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (paramString != null)
    {
      bool1 = bool2;
      if (!paramString.equals(""))
      {
        bool1 = bool2;
        if (paramString.length() <= 1000) {
          bool1 = true;
        }
      }
    }
    return bool1;
  }
  
  public static boolean isMinLen2(String paramString)
  {
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (paramString != null)
    {
      bool1 = bool2;
      if (!paramString.equals(""))
      {
        bool1 = bool2;
        if (paramString.length() >= 2) {
          bool1 = true;
        }
      }
    }
    return bool1;
  }
  
  public static boolean isMobile(String paramString)
  {
    return Pattern.compile("^((13[0-9])|(15[^4,\\D])|(18[0,5-9]))\\d{8}$").matcher(paramString).matches();
  }
  
  public static boolean isNumeric(String paramString)
  {
    int i = paramString.length();
    int j;
    do
    {
      i -= 1;
      if (i < 0) {
        return true;
      }
      j = paramString.charAt(i);
    } while ((j >= 48) && (j <= 57));
    return false;
  }
  
  public static boolean isUpperChar(char paramChar)
  {
    return (paramChar >= 'A') && (paramChar <= 'Z');
  }
  
  public static <T> List<T> listInvert(List<T> paramList)
  {
    ArrayList localArrayList = new ArrayList();
    int i;
    if ((paramList != null) && (paramList.size() > 0)) {
      i = 0;
    }
    for (;;)
    {
      if (i >= paramList.size()) {
        return localArrayList;
      }
      localArrayList.add(0, paramList.get(i));
      i += 1;
    }
  }
  
  public static <T> boolean listNotNull(List<T> paramList)
  {
    return (paramList != null) && (paramList.size() > 0);
  }
  
  public static String makeLongRepeatString(String paramString, int paramInt)
  {
    if (paramString == null) {
      return "";
    }
    StringBuffer localStringBuffer = new StringBuffer();
    int i = 0;
    for (;;)
    {
      if (i >= paramInt) {
        return localStringBuffer.toString();
      }
      localStringBuffer.append(paramString);
      i += 1;
    }
  }
  
  public static boolean notEmptyOrNull(String paramString)
  {
    return (paramString != null) && (!paramString.equalsIgnoreCase("null")) && (!paramString.equalsIgnoreCase("[]")) && (paramString.trim().length() > 0);
  }
  
  public static boolean notEmptyOrNullOr0(String paramString)
  {
    return (paramString != null) && (!paramString.equalsIgnoreCase("null")) && (paramString.trim().length() > 0) && (!"0".equals(paramString));
  }
  
  public static String subStr(String paramString, int paramInt)
  {
    if (paramInt >= paramString.length()) {
      return paramString;
    }
    return paramString.substring(0, paramInt);
  }
  
  public static String subStrDot(String paramString, int paramInt)
  {
    if (paramInt >= paramString.length()) {
      return paramString;
    }
    return paramString.substring(0, paramInt) + "...";
  }
  
  public static String substring(String paramString, int paramInt)
  {
    try
    {
      paramString = paramString.substring(paramInt);
      return paramString;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return "";
  }
  
  public static String substring(String paramString, int paramInt1, int paramInt2)
  {
    try
    {
      paramString = paramString.substring(paramInt1, paramInt1 + paramInt2);
      return paramString;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return "";
  }
  
  public static String toDbc(String paramString)
  {
    paramString = paramString.toCharArray();
    int i = 0;
    if (i >= paramString.length) {
      return new String(paramString);
    }
    if (paramString[i] == '　') {
      paramString[i] = 32;
    }
    for (;;)
    {
      i += 1;
      break;
      if ((paramString[i] > 65280) && (paramString[i] < 65375)) {
        paramString[i] = ((char)(paramString[i] - 65248));
      }
    }
  }
}
