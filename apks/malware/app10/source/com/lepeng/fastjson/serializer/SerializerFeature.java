package com.lepeng.fastjson.serializer;

public enum SerializerFeature
{
  private final int i = 1 << ordinal();
  
  static
  {
    WriteEnumUsingToString = new SerializerFeature("WriteEnumUsingToString", 3);
    UseISO8601DateFormat = new SerializerFeature("UseISO8601DateFormat", 4);
    WriteNullListAsEmpty = new SerializerFeature("WriteNullListAsEmpty", 5);
    WriteNullStringAsEmpty = new SerializerFeature("WriteNullStringAsEmpty", 6);
    WriteNullNumberAsZero = new SerializerFeature("WriteNullNumberAsZero", 7);
    WriteNullBooleanAsFalse = new SerializerFeature("WriteNullBooleanAsFalse", 8);
    SkipTransientField = new SerializerFeature("SkipTransientField", 9);
    SortField = new SerializerFeature("SortField", 10);
    WriteTabAsSpecial = new SerializerFeature("WriteTabAsSpecial", 11);
    PrettyFormat = new SerializerFeature("PrettyFormat", 12);
    WriteClassName = new SerializerFeature("WriteClassName", 13);
    DisableCircularReferenceDetect = new SerializerFeature("DisableCircularReferenceDetect", 14);
    WriteSlashAsSpecial = new SerializerFeature("WriteSlashAsSpecial", 15);
    BrowserCompatible = new SerializerFeature("BrowserCompatible", 16);
    WriteDateUseDateFormat = new SerializerFeature("WriteDateUseDateFormat", 17);
    NotWriteRootClassName = new SerializerFeature("NotWriteRootClassName", 18);
  }
  
  public static int config(int paramInt, SerializerFeature paramSerializerFeature, boolean paramBoolean)
  {
    if (paramBoolean) {
      return paramSerializerFeature.getMask() | paramInt;
    }
    return (paramSerializerFeature.getMask() ^ 0xFFFFFFFF) & paramInt;
  }
  
  public static boolean isEnabled(int paramInt, SerializerFeature paramSerializerFeature)
  {
    return (paramSerializerFeature.getMask() & paramInt) != 0;
  }
  
  public final int getMask()
  {
    return this.i;
  }
}
