package com.lepeng.fastjson.parser;

import com.lepeng.fastjson.JSON;
import com.lepeng.fastjson.JSONException;
import com.lepeng.fastjson.util.Base64;
import com.lepeng.fastjson.util.IOUtils;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.lang.ref.SoftReference;

public final class JSONReaderScanner
  extends JSONLexer
{
  public static final int BUF_INIT_LEN = 8192;
  private static final ThreadLocal<SoftReference<char[]>> b = new ThreadLocal();
  private char[] buf;
  private int j;
  private Reader reader;
  
  public JSONReaderScanner(Reader paramReader)
  {
    this(paramReader, JSON.DEFAULT_PARSER_FEATURE);
  }
  
  public JSONReaderScanner(Reader paramReader, int paramInt)
  {
    this.reader = paramReader;
    this.features = paramInt;
    SoftReference localSoftReference = (SoftReference)b.get();
    if (localSoftReference != null)
    {
      this.buf = ((char[])localSoftReference.get());
      b.set(null);
    }
    if (this.buf == null) {
      this.buf = new char['â€€'];
    }
    try
    {
      this.j = paramReader.read(this.buf);
      this.bp = -1;
      next();
      if (this.ch == 65279) {
        next();
      }
      return;
    }
    catch (IOException paramReader)
    {
      throw new JSONException(paramReader.getMessage(), paramReader);
    }
  }
  
  public JSONReaderScanner(String paramString)
  {
    this(paramString, JSON.DEFAULT_PARSER_FEATURE);
  }
  
  public JSONReaderScanner(String paramString, int paramInt)
  {
    this(new StringReader(paramString), paramInt);
  }
  
  public JSONReaderScanner(char[] paramArrayOfChar, int paramInt)
  {
    this(paramArrayOfChar, paramInt, JSON.DEFAULT_PARSER_FEATURE);
  }
  
  public JSONReaderScanner(char[] paramArrayOfChar, int paramInt1, int paramInt2)
  {
    this(new CharArrayReader(paramArrayOfChar, 0, paramInt1), paramInt2);
  }
  
  public final String addSymbol(int paramInt1, int paramInt2, int paramInt3, SymbolTable paramSymbolTable)
  {
    return paramSymbolTable.addSymbol(this.buf, paramInt1, paramInt2, paramInt3);
  }
  
  protected final void arrayCopy(int paramInt1, char[] paramArrayOfChar, int paramInt2, int paramInt3)
  {
    System.arraycopy(this.buf, paramInt1, paramArrayOfChar, paramInt2, paramInt3);
  }
  
  public byte[] bytesValue()
  {
    return Base64.decodeFast(this.buf, this.np + 1, this.sp);
  }
  
  public final char charAt(int paramInt)
  {
    char c = '\032';
    int i = paramInt;
    if (paramInt >= this.j)
    {
      if (this.j == -1) {
        if (paramInt < this.sp) {
          c = this.buf[paramInt];
        }
      }
      do
      {
        return c;
        i = this.j - this.bp;
        if (i > 0) {
          System.arraycopy(this.buf, this.bp, this.buf, 0, i);
        }
        try
        {
          this.j = this.reader.read(this.buf, i, this.buf.length - i);
          if (this.j == 0) {
            throw new JSONException("illegal stat, textLength is zero");
          }
        }
        catch (IOException localIOException)
        {
          throw new JSONException(localIOException.getMessage(), localIOException);
        }
      } while (this.j == -1);
      this.j += i;
      i = paramInt - this.bp;
      this.np -= this.bp;
      this.bp = 0;
    }
    return this.buf[i];
  }
  
  public void close()
  {
    super.close();
    b.set(new SoftReference(this.buf));
    this.buf = null;
    IOUtils.close(this.reader);
  }
  
  protected final void copyTo(int paramInt1, int paramInt2, char[] paramArrayOfChar)
  {
    System.arraycopy(this.buf, paramInt1, paramArrayOfChar, 0, paramInt2);
  }
  
  public boolean isEOF()
  {
    return (this.j == -1) || (this.bp == this.buf.length) || ((this.ch == '\032') && (this.bp + 1 == this.buf.length));
  }
  
  public final char next()
  {
    int k = this.bp + 1;
    this.bp = k;
    int i = k;
    if (k >= this.j)
    {
      if (this.j == -1) {
        return '\032';
      }
      if (this.sp > 0)
      {
        if (this.token != 4) {
          break label146;
        }
        System.arraycopy(this.buf, this.buf.length - this.sp, this.buf, 0, this.sp);
      }
      for (this.np = (this.sp - 1);; this.np = 0)
      {
        i = this.sp;
        this.bp = i;
        try
        {
          k = this.bp;
          int m = this.buf.length;
          this.j = this.reader.read(this.buf, this.bp, m - k);
          if (this.j != 0) {
            break;
          }
          throw new JSONException("illegal stat, textLength is zero");
        }
        catch (IOException localIOException)
        {
          label146:
          throw new JSONException(localIOException.getMessage(), localIOException);
        }
        System.arraycopy(this.buf, this.j - this.sp, this.buf, 0, this.sp);
      }
      if (this.j == -1)
      {
        this.ch = '\032';
        return '\032';
      }
      this.j += this.bp;
    }
    char c = this.buf[i];
    this.ch = c;
    return c;
  }
  
  public final String numberString()
  {
    int m = charAt(this.np + this.sp - 1);
    int k = this.sp;
    int i;
    if ((m != 76) && (m != 83) && (m != 66) && (m != 70))
    {
      i = k;
      if (m != 68) {}
    }
    else
    {
      i = k - 1;
    }
    return new String(this.buf, this.np, i);
  }
  
  public final String stringVal()
  {
    if (!this.hasSpecial) {
      return new String(this.buf, this.np + 1, this.sp);
    }
    return new String(this.sbuf, 0, this.sp);
  }
}
