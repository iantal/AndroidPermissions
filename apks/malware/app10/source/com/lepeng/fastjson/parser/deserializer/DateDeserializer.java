package com.lepeng.fastjson.parser.deserializer;

import com.lepeng.fastjson.JSONException;
import com.lepeng.fastjson.parser.DefaultJSONParser;
import com.lepeng.fastjson.parser.JSONScanner;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;

public class DateDeserializer
  extends AbstractDateDeserializer
  implements ObjectDeserializer
{
  public static final DateDeserializer instance = new DateDeserializer();
  
  public DateDeserializer() {}
  
  protected <T> T cast(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject1, Object paramObject2)
  {
    if (paramObject2 == null) {
      paramType = null;
    }
    do
    {
      return paramType;
      paramType = paramObject2;
    } while ((paramObject2 instanceof Date));
    if ((paramObject2 instanceof Number)) {
      return new Date(((Number)paramObject2).longValue());
    }
    if ((paramObject2 instanceof String))
    {
      paramType = (String)paramObject2;
      if (paramType.length() == 0) {
        return null;
      }
      paramObject1 = new JSONScanner(paramType);
      try
      {
        if (paramObject1.scanISO8601DateIfMatch(false))
        {
          paramDefaultJSONParser = paramObject1.getCalendar().getTime();
          return paramDefaultJSONParser;
        }
      }
      finally
      {
        paramObject1.close();
      }
      paramObject1.close();
      paramDefaultJSONParser = paramDefaultJSONParser.getDateFormat();
      try
      {
        paramDefaultJSONParser = paramDefaultJSONParser.parse(paramType);
        return paramDefaultJSONParser;
      }
      catch (ParseException paramDefaultJSONParser)
      {
        return new Date(Long.parseLong(paramType));
      }
    }
    throw new JSONException("parse error");
  }
  
  public int getFastMatchToken()
  {
    return 2;
  }
}
