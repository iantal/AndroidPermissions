package com.a.a.a;

import android.os.Handler;
import android.os.Looper;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;

public class d
{
  private AtomicInteger a = new AtomicInteger();
  private final Map b = new HashMap();
  private final Set c = new HashSet();
  private final PriorityBlockingQueue d = new PriorityBlockingQueue();
  private final PriorityBlockingQueue e = new PriorityBlockingQueue();
  private final com.a.a.a.a.a f;
  private final b g;
  private final a h;
  private ab[] i;
  private j j;
  
  public d(b paramB, int paramInt, com.a.a.a.a.a paramA)
  {
    this(paramB, paramInt, new m(new Handler(Looper.getMainLooper())), paramA);
  }
  
  public d(b paramB, int paramInt, a paramA, com.a.a.a.a.a paramA1)
  {
    this.f = paramA1;
    this.g = paramB;
    this.h = paramA;
    this.g.a(paramA);
    this.i = new ab[paramInt];
  }
  
  public c a(c paramC)
  {
    paramC.a(this);
    synchronized (this.c)
    {
      this.c.add(paramC);
      paramC.a(c());
      paramC.a("add-to-queue");
      if ((paramC.d()) || (!paramC.n()))
      {
        this.h.c(paramC);
        this.e.add(paramC);
        return paramC;
      }
    }
    for (;;)
    {
      String str;
      synchronized (this.b)
      {
        str = paramC.c();
        if (this.b.containsKey(str))
        {
          Queue localQueue = (Queue)this.b.get(str);
          ??? = localQueue;
          if (localQueue == null) {
            ??? = new LinkedList();
          }
          ((Queue)???).add(paramC);
          this.b.put(str, ???);
          if (y.b) {
            y.a("Request for cacheKey=%s is in flight, putting on hold.", new Object[] { str });
          }
          return paramC;
        }
      }
      this.b.put(str, null);
      this.d.add(paramC);
    }
  }
  
  public void a()
  {
    b();
    this.j = new j(this.d, this.e, this.f, this.h);
    this.j.start();
    int k = 0;
    for (;;)
    {
      if (k >= this.i.length) {
        return;
      }
      ab localAb = new ab(this.e, this.g, this.f, this.h);
      this.i[k] = localAb;
      localAb.start();
      k += 1;
    }
  }
  
  public void b()
  {
    if (this.j != null) {
      this.j.a();
    }
    ab[] arrayOfAb = this.i;
    int m = arrayOfAb.length;
    int k = 0;
    for (;;)
    {
      if (k >= m) {
        return;
      }
      ab localAb = arrayOfAb[k];
      if (localAb != null) {
        localAb.a();
      }
      k += 1;
    }
  }
  
  void b(c paramC)
  {
    synchronized (this.c)
    {
      this.c.remove(paramC);
      if ((paramC.d()) || (!paramC.n())) {}
    }
    synchronized (this.b)
    {
      paramC = paramC.c();
      Queue localQueue = (Queue)this.b.remove(paramC);
      if (localQueue != null)
      {
        if (y.b) {
          y.a("Releasing %d waiting requests for cacheKey=%s.", new Object[] { Integer.valueOf(localQueue.size()), paramC });
        }
        this.d.addAll(localQueue);
      }
      return;
      paramC = finally;
      throw paramC;
    }
  }
  
  public int c()
  {
    return this.a.incrementAndGet();
  }
}
