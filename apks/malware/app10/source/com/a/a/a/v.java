package com.a.a.a;

import android.text.TextUtils;
import com.a.a.a.d.b;
import com.a.a.a.d.d;
import java.io.IOException;
import java.io.InputStream;
import java.util.zip.GZIPInputStream;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;

public class v
{
  public static String a(HttpResponse paramHttpResponse, String paramString)
  {
    paramHttpResponse = paramHttpResponse.getFirstHeader(paramString);
    if (paramHttpResponse == null) {
      return null;
    }
    return paramHttpResponse.getValue();
  }
  
  public static byte[] a(HttpResponse paramHttpResponse)
  {
    localHttpEntity = paramHttpResponse.getEntity();
    localD = new d(b.a(), (int)localHttpEntity.getContentLength());
    arrayOfByte2 = null;
    arrayOfByte1 = arrayOfByte2;
    try
    {
      localInputStream = localHttpEntity.getContent();
      arrayOfByte1 = arrayOfByte2;
      if (!c(paramHttpResponse)) {
        break label201;
      }
      arrayOfByte1 = arrayOfByte2;
      if ((localInputStream instanceof GZIPInputStream)) {
        break label201;
      }
      arrayOfByte1 = arrayOfByte2;
      paramHttpResponse = new GZIPInputStream(localInputStream);
    }
    finally
    {
      for (;;)
      {
        InputStream localInputStream;
        try
        {
          localHttpEntity.consumeContent();
          b.a().a(arrayOfByte1);
          localD.close();
          throw paramHttpResponse;
          arrayOfByte1 = arrayOfByte2;
          arrayOfByte2 = b.a().b(1024);
          arrayOfByte1 = arrayOfByte2;
          int i = paramHttpResponse.read(arrayOfByte2);
          if (i == -1)
          {
            arrayOfByte1 = arrayOfByte2;
            paramHttpResponse = localD.toByteArray();
          }
          try
          {
            localHttpEntity.consumeContent();
            b.a().a(arrayOfByte2);
            localD.close();
            return paramHttpResponse;
            arrayOfByte1 = arrayOfByte2;
            localD.write(arrayOfByte2, 0, i);
          }
          catch (IOException localIOException1)
          {
            y.a("Error occured when calling consumingContent", new Object[0]);
            continue;
          }
        }
        catch (IOException localIOException2)
        {
          y.a("Error occured when calling consumingContent", new Object[0]);
          continue;
        }
        paramHttpResponse = localInputStream;
      }
    }
    if (paramHttpResponse == null)
    {
      arrayOfByte1 = arrayOfByte2;
      throw new h();
    }
  }
  
  public static String b(HttpResponse paramHttpResponse)
  {
    paramHttpResponse = paramHttpResponse.getFirstHeader("Content-Type");
    int i;
    if (paramHttpResponse != null)
    {
      paramHttpResponse = paramHttpResponse.getValue();
      if (!TextUtils.isEmpty(paramHttpResponse))
      {
        paramHttpResponse = paramHttpResponse.split(";");
        i = 1;
      }
    }
    for (;;)
    {
      if (i >= paramHttpResponse.length) {
        return null;
      }
      String[] arrayOfString = paramHttpResponse[i].trim().split("=");
      if ((arrayOfString.length == 2) && (arrayOfString[0].equals("charset"))) {
        return arrayOfString[1];
      }
      i += 1;
    }
  }
  
  public static boolean c(HttpResponse paramHttpResponse)
  {
    return TextUtils.equals(a(paramHttpResponse, "Content-Encoding"), "gzip");
  }
}
