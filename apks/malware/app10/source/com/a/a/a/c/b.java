package com.a.a.a.c;

import android.net.http.AndroidHttpClient;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpHead;
import org.apache.http.client.methods.HttpOptions;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.client.methods.HttpTrace;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;

public class b
  implements a
{
  protected final HttpClient a;
  
  public b(String paramString)
  {
    this.a = AndroidHttpClient.newInstance(paramString);
  }
  
  private static void a(HttpEntityEnclosingRequestBase paramHttpEntityEnclosingRequestBase, com.a.a.a.c paramC)
  {
    paramC = paramC.k();
    if (paramC != null) {
      paramHttpEntityEnclosingRequestBase.setEntity(new ByteArrayEntity(paramC));
    }
  }
  
  private static void a(HttpUriRequest paramHttpUriRequest, Map paramMap)
  {
    Iterator localIterator = paramMap.keySet().iterator();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return;
      }
      String str = (String)localIterator.next();
      paramHttpUriRequest.setHeader(str, (String)paramMap.get(str));
    }
  }
  
  private static HttpUriRequest b(com.a.a.a.c paramC)
  {
    switch (paramC.a())
    {
    default: 
      throw new IllegalStateException("Unknown request method.");
    case 0: 
      return new HttpGet(paramC.b());
    case 3: 
      return new HttpDelete(paramC.b());
    case 1: 
      localObject = new HttpPost(paramC.b());
      ((HttpPost)localObject).addHeader("Content-Type", paramC.j());
      a((HttpEntityEnclosingRequestBase)localObject, paramC);
      return localObject;
    case 2: 
      localObject = new HttpPut(paramC.b());
      ((HttpPut)localObject).addHeader("Content-Type", paramC.j());
      a((HttpEntityEnclosingRequestBase)localObject, paramC);
      return localObject;
    case 4: 
      return new HttpHead(paramC.b());
    case 5: 
      return new HttpOptions(paramC.b());
    case 6: 
      return new HttpTrace(paramC.b());
    }
    Object localObject = new c(paramC.b());
    ((c)localObject).addHeader("Content-Type", paramC.j());
    a((HttpEntityEnclosingRequestBase)localObject, paramC);
    return localObject;
  }
  
  public HttpResponse a(com.a.a.a.c paramC)
  {
    HttpUriRequest localHttpUriRequest = b(paramC);
    a(localHttpUriRequest);
    a(localHttpUriRequest, paramC.g());
    HttpParams localHttpParams = localHttpUriRequest.getParams();
    int i = paramC.p();
    HttpConnectionParams.setConnectionTimeout(localHttpParams, 10000);
    HttpConnectionParams.setSoTimeout(localHttpParams, i);
    return this.a.execute(localHttpUriRequest);
  }
  
  protected void a(HttpUriRequest paramHttpUriRequest)
  {
    paramHttpUriRequest.addHeader("Accept-Encoding", "gzip");
  }
}
