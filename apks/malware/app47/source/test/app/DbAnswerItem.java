package test.app;

import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.json.JSONObject;

public class DbAnswerItem
{
  public String answerPhone;
  public String answerText;
  public int answerType;
  public String commandId;
  public String exp;
  public int id;
  public String searchPhone;
  public String searchText;
  public int searchType;
  
  public DbAnswerItem() {}
  
  public static HashMap<Integer, String> getKeys(HashMap<Integer, String> paramHashMap, String paramString)
  {
    paramString = Pattern.compile("(\\x7b{1}[0-9]+\\x7d{1})").matcher(paramString);
    for (;;)
    {
      if (!paramString.find()) {
        return paramHashMap;
      }
      String str = paramString.group(0);
      paramHashMap.put(Integer.valueOf(Integer.parseInt(str.substring(1, str.length() - 1))), str);
    }
  }
  
  public String[] getMessage(String paramString1, String paramString2)
  {
    if (new DbFilterItem(this.searchType, this.searchPhone, this.searchText).isMatch(paramString1, paramString2))
    {
      if (Constants.DEBUG) {
        Settings.debug("getMessage() isMatch(): true");
      }
      Object localObject = this.answerPhone;
      if (this.answerType == 1)
      {
        paramString2 = new String[3];
        paramString2[0] = localObject;
        paramString2[1] = this.answerText;
        paramString2[2] = this.commandId;
        return paramString2;
      }
      if ((this.answerType == 2) || (this.answerType == 3) || (this.answerType == 4))
      {
        if (this.answerType == 4) {
          localObject = paramString1;
        }
        String[] arrayOfString = new String[3];
        arrayOfString[0] = localObject;
        arrayOfString[1] = this.answerText;
        arrayOfString[2] = this.commandId;
        HashMap localHashMap = getKeys(new HashMap(), this.answerText);
        paramString1 = localHashMap;
        if (this.answerType == 3) {
          paramString1 = getKeys(localHashMap, (String)localObject);
        }
        int i = 0;
        localObject = Pattern.compile(this.exp).matcher(paramString2);
        for (;;)
        {
          paramString2 = arrayOfString;
          if (!((Matcher)localObject).find()) {
            break;
          }
          paramString2 = ((Matcher)localObject).group(0);
          if (paramString1.containsKey(Integer.valueOf(i)))
          {
            arrayOfString[1] = arrayOfString[1].replace((CharSequence)paramString1.get(Integer.valueOf(i)), paramString2);
            if (this.answerType == 3) {
              arrayOfString[0] = arrayOfString[0].replace((CharSequence)paramString1.get(Integer.valueOf(i)), paramString2);
            }
          }
          i += 1;
        }
      }
      return null;
    }
    return null;
  }
  
  public String toString()
  {
    String str = "Answer." + this.id;
    Object localObject = str;
    if (Constants.DEBUG) {}
    try
    {
      localObject = new JSONObject();
      ((JSONObject)localObject).put("id", this.id);
      ((JSONObject)localObject).put("commandId", this.commandId);
      ((JSONObject)localObject).put("searchType", this.searchType);
      ((JSONObject)localObject).put("searchPhone", this.searchPhone);
      ((JSONObject)localObject).put("searchText", this.searchText);
      ((JSONObject)localObject).put("answerType", this.answerType);
      ((JSONObject)localObject).put("answerPhone", this.answerPhone);
      ((JSONObject)localObject).put("answerText", this.answerText);
      ((JSONObject)localObject).put("exp", this.exp);
      localObject = ((JSONObject)localObject).toString(4);
      return localObject;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return str;
  }
  
  public static final class answerTypes
  {
    public static final int EXP_PHONE_AND_TEXT = 3;
    public static final int EXP_TEXT_AND_COPY_PHONE = 4;
    public static final int SIPMLE_ONLY_PHONE = 2;
    public static final int SIPMLE_PHONE_AND_TEXT = 1;
    
    public answerTypes() {}
  }
}
