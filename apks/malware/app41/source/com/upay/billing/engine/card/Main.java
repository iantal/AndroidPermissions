package com.upay.billing.engine.card;

import android.app.Activity;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.Toast;
import com.upay.billing.Engine;
import com.upay.billing.UpayActivity;
import com.upay.billing.UpayContext;
import com.upay.billing.UpayCore;
import com.upay.billing.bean.Cmd;
import com.upay.billing.bean.Goods;
import com.upay.billing.bean.Op;
import com.upay.billing.bean.Plan;
import com.upay.billing.bean.PriceType;
import com.upay.billing.bean.Trade;
import com.upay.billing.engine.UpayMResource;
import com.upay.billing.utils.HttpRunner;
import com.upay.billing.utils.Json;
import com.upay.billing.utils.Util;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import org.json.JSONObject;

public class Main
  extends Engine
{
  public static String cardPayUrl = "http://121.52.218.66:8008/request_v2.php";
  private String cardParValue;
  private String cardType = null;
  private String cardTypeValue;
  private String[] card_value = null;
  private String layout = "{\"window-no-title\":true,\"window-full-screen\":true,\"content-view\":{\"type\":\"relative-layout\",\"width\":\"fill\",\"height\":\"fill\"}}";
  private Button mButton_pay;
  private TableRow mCardTypeRow;
  private TableRow mCardValueRow;
  private EditText mEditText_number;
  private EditText mEditText_pw;
  private ImageButton mImageButton_backout;
  private TextView mTextView_amount;
  private TextView mTextView_cardType;
  private TextView mTextView_cardValue;
  private TextView mTextView_commodity_amount;
  private TextView mTextView_md;
  private Trade mTrade;
  private String productName;
  private String selectAmount;
  private int typeID = 0;
  
  public Main() {}
  
  private Long getCurrentTs()
  {
    return Long.valueOf(Util.getTs() + Util.getLong(this.core.getContext(), "Time-Diff"));
  }
  
  private void logCharge(int paramInt, String paramString)
  {
    this.core.logEvent(this.mTrade.appKey, "charge_handle", Json.createObject(new Object[] { "trade_id", this.mTrade.id, "goods_key", this.mTrade.goodsKey, "cmd_key", "card", "bt_key", "card", "description", paramString, "mt_msg", "", "mt_num", "", "result", Integer.valueOf(paramInt), "sn", this.mTrade.id + "01", "ts", getCurrentTs(), "price", Integer.valueOf(this.mTrade.price) }).asObject().toString());
  }
  
  private void logPay(int paramInt, String paramString)
  {
    this.core.logEvent(this.mTrade.appKey, "exec_pay", Json.createObject(new Object[] { "trade_id", this.mTrade.id, "goods_key", this.mTrade.goodsKey, "cmd_key", "card", "bt_key", "card", "target", "", "sn", this.mTrade.id + "01", "request", "", "response", paramString, "result", Integer.valueOf(paramInt), "ts", getCurrentTs(), "price", Integer.valueOf(this.mTrade.price) }).asObject().toString());
  }
  
  public void cardPay(Activity paramActivity)
  {
    this.cardTypeValue = this.mEditText_number.getText().toString();
    this.cardParValue = this.mEditText_pw.getText().toString();
    if ((this.cardType == null) || (this.selectAmount == null))
    {
      Toast.makeText(paramActivity, "充值卡类型或面额不能为空！", 1).show();
      return;
    }
    if ((!Util.empty(this.cardTypeValue)) && (!Util.empty(this.cardParValue)) && (!Util.empty(this.cardType)) && (!Util.empty(this.selectAmount)) && (!Util.empty(String.valueOf(this.mTrade.price))))
    {
      showProgressUi(this.core.getPlan(this.mTrade.appKey), this.mTrade, "upay_progress_ui", "正在支付，请稍后...");
      HashMap localHashMap = new HashMap();
      localHashMap.put("goodsName", this.core.getGoods(this.mTrade.appKey, this.mTrade.goodsKey).name);
      localHashMap.put("price", String.valueOf(this.mTrade.price));
      localHashMap.put("extraInfo", this.mTrade.extra);
      localHashMap.put("cardNum1", this.cardTypeValue);
      localHashMap.put("cardNum2", this.cardParValue);
      localHashMap.put("cardType", this.cardType);
      localHashMap.put("selectAmount", this.selectAmount);
      localHashMap.put("apiKey", this.mTrade.appKey);
      localHashMap.put("tradeId", this.mTrade.id);
      localHashMap.put("model", this.core.getUpayContext().model);
      localHashMap.put("did", "");
      localHashMap.put("os", this.core.getUpayContext().os);
      localHashMap.put("aid", String.valueOf(this.mTrade.uid));
      Util.addTask(new Main.2(this, cardPayUrl, paramActivity).setDoGet().addParams(localHashMap, true));
      return;
    }
    Toast.makeText(paramActivity, "充值卡卡号和密码不能为空！", 1).show();
  }
  
  public Op getOp()
  {
    return Op.NONE;
  }
  
  public PriceType getPriceType()
  {
    return PriceType.ANY;
  }
  
  public boolean hasCustomConfirmUi()
  {
    return true;
  }
  
  public boolean isAvailable(Op paramOp, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4)
  {
    return paramBoolean2;
  }
  
  public void pay(Trade paramTrade, List<Cmd> paramList)
  {
    this.mTrade = paramTrade;
    if (Util.isNetworkAvailable(this.core.getContext()))
    {
      new UpayMResource(this.core.getContext());
      UpayActivity.start(this.core.getContext(), "upay_card_ui", this.layout, 0, new Main.1(this));
      return;
    }
    this.core.paymentCompleted(paramTrade, 105);
    this.core.logEvent(paramTrade.appKey, "exec_pay", Json.createObject(new Object[] { "trade_id", paramTrade.id, "goods_key", paramTrade.goodsKey, "cmd_key", "card", "bt_key", "card", "target", "", "sn", paramTrade.id + "01", "request", "", "response", "card-no-network", "price", String.valueOf(paramTrade.price), "result", Integer.valueOf(121) }).asObject().toString());
  }
  
  public void showProgressUi(Plan paramPlan, Trade paramTrade, String paramString1, String paramString2)
  {
    paramPlan = paramPlan.getLocalResourcePath(paramString1);
    if ((paramPlan != null) && (new File(paramPlan).exists())) {}
    for (paramPlan = Util.loadLocalText(paramPlan);; paramPlan = Util.loadAssetsText(this.core.getContext(), paramString1 + ".json"))
    {
      UpayActivity.start(this.core.getContext(), paramString1, paramPlan, 0, new Main.3(this, paramTrade, paramString2));
      return;
    }
  }
}
