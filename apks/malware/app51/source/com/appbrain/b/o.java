package com.appbrain.b;

import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.RandomAccess;

public final class o
  extends AbstractList
  implements p, RandomAccess
{
  public static final p a = new ab(new o());
  private final List b;
  
  public o()
  {
    this.b = new ArrayList();
  }
  
  public o(p paramP)
  {
    this.b = new ArrayList(paramP.size());
    addAll(paramP);
  }
  
  private static String a(Object paramObject)
  {
    if ((paramObject instanceof String)) {
      return (String)paramObject;
    }
    return ((d)paramObject).e();
  }
  
  public final d a(int paramInt)
  {
    Object localObject = this.b.get(paramInt);
    if ((localObject instanceof String))
    {
      localObject = d.a((String)localObject);
      this.b.set(paramInt, localObject);
      return localObject;
    }
    return (d)localObject;
  }
  
  public final List a()
  {
    return Collections.unmodifiableList(this.b);
  }
  
  public final void a(d paramD)
  {
    this.b.add(paramD);
    this.modCount += 1;
  }
  
  public final boolean addAll(int paramInt, Collection paramCollection)
  {
    Object localObject = paramCollection;
    if ((paramCollection instanceof p)) {
      localObject = ((p)paramCollection).a();
    }
    boolean bool = this.b.addAll(paramInt, (Collection)localObject);
    this.modCount += 1;
    return bool;
  }
  
  public final boolean addAll(Collection paramCollection)
  {
    return addAll(size(), paramCollection);
  }
  
  public final void clear()
  {
    this.b.clear();
    this.modCount += 1;
  }
  
  public final int size()
  {
    return this.b.size();
  }
}
