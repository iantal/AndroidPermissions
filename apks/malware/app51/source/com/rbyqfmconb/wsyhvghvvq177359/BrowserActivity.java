package com.rbyqfmconb.wsyhvghvvq177359;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.view.Window;
import android.webkit.CookieSyncManager;
import android.webkit.WebChromeClient;
import android.webkit.WebChromeClient.CustomViewCallback;
import android.webkit.WebSettings;
import android.webkit.WebSettings.PluginState;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.Toast;

public class BrowserActivity
  extends Activity
  implements View.OnClickListener
{
  private static final int BUTTON_BACK_ID = 11;
  private static final int BUTTON_CLOSE_ID = 14;
  private static final int BUTTON_FORWARD_ID = 12;
  private static final int BUTTON_REFRESH_ID = 13;
  static final int CALENDER_CREATE_EVENT_REQUEST_CODE = 7;
  static final String INTENT_ACTION_BROWSE = "browser";
  static final String INTENT_ACTION_CREATE_CALENDAR_EVENT = "newCalendarEvent";
  static final String INTENT_ACTION_PLAY_VIDEO = "playVideo";
  Handler a = new Handler()
  {
    public void handleMessage(Message paramAnonymousMessage)
    {
      switch (paramAnonymousMessage.what)
      {
      case -2: 
      case -1: 
      default: 
        return;
      case 0: 
        BrowserActivity.this.setContentView(BrowserActivity.a(BrowserActivity.this));
        BrowserActivity.a(BrowserActivity.this).setVisibility(0);
        Toast.makeText(BrowserActivity.this, "Ad is showing on screen.", 0).show();
        return;
      }
      BrowserActivity.this.finish();
    }
  };
  private float b;
  private Button c;
  private Button d;
  private Button e;
  private Button f;
  private BrowserView g;
  private LinearLayout h;
  private MV i;
  
  public BrowserActivity() {}
  
  private void a(String paramString)
  {
    requestWindowFeature(2);
    this.b = getResources().getDisplayMetrics().density;
    if (paramString != null) {}
    try
    {
      if (!paramString.equals(""))
      {
        b(paramString);
        return;
      }
      Log.i("BunMraid", "Url is null.");
      finish();
      return;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
      finish();
    }
  }
  
  private void b(String paramString)
  {
    this.h = new LinearLayout(this);
    this.h.setOrientation(1);
    this.h.setLayoutParams(new LinearLayout.LayoutParams(-1, -1));
    Object localObject = new RelativeLayout(this);
    ((RelativeLayout)localObject).setLayoutParams(new RelativeLayout.LayoutParams(-1, (int)(40.0F * this.b)));
    this.c = new Button(this);
    RelativeLayout.LayoutParams localLayoutParams = new RelativeLayout.LayoutParams(-2, -2);
    localLayoutParams.addRule(9, -1);
    localLayoutParams.addRule(15, -1);
    this.c.setLayoutParams(localLayoutParams);
    this.c.setText("Back");
    this.c.setTypeface(null, 1);
    this.c.setTextColor(-1);
    this.c.setId(11);
    ((RelativeLayout)localObject).addView(this.c);
    this.d = new Button(this);
    localLayoutParams = new RelativeLayout.LayoutParams(-2, -2);
    localLayoutParams.addRule(1, 11);
    localLayoutParams.addRule(15, -1);
    this.d.setLayoutParams(localLayoutParams);
    this.d.setText("Forward");
    this.d.setTypeface(null, 1);
    this.d.setTextColor(-1);
    this.d.setId(12);
    ((RelativeLayout)localObject).addView(this.d);
    this.e = new Button(this);
    localLayoutParams = new RelativeLayout.LayoutParams(-2, -2);
    localLayoutParams.addRule(1, 12);
    localLayoutParams.addRule(15, -1);
    this.e.setLayoutParams(localLayoutParams);
    this.e.setText("Refresh");
    this.e.setTypeface(null, 1);
    this.e.setTextColor(-1);
    this.e.setId(13);
    ((RelativeLayout)localObject).addView(this.e);
    this.f = new Button(this);
    localLayoutParams = new RelativeLayout.LayoutParams(-2, -2);
    localLayoutParams.addRule(11, -1);
    localLayoutParams.addRule(15, -1);
    this.f.setLayoutParams(localLayoutParams);
    this.f.setText("Close");
    this.f.setTypeface(null, 1);
    this.f.setTextColor(-1);
    this.f.setId(14);
    ((RelativeLayout)localObject).addView(this.f);
    ((RelativeLayout)localObject).setGravity(17);
    this.h.addView((View)localObject);
    this.g = new BrowserView(this, paramString);
    localObject = new LinearLayout.LayoutParams(-1, -1);
    this.g.setLayoutParams((ViewGroup.LayoutParams)localObject);
    this.h.addView(this.g);
    setContentView(this.h);
    this.g.loadUrl(paramString);
    this.c.setOnClickListener(this);
    this.d.setOnClickListener(this);
    this.e.setOnClickListener(this);
    this.f.setOnClickListener(this);
    this.d.setEnabled(false);
    this.c.setEnabled(false);
  }
  
  protected void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
    if ((paramInt1 != 7) || (paramInt2 == -1)) {}
    try
    {
      Util.a("Calender event added");
      MV.a.d("92");
      MV.a.a(true);
      finish();
      while (paramInt1 == 8) {
        if (paramInt2 == -1)
        {
          Util.a("Video played added");
          MV.a.d("91");
          MV.a.a(true);
          finish();
          return;
          if (paramInt2 == 0)
          {
            MV.a.a(true);
            MV.a.a("createCalendarEvent", "Creating calendar event canceled by user.");
            finish();
          }
          else
          {
            finish();
          }
        }
        else
        {
          if (paramInt2 == 0)
          {
            MV.a.a(true);
            MV.a.a("playVideo", "Play video is canceled by user.");
            finish();
            return;
          }
          finish();
        }
      }
      return;
    }
    catch (Exception paramIntent) {}
  }
  
  public void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    getWindow().setFormat(1);
  }
  
  public void onBackPressed()
  {
    try
    {
      boolean bool = getIntent().getAction().equals("playVideo");
      if (bool) {
        return;
      }
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
      super.onBackPressed();
    }
  }
  
  public void onClick(View paramView)
  {
    switch (paramView.getId())
    {
    default: 
    case 11: 
    case 12: 
    case 13: 
      do
      {
        do
        {
          do
          {
            return;
          } while ((this.g == null) || (!this.g.canGoBack()));
          this.g.goBack();
          return;
        } while ((this.g == null) || (!this.g.canGoForward()));
        this.g.goForward();
        return;
      } while (this.g == null);
      this.g.reload();
      return;
    }
    finish();
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    Object localObject;
    String str;
    try
    {
      localObject = getIntent();
      str = ((Intent)localObject).getAction();
      if (str.equals("browser"))
      {
        paramBundle = ((Intent)localObject).getStringExtra("url");
        if ((paramBundle.startsWith("market://")) || (paramBundle.startsWith("tel:")))
        {
          startActivity(new Intent("android.intent.action.VIEW", Uri.parse(paramBundle)));
          finish();
          return;
        }
        a(paramBundle);
        return;
      }
    }
    catch (Exception paramBundle)
    {
      paramBundle.printStackTrace();
      finish();
      return;
      if (str.equals("playVideo"))
      {
        localObject = ((Intent)localObject).getStringExtra("url");
        requestWindowFeature(1);
        setTheme(16973840);
        super.onCreate(paramBundle);
        paramBundle = new Intent("android.intent.action.VIEW", Uri.parse((String)localObject));
        paramBundle.setDataAndType(Uri.parse((String)localObject), "video/*");
        startActivityForResult(paramBundle, 8);
        return;
      }
    }
    catch (Throwable paramBundle)
    {
      paramBundle.printStackTrace();
      finish();
      return;
    }
    if (str.equals("newCalendarEvent"))
    {
      requestWindowFeature(1);
      setTheme(16973840);
      super.onCreate(paramBundle);
      try
      {
        paramBundle = ((Intent)localObject).getStringExtra("json");
        if ((paramBundle == null) || (paramBundle.equals("")))
        {
          MV.a.a("createCalendarEvent", "Calendar json is empty");
          MV.a.a(true);
          finish();
          return;
        }
      }
      catch (ActivityNotFoundException paramBundle)
      {
        paramBundle.printStackTrace();
        MV.a.d("error");
        MV.a.a("createCalendarEvent", "Calendar activity not found.");
        MV.a.a(true);
        finish();
        return;
        CE.a(this, paramBundle);
        return;
      }
      catch (Exception paramBundle)
      {
        MV.a.d("error");
        paramBundle.printStackTrace();
        MV.a.a("createCalendarEvent", "Calendar json parsing error");
        MV.a.a(true);
        finish();
      }
    }
  }
  
  protected void onDestroy()
  {
    try
    {
      if (this.g != null)
      {
        this.g.stopLoading();
        this.h.removeView(this.g);
        this.g.removeAllViews();
        this.g.destroy();
      }
      super.onDestroy();
      return;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
      }
    }
  }
  
  protected void onPause()
  {
    super.onPause();
    try
    {
      CookieSyncManager.getInstance().stopSync();
      return;
    }
    catch (Exception localException) {}
  }
  
  protected void onResume()
  {
    super.onResume();
    try
    {
      CookieSyncManager.getInstance().startSync();
      return;
    }
    catch (Exception localException) {}
  }
  
  class BrowserView
    extends WebView
  {
    @SuppressLint({"SetJavaScriptEnabled"})
    public BrowserView(Context paramContext, String paramString)
    {
      super();
      setHorizontalScrollBarEnabled(false);
      setVerticalScrollBarEnabled(false);
      setScrollBarStyle(33554432);
      setBackgroundColor(0);
      CookieSyncManager.createInstance(BrowserActivity.this);
      CookieSyncManager.getInstance().startSync();
      getSettings().setJavaScriptEnabled(true);
      a();
      b();
      setWebChromeClient(new WebChromeClient()
      {
        public void onHideCustomView() {}
        
        public void onProgressChanged(WebView paramAnonymousWebView, int paramAnonymousInt)
        {
          this.b.setTitle("loading....");
          this.b.setProgress(paramAnonymousInt * 100);
          if (paramAnonymousInt == 100) {
            this.b.setTitle(paramAnonymousWebView.getUrl());
          }
        }
        
        public void onShowCustomView(View paramAnonymousView, WebChromeClient.CustomViewCallback paramAnonymousCustomViewCallback) {}
      });
      setWebViewClient(new WebViewClient()
      {
        public void onPageFinished(WebView paramAnonymousWebView, String paramAnonymousString)
        {
          super.onPageFinished(paramAnonymousWebView, paramAnonymousString);
          if (paramAnonymousWebView != null)
          {
            i = 1;
            if ((i & paramAnonymousWebView.canGoBack()) == 0) {
              break label70;
            }
            BrowserActivity.b(BrowserActivity.this).setEnabled(true);
            label35:
            if (paramAnonymousWebView == null) {
              break label87;
            }
          }
          label70:
          label87:
          for (int i = 1;; i = 0)
          {
            if ((i & paramAnonymousWebView.canGoForward()) == 0) {
              break label92;
            }
            BrowserActivity.c(BrowserActivity.this).setEnabled(true);
            return;
            i = 0;
            break;
            BrowserActivity.b(BrowserActivity.this).setEnabled(false);
            break label35;
          }
          label92:
          BrowserActivity.c(BrowserActivity.this).setEnabled(false);
        }
        
        public void onReceivedError(WebView paramAnonymousWebView, int paramAnonymousInt, String paramAnonymousString1, String paramAnonymousString2)
        {
          super.onReceivedError(paramAnonymousWebView, paramAnonymousInt, paramAnonymousString1, paramAnonymousString2);
          Log.i("BunMraid", "Error code: " + paramAnonymousInt + " ,description: " + paramAnonymousString1);
          try
          {
            paramAnonymousWebView = new Intent("android.intent.action.VIEW", Uri.parse(paramAnonymousString2));
            BrowserActivity.this.startActivity(paramAnonymousWebView);
            BrowserActivity.this.finish();
            return;
          }
          catch (Exception paramAnonymousWebView) {}
        }
        
        public boolean shouldOverrideUrlLoading(WebView paramAnonymousWebView, String paramAnonymousString)
        {
          if (paramAnonymousString.startsWith("market://"))
          {
            paramAnonymousWebView.loadUrl(paramAnonymousString);
            return true;
          }
          return super.shouldOverrideUrlLoading(paramAnonymousWebView, paramAnonymousString);
        }
      });
    }
    
    @SuppressLint({"InlinedApi"})
    private void b()
    {
      try
      {
        if (Build.VERSION.SDK_INT >= 11) {
          BrowserActivity.this.getWindow().setFlags(16777216, 16777216);
        }
        return;
      }
      catch (Throwable localThrowable) {}
    }
    
    @SuppressLint({"InlinedApi"})
    void a()
    {
      if (Build.VERSION.SDK_INT >= 8) {
        getSettings().setPluginState(WebSettings.PluginState.ON_DEMAND);
      }
    }
  }
}
