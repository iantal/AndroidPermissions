package com.rbyqfmconb.wsyhvghvvq177359;

import android.util.Log;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

class XmlParser
  implements j
{
  private String a = null;
  private String b;
  private String c;
  private String d;
  private String e;
  private String f;
  private String g;
  private List<HashMap<String, String>> h;
  private String i;
  private String j;
  private String k;
  private String l;
  private HashMap<String, String> m;
  private String n;
  private List<Creative> o;
  
  public XmlParser(Reader paramReader)
    throws XmlParser.VastException, XmlParser.InvalidVastXML, XmlPullParserException, Exception, Throwable
  {
    Log.i("BunVast", "Parsing vast Xml>>>>>>>..");
    this.o = new ArrayList();
    Object localObject = XmlPullParserFactory.newInstance();
    ((XmlPullParserFactory)localObject).setNamespaceAware(true);
    localObject = ((XmlPullParserFactory)localObject).newPullParser();
    ((XmlPullParser)localObject).setFeature("http://xmlpull.org/v1/doc/features.html#process-namespaces", false);
    ((XmlPullParser)localObject).setInput(paramReader);
    ((XmlPullParser)localObject).nextTag();
    ((XmlPullParser)localObject).require(2, this.a, "VAST");
    this.c = ((XmlPullParser)localObject).getAttributeValue(this.a, "version");
    Log.i("BunVast", "Vast version: " + this.c);
    ((XmlPullParser)localObject).nextTag();
    paramReader = ((XmlPullParser)localObject).getName();
    if (paramReader.equals("Error"))
    {
      paramReader = ((XmlPullParser)localObject).getAttributeValue(this.a, "status");
      localObject = a((XmlPullParser)localObject);
      a("Status: " + paramReader + " Error: " + (String)localObject);
      throw new VastException((String)localObject, paramReader);
    }
    if (paramReader.equals("Ad"))
    {
      a("Inside ad tag");
      this.b = ((XmlPullParser)localObject).getAttributeValue(this.a, "id");
      while (((XmlPullParser)localObject).next() != 3) {
        if (((XmlPullParser)localObject).getEventType() == 2)
        {
          paramReader = ((XmlPullParser)localObject).getName();
          if (((XmlPullParser)localObject).isEmptyElementTag())
          {
            a("Empty Tag: " + paramReader);
            ((XmlPullParser)localObject).nextTag();
          }
          else if (paramReader.equals("Error"))
          {
            this.l = a((XmlPullParser)localObject);
            a("Ad Error: " + this.l);
          }
          else if (paramReader.equals("AdSystem"))
          {
            this.e = ((XmlPullParser)localObject).getAttributeValue(this.a, "version");
            this.d = a((XmlPullParser)localObject);
            a("AdSytem version: " + this.e + ", name: " + this.d);
          }
          else if (paramReader.equals("AdTitle"))
          {
            this.f = a((XmlPullParser)localObject);
            a("Ad title: " + this.f);
          }
          else if (paramReader.equals("Description"))
          {
            this.i = a((XmlPullParser)localObject);
            a("Desc :" + this.i);
          }
          else if (paramReader.equals("Advertiser"))
          {
            this.j = a((XmlPullParser)localObject);
            a("Advertise name: " + this.j);
          }
          else if (paramReader.equals("Survey"))
          {
            this.k = a((XmlPullParser)localObject);
            a("Survey URI: " + this.k);
          }
          else
          {
            String str1;
            String str2;
            if (paramReader.equals("Pricing"))
            {
              this.m = new HashMap();
              paramReader = ((XmlPullParser)localObject).getAttributeValue(this.a, "model");
              str1 = ((XmlPullParser)localObject).getAttributeValue(this.a, "currency");
              str2 = a((XmlPullParser)localObject);
              this.m.put("model", paramReader);
              this.m.put("currency", str1);
              this.m.put("Pricing", str2);
              a("model: " + paramReader + ", cur: " + str1 + ", price: " + str2);
            }
            else if (paramReader.equals("Impression"))
            {
              if (this.h == null) {
                this.h = new ArrayList();
              }
              paramReader = new HashMap();
              str1 = ((XmlPullParser)localObject).getAttributeValue(this.a, "id");
              str2 = a((XmlPullParser)localObject);
              paramReader.put("id", str1);
              paramReader.put("Impression", str2);
              this.h.add(paramReader);
              a("Impression Id: " + str1 + ", uri: " + str2);
            }
            else if (paramReader.equals("Creative"))
            {
              this.o.add(new Creative((XmlPullParser)localObject));
            }
          }
        }
      }
    }
    throw new InvalidVastXML("Invalid vast XMl");
  }
  
  private String a(XmlPullParser paramXmlPullParser)
    throws XmlPullParserException, IOException
  {
    try
    {
      String str = paramXmlPullParser.nextText();
      if (paramXmlPullParser.getEventType() != 3) {
        paramXmlPullParser.nextTag();
      }
      return str;
    }
    finally {}
  }
  
  public String a()
  {
    return this.c;
  }
  
  void a(CharSequence paramCharSequence) {}
  
  public String b()
  {
    return this.d;
  }
  
  public String c()
  {
    return this.e;
  }
  
  public String d()
  {
    return this.g;
  }
  
  public String e()
  {
    return this.f;
  }
  
  public List<HashMap<String, String>> f()
  {
    return this.h;
  }
  
  public String g()
  {
    return this.i;
  }
  
  public String h()
  {
    return this.j;
  }
  
  public String i()
  {
    return this.k;
  }
  
  public String j()
  {
    return this.l;
  }
  
  public HashMap<String, String> k()
  {
    return this.m;
  }
  
  public String l()
  {
    return this.n;
  }
  
  public List<Creative> m()
  {
    return this.o;
  }
  
  public String n()
  {
    return this.b;
  }
  
  public String o()
  {
    return this.k;
  }
  
  public class Creative
  {
    private boolean b;
    private String c;
    private String d;
    private String e;
    private String f;
    private String g;
    private List<HashMap<String, Object>> h;
    private HashMap<String, String> i;
    private String j;
    private String k;
    private List<HashMap<String, String>> l;
    private List<HashMap<String, String>> m;
    private List<HashMap<String, Object>> n;
    
    public Creative(XmlPullParser paramXmlPullParser)
      throws XmlPullParserException, Exception, Throwable
    {
      XmlParser.this.a("Parsing Creative data");
      paramXmlPullParser.require(2, XmlParser.a(XmlParser.this), "Creative");
      this.d = paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "id");
      this.e = paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "sequence");
      this.f = paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "AdID");
      while (paramXmlPullParser.next() != 3) {
        if (paramXmlPullParser.getEventType() == 2)
        {
          Object localObject1 = paramXmlPullParser.getName();
          XmlParser.this.a("Creative Name: " + (String)localObject1);
          if (paramXmlPullParser.isEmptyElementTag())
          {
            XmlParser.this.a("Empty tag in creative: " + (String)localObject1);
            paramXmlPullParser.nextTag();
          }
          else if (paramXmlPullParser.getName().equals("Linear"))
          {
            localObject1 = paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "skipoffset");
            if (localObject1 == null)
            {
              this.b = false;
              XmlParser.this.a("AdSkipable: " + this.b);
            }
            else
            {
              this.b = true;
              this.c = ((String)localObject1);
              XmlParser.this.a("AdSkipable: " + this.b + ", Skip offset: " + this.c);
            }
          }
          else
          {
            Object localObject2;
            int i1;
            int i2;
            String str1;
            String str2;
            String str3;
            String str4;
            Object localObject3;
            if (((String)localObject1).equals("Icon"))
            {
              if (this.h == null) {
                this.h = new ArrayList();
              }
              localObject2 = new HashMap();
              i1 = a(paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "width"));
              i2 = a(paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "height"));
              str1 = paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "program");
              str2 = paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "xPosition");
              str3 = paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "yPosition");
              str4 = paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "Duration");
              localObject3 = paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "apiFramework");
              String str5 = paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "offset");
              XmlParser.this.a("ICON: width: " + i1 + ", height: " + i2 + ", program: " + str1 + ", xPosition: " + str2 + ", duration:" + str4 + ", apiFramework:" + (String)localObject3 + ", offset:" + str5);
              ((HashMap)localObject2).put("width", Integer.valueOf(i1));
              ((HashMap)localObject2).put("height", Integer.valueOf(i2));
              ((HashMap)localObject2).put("program", str1);
              ((HashMap)localObject2).put("xPosition", str2);
              ((HashMap)localObject2).put("yPosition", str3);
              ((HashMap)localObject2).put("apiFramework", localObject3);
              ((HashMap)localObject2).put("Duration", str4);
              ((HashMap)localObject2).put("offset", str5);
              while (paramXmlPullParser.next() != 3) {
                if (paramXmlPullParser.getEventType() == 2)
                {
                  str1 = paramXmlPullParser.getName();
                  XmlParser.this.a("Icon Name: " + (String)localObject1);
                  if (paramXmlPullParser.isEmptyElementTag())
                  {
                    XmlParser.this.a("Empty tag in creative: " + (String)localObject1);
                    paramXmlPullParser.nextTag();
                  }
                  else if (str1.equals("StaticResource"))
                  {
                    str1 = paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "creativeType");
                    str2 = XmlParser.a(XmlParser.this, paramXmlPullParser);
                    ((HashMap)localObject2).put("creativeType", str1);
                    ((HashMap)localObject2).put("StaticResource", str2);
                    XmlParser.this.a("Creative type:" + str1 + ", Static res: " + str2);
                  }
                  else if (str1.equals("IconClickThrough"))
                  {
                    str1 = XmlParser.a(XmlParser.this, paramXmlPullParser);
                    ((HashMap)localObject2).put("IconClickThrough", str1);
                    XmlParser.this.a("Icon click through: " + str1);
                    paramXmlPullParser.nextTag();
                  }
                  else if (str1.equals("IconClickTracking"))
                  {
                    str1 = XmlParser.a(XmlParser.this, paramXmlPullParser);
                    ((HashMap)localObject2).put("IconClickTracking", str1);
                    XmlParser.this.a("IconClickTracking: " + str1);
                  }
                  else if (str1.equals("IconViewTracking"))
                  {
                    str1 = XmlParser.a(XmlParser.this, paramXmlPullParser);
                    ((HashMap)localObject2).put("IconViewTracking", str1);
                    XmlParser.this.a("IconViewTracking: " + str1);
                  }
                }
              }
              this.h.add(localObject2);
              paramXmlPullParser.nextTag();
            }
            else if (((String)localObject1).equals("Duration"))
            {
              this.g = XmlParser.a(XmlParser.this, paramXmlPullParser);
              XmlParser.this.a("Duration: " + this.g);
            }
            else if (((String)localObject1).equals("TrackingEvents"))
            {
              XmlParser.this.a("inside tracking event.");
              while (paramXmlPullParser.next() != 3) {
                if (paramXmlPullParser.getEventType() == 2)
                {
                  localObject1 = paramXmlPullParser.getName();
                  if (paramXmlPullParser.isEmptyElementTag())
                  {
                    XmlParser.this.a("Empty tag in tracking: " + (String)localObject1);
                    paramXmlPullParser.nextTag();
                  }
                  else if (((String)localObject1).equals("Tracking"))
                  {
                    if (this.i == null) {
                      this.i = new HashMap();
                    }
                    localObject1 = paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "event");
                    localObject2 = XmlParser.a(XmlParser.this, paramXmlPullParser);
                    this.i.put(localObject1, localObject2);
                    XmlParser.this.a("Tracking event: " + (String)localObject1 + ", url: " + (String)localObject2);
                  }
                }
              }
            }
            else if (((String)localObject1).equals("AdParameters"))
            {
              this.j = XmlParser.a(XmlParser.this, paramXmlPullParser);
              XmlParser.this.a("AdParameters: " + this.j);
            }
            else if (((String)localObject1).equals("VideoClicks"))
            {
              while (paramXmlPullParser.next() != 3) {
                if (paramXmlPullParser.getEventType() == 2)
                {
                  localObject1 = paramXmlPullParser.getName();
                  if (paramXmlPullParser.isEmptyElementTag())
                  {
                    XmlParser.this.a("Empty tag in creative: " + (String)localObject1);
                    paramXmlPullParser.nextTag();
                  }
                  else if (((String)localObject1).equals("ClickThrough"))
                  {
                    this.k = XmlParser.a(XmlParser.this, paramXmlPullParser);
                    XmlParser.this.a("Video click through url: " + this.k);
                  }
                  else if (((String)localObject1).equals("ClickTracking"))
                  {
                    localObject1 = new HashMap();
                    localObject2 = paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "id");
                    str1 = XmlParser.a(XmlParser.this, paramXmlPullParser);
                    ((HashMap)localObject1).put("id", localObject2);
                    ((HashMap)localObject1).put("ClickTracking", str1);
                    if (this.l == null) {
                      this.l = new ArrayList();
                    }
                    this.l.add(localObject1);
                    XmlParser.this.a("Video click tracking ID: " + (String)localObject2 + ", url: " + str1);
                  }
                  else if (((String)localObject1).equals("CustomClick"))
                  {
                    localObject1 = new HashMap();
                    localObject2 = paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "id");
                    str1 = XmlParser.a(XmlParser.this, paramXmlPullParser);
                    ((HashMap)localObject1).put("id", localObject2);
                    ((HashMap)localObject1).put("CustomClick", str1);
                    if (this.m == null) {
                      this.m = new ArrayList();
                    }
                    this.m.add(localObject1);
                    XmlParser.this.a("Video Custom click tracking ID: " + (String)localObject2 + ", url: " + str1);
                  }
                }
              }
            }
            else if (((String)localObject1).equals("MediaFiles"))
            {
              while (paramXmlPullParser.next() != 3) {
                if (paramXmlPullParser.getEventType() == 2)
                {
                  localObject1 = paramXmlPullParser.getName();
                  if (paramXmlPullParser.isEmptyElementTag())
                  {
                    XmlParser.this.a("Empty tag in media: " + (String)localObject1);
                    paramXmlPullParser.nextTag();
                  }
                  else if (((String)localObject1).equals("MediaFile"))
                  {
                    localObject1 = paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "id");
                    localObject2 = paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "delivery");
                    str1 = paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "type");
                    i1 = a(paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "bitrate"));
                    i2 = a(paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "width"));
                    int i3 = a(paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "height"));
                    boolean bool1 = Boolean.parseBoolean(paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "scalable"));
                    boolean bool2 = Boolean.parseBoolean(paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "maintainAspectRatio"));
                    str2 = paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "apiFramework");
                    str3 = paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "codec");
                    int i4 = a(paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "maxBitrate"));
                    int i5 = a(paramXmlPullParser.getAttributeValue(XmlParser.a(XmlParser.this), "minBitrate"));
                    str4 = XmlParser.a(XmlParser.this, paramXmlPullParser);
                    XmlParser.this.a("Media id: " + (String)localObject1 + ", delivery: " + (String)localObject2 + ", type: " + str1 + ", bitrate: " + i1 + ", width: " + i2 + ", height: " + i3 + ", scalable: " + bool1 + ", aspect ratio: " + bool2 + ", apiFrameowrk: " + str2 + ", codec: " + str3 + ", maxBitrate: " + i4 + ", minBitrate: " + i5 + ", URI: " + str4);
                    localObject3 = new HashMap();
                    ((HashMap)localObject3).put("id", localObject1);
                    ((HashMap)localObject3).put("delivery", localObject2);
                    ((HashMap)localObject3).put("type", str1);
                    ((HashMap)localObject3).put("bitrate", Integer.valueOf(i1));
                    ((HashMap)localObject3).put("width", Integer.valueOf(i2));
                    ((HashMap)localObject3).put("height", Integer.valueOf(i3));
                    ((HashMap)localObject3).put("scalable", Boolean.valueOf(bool1));
                    ((HashMap)localObject3).put("maintainAspectRatio", Boolean.valueOf(bool2));
                    ((HashMap)localObject3).put("apiFramework", str2);
                    ((HashMap)localObject3).put("codec", str3);
                    ((HashMap)localObject3).put("maxBitrate", Integer.valueOf(i4));
                    ((HashMap)localObject3).put("minBitrate", Integer.valueOf(i5));
                    ((HashMap)localObject3).put("MediaFile", str4);
                    if (this.n == null) {
                      this.n = new ArrayList();
                    }
                    this.n.add(localObject3);
                  }
                }
              }
            }
          }
        }
      }
    }
    
    private int a(String paramString)
    {
      try
      {
        int i1 = Integer.parseInt(paramString);
        return i1;
      }
      catch (NumberFormatException paramString)
      {
        return 0;
      }
      catch (Exception paramString)
      {
        for (;;) {}
      }
    }
    
    public String getAdParams()
    {
      return this.j;
    }
    
    public String getCreativeAdId()
    {
      return this.f;
    }
    
    public String getDuration()
    {
      return this.g;
    }
    
    public List<HashMap<String, Object>> getIcons()
    {
      return this.h;
    }
    
    public String getId()
    {
      return this.d;
    }
    
    public List<HashMap<String, Object>> getMediaFiles()
    {
      return this.n;
    }
    
    public String getSequence()
    {
      return this.e;
    }
    
    public String getSkipOffSet()
    {
      return this.c;
    }
    
    public HashMap<String, String> getTrackingEventMap()
    {
      return this.i;
    }
    
    public String getVideoClickThrough()
    {
      return this.k;
    }
    
    public List<HashMap<String, String>> getVideoClickTracking()
    {
      return this.l;
    }
    
    public List<HashMap<String, String>> getVideoCustomClickTracking()
    {
      return this.m;
    }
    
    public boolean isAdLinearSkipable()
    {
      return this.b;
    }
  }
  
  public static class InvalidVastXML
    extends IOException
  {
    private static final long serialVersionUID = 1L;
    
    public InvalidVastXML(String paramString)
    {
      super();
    }
  }
  
  public static class VastException
    extends IOException
  {
    private static final long serialVersionUID = 1L;
    private int a;
    
    public VastException(String paramString1, String paramString2)
    {
      super();
      try
      {
        this.a = Integer.parseInt(paramString2);
        return;
      }
      catch (NumberFormatException paramString1) {}
    }
    
    public int getCode()
    {
      return this.a;
    }
  }
}
