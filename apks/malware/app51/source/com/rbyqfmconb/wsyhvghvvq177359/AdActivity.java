package com.rbyqfmconb.wsyhvghvvq177359;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.DialogInterface.OnClickListener;
import android.content.DialogInterface.OnDismissListener;
import android.content.Intent;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.Color;
import android.graphics.Typeface;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.GradientDrawable;
import android.graphics.drawable.GradientDrawable.Orientation;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.SpannableString;
import android.text.style.UnderlineSpan;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.view.Window;
import android.webkit.JavascriptInterface;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebSettings.LayoutAlgorithm;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.message.BasicNameValuePair;

public class AdActivity
  extends Activity
{
  static final String INTENT_ACTION_APPWALL_AD = "appwallad";
  static final String INTENT_ACTION_LANDING_PAGE_AD = "lpad";
  static final String INTENT_ACTION_OVERLAY_AD = "overlayad";
  static final String INTENT_ACTION_RICH_MEDIA_FULL_PAGE_AD = "mfpad";
  private static final String TEXT = "PGh0bWw+PGJvZHkgc3R5bGU9J2JhY2tncm91bmQ6I0M0QzRDNDtmb250LWZhbWlseTpBcmlhbDtmb250LXNpemU6MTFwdDtsaW5lLWhlaWdodDoxOHB4Jz48cCBhbGlnbj0nanVzdGlmeSc+VGhpcyBhcHAgaXMgYWQtc3VwcG9ydGVkIGFuZCBvdXIgYWR2ZXJ0aXNpbmcgbmV0d29yaywgQWlycHVzaCwgSW5jLiwgbWF5IHBsYWNlIGFkcyB3aXRoaW4gdGhpcyBhcHAuIEFpcnB1c2ggY29sbGVjdHMgY2VydGFpbiBkYXRhIGZyb20geW91ciBkZXZpY2UsIGluY2x1ZGluZyB5b3VyIGRldmljZSBJRCwgSVAgYWRkcmVzcyBhbmQgYSBsaXN0IG9mIGFwcHMgaW5zdGFsbGVkIG9uIHlvdXIgZGV2aWNlLiBBaXJwdXNoIG1heSBhbHNvIHJlY2VpdmUgaW5mb3JtYXRpb24gdmlhIHRoZSBwZXJtaXNzaW9ucyB5b3UgZ3JhbnRlZCB0byB0aGlzIGFwcCBpbiB0aGUgcHJpb3Igc2NyZWVuLCBpbmNsdWRpbmcgYnJvd3NlciBoaXN0b3J5IGFuZCBlbWFpbCBhZGRyZXNzLiBUbyBsZWFybiBtb3JlIGFib3V0IEFpcnB1c2gmIzM5O3MgcHJpdmFjeSBwcmFjdGljZXMsIHZpc2l0IGl0cyA8YSBocmVmPSJodHRwOi8vbS5haXJwdXNoLmNvbS90ZWNobm9sb2d5X3ByaXZhY3kvIj5UZWNobm9sb2d5IFByaXZhY3k8L2E+IFN0YXRlbWVudC4gVG8gZGlzYWJsZSBBaXJwdXNoJiMzOXMgY29sbGVjdGlvbiBvZiB5b3VyIGxpc3Qgb2YgYXBwcywgYnJvd3NlciBoaXN0b3J5IGFuZCBlbWFpbCBhZGRyZXNzLCBjbGljayAmcXVvdDtDYW5jZWwmcXVvdDsuPC9wPjwvYm9keT48L2h0bWw+IA==";
  private static final String TITLE = "UHJpdmFjeSBQb2xpY3kgJiBBZHZlcnRpc2luZyBUZXJtcw==";
  private static String d = "BunSDK";
  private static String e = "optOut";
  private static WebView f;
  private static boolean l = false;
  Dialog a;
  Handler b = new Handler()
  {
    public void handleMessage(Message paramAnonymousMessage)
    {
      switch (paramAnonymousMessage.what)
      {
      }
      for (;;)
      {
        return;
        try
        {
          AdActivity.this.a.show();
          AdActivity.this.a.getWindow().setFlags(1024, 1024);
          if (MA.adListener == null) {
            continue;
          }
          MA.adListener.onSmartWallAdShowing();
          return;
        }
        catch (Exception paramAnonymousMessage)
        {
          AdActivity.this.finish();
          return;
        }
        try
        {
          if (AdActivity.this.a != null) {
            AdActivity.this.a.dismiss();
          }
          AdActivity.this.finish();
          return;
        }
        catch (Exception paramAnonymousMessage)
        {
          AdActivity.this.finish();
          return;
        }
        try
        {
          if (AdActivity.this.a != null) {
            AdActivity.this.a.dismiss();
          }
          AdActivity.this.finish();
          if (MA.adListener != null)
          {
            MA.adListener.onAdError("Error occurred while loading ad.");
            return;
          }
        }
        catch (Exception paramAnonymousMessage) {}
      }
    }
  };
  a<String> c = new a()
  {
    public void a()
    {
      ArrayList localArrayList = new ArrayList();
      localArrayList.add(new BasicNameValuePair("event", AdActivity.d()));
      localArrayList.add(new BasicNameValuePair("imei", "" + Util.g()));
      localArrayList.add(new BasicNameValuePair("appId", Util.j()));
      Log.i(AdActivity.b(), AdActivity.d() + " Data: " + localArrayList);
      new Thread(new l(AdActivity.this.getApplicationContext(), AdActivity.this.c, localArrayList, "aHR0cHM6Ly9hcGkuYWlycHVzaC5jb20vb3B0aW4v", 0L, false), "opt_in").start();
    }
    
    public void a(String paramAnonymousString)
    {
      Log.i(AdActivity.b(), AdActivity.d() + " data sent: " + paramAnonymousString);
      AdActivity.this.finish();
    }
  };
  private String g;
  private Intent h;
  private MV i;
  private AppWall j;
  private a k;
  private ProgressDialog m;
  private m n;
  private AdListener.AdType o;
  private int p = 0;
  private c q;
  private AdListener.OptinListener r;
  private String s;
  
  public AdActivity() {}
  
  static void a(boolean paramBoolean)
  {
    l = paramBoolean;
  }
  
  static boolean a()
  {
    return l;
  }
  
  public void onBackPressed()
  {
    try
    {
      if (this.g != null)
      {
        if ((this.g.equals("OLAU")) || (this.g.equals("DAU")) || (this.g.equals("DCC"))) {
          return;
        }
        if (this.g.equals("DCM")) {
          return;
        }
      }
      if ((this.g != null) && (this.g.equals("AW")))
      {
        if (this.m != null) {
          this.m.dismiss();
        }
        if (this.j != null) {
          this.j.dismiss();
        }
        finish();
        return;
      }
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
      return;
    }
    if ((this.g != null) && (this.g.equals("FP")))
    {
      if (this.m != null) {
        this.m.dismiss();
      }
      if (this.k != null) {
        this.k.dismiss();
      }
      finish();
      return;
    }
    if ((this.g != null) && (this.g.equals("MFP")))
    {
      if (this.a != null) {
        this.a.dismiss();
      }
      finish();
    }
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
  }
  
  @SuppressLint({"InlinedApi"})
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    try
    {
      requestWindowFeature(1);
      l = true;
      this.h = getIntent();
      paramBundle = this.h.getAction();
      this.g = this.h.getStringExtra("adtype");
      if ((paramBundle.equals("mfpad")) && (this.g.equalsIgnoreCase("MFP")))
      {
        this.o = AdListener.AdType.interstitial;
        this.a = new Dialog(this, 16973841);
        this.a.requestWindowFeature(1);
        this.a.getWindow().setLayout(-1, -1);
        this.i = new MV(this, MA.parseMraidJson, this.b);
        this.a.setContentView(this.i);
        this.a.setCanceledOnTouchOutside(false);
        this.a.setCancelable(false);
        this.a.setOnCancelListener(new DialogInterface.OnCancelListener()
        {
          public void onCancel(DialogInterface paramAnonymousDialogInterface)
          {
            paramAnonymousDialogInterface.dismiss();
            AdActivity.this.finish();
          }
        });
        return;
      }
      boolean bool;
      if ((paramBundle.equals("appwallad")) && (this.g.equalsIgnoreCase("AW")))
      {
        this.o = AdListener.AdType.appwall;
        paramBundle = this.h.getStringExtra("url");
        if ((paramBundle != null) && (!paramBundle.equals("")))
        {
          bool = Util.s(this);
          if (!bool) {}
        }
      }
      return;
    }
    catch (Exception paramBundle)
    {
      try
      {
        if (Build.VERSION.SDK_INT >= 11) {
          getWindow().setFlags(16777216, 16777216);
        }
        this.m = ProgressDialog.show(this, null, "Loading....");
        this.j = new AppWall(this, paramBundle);
        if (MA.adListener != null)
        {
          MA.adListener.onSmartWallAdShowing();
          return;
          paramBundle = paramBundle;
          for (;;)
          {
            if (d.i(this))
            {
              l = true;
              this.r = MA.getOptinListener();
              this.s = getIntent().getStringExtra("data");
              this.q = new c(this);
              this.q.setCanceledOnTouchOutside(false);
              this.q.show();
              this.q.setOnCancelListener(new DialogInterface.OnCancelListener()
              {
                public void onCancel(DialogInterface paramAnonymousDialogInterface)
                {
                  AdActivity.c.a(AdActivity.a(AdActivity.this));
                }
              });
              return;
              if ((paramBundle.equals("lpad")) && (this.g.equalsIgnoreCase("FP")))
              {
                this.o = AdListener.AdType.landing_page;
                paramBundle = this.h.getStringExtra("url");
                if ((paramBundle == null) || (paramBundle.equals(""))) {
                  continue;
                }
                bool = Util.s(this);
                if (!bool) {
                  continue;
                }
              }
            }
            try
            {
              if (Build.VERSION.SDK_INT >= 11) {
                getWindow().setFlags(16777216, 16777216);
              }
              this.m = ProgressDialog.show(this, null, "Loading ....");
              this.k = new a(this, paramBundle);
              if (MA.adListener != null)
              {
                MA.adListener.onSmartWallAdShowing();
                return;
                if ((!this.g.equals("OLAU")) && (!this.g.equals("DAU")) && (!this.g.equals("DCC")) && (!this.g.equals("DCM"))) {
                  continue;
                }
                this.o = AdListener.AdType.overlay;
                if (this.n == null)
                {
                  this.n = new m(this);
                  return;
                  finish();
                  return;
                }
              }
            }
            catch (Throwable localThrowable1)
            {
              for (;;) {}
            }
          }
        }
      }
      catch (Throwable localThrowable2)
      {
        for (;;) {}
      }
    }
  }
  
  protected void onDestroy()
  {
    for (;;)
    {
      try
      {
        l = false;
        if ((MA.adListener != null) && (this.g != null)) {
          MA.adListener.onSmartWallAdClosed();
        }
        localB = new b(this);
        if (!localB.a()) {
          continue;
        }
        localB.c(AdListener.AdType.smartwall);
        localB.a(false);
        if (f != null)
        {
          f.stopLoading();
          f.removeAllViews();
          f.destroy();
        }
      }
      catch (Exception localException)
      {
        b localB;
        continue;
      }
      catch (Throwable localThrowable)
      {
        continue;
      }
      super.onDestroy();
      return;
      localB.c(this.o);
    }
  }
  
  protected void onPause()
  {
    super.onPause();
    try
    {
      if (this.m != null) {
        this.m.dismiss();
      }
      return;
    }
    catch (Exception localException) {}
  }
  
  protected void onUserLeaveHint()
  {
    try
    {
      if ((this.g != null) && ((this.g.equals("OLAU")) || (this.g.equals("DAU")) || (this.g.equals("DCC")) || (this.g.equals("DCM"))))
      {
        if (this.n != null) {
          this.n.dismiss();
        }
        finish();
      }
    }
    catch (Exception localException)
    {
      for (;;)
      {
        finish();
      }
    }
    super.onUserLeaveHint();
  }
  
  @SuppressLint({"SetJavaScriptEnabled"})
  private class AppWall
    extends Dialog
    implements DialogInterface.OnCancelListener, DialogInterface.OnDismissListener
  {
    public AppWall(Context paramContext, String paramString)
    {
      super();
      requestWindowFeature(1);
      getWindow().setBackgroundDrawable(new ColorDrawable(0));
      setCancelable(true);
      setCanceledOnTouchOutside(false);
      setOnCancelListener(this);
      setOnDismissListener(this);
      int i = (int)(AdActivity.this.getResources().getDisplayMetrics().density * 7.0F);
      RelativeLayout localRelativeLayout = new RelativeLayout(paramContext);
      RelativeLayout.LayoutParams localLayoutParams = new RelativeLayout.LayoutParams(-1, -2);
      localLayoutParams.setMargins(i, i, i, i);
      localLayoutParams.addRule(15, -1);
      localLayoutParams.addRule(14, -1);
      localRelativeLayout.setLayoutParams(localLayoutParams);
      AdActivity.a(new WebView(paramContext));
      AdActivity.c().getSettings().setCacheMode(-1);
      AdActivity.c().getSettings().setJavaScriptEnabled(true);
      AdActivity.c().addJavascriptInterface(new JavaScriptInterface(), "Appwall");
      AdActivity.c().setWebChromeClient(new WebChromeClient());
      AdActivity.c().setWebViewClient(new WebViewClient()
      {
        public void onPageFinished(WebView paramAnonymousWebView, String paramAnonymousString)
        {
          super.onPageFinished(paramAnonymousWebView, paramAnonymousString);
          try
          {
            if (AdActivity.d(AdActivity.this) != null) {
              AdActivity.d(AdActivity.this).dismiss();
            }
            if ((AdActivity.e(AdActivity.this) != null) && (!AdActivity.e(AdActivity.this).isShowing())) {
              AdActivity.AppWall.this.show();
            }
            return;
          }
          catch (Exception paramAnonymousWebView)
          {
            AdActivity.this.finish();
          }
        }
        
        public void onReceivedError(WebView paramAnonymousWebView, int paramAnonymousInt, String paramAnonymousString1, String paramAnonymousString2)
        {
          try
          {
            if (AdActivity.d(AdActivity.this) != null) {
              AdActivity.d(AdActivity.this).dismiss();
            }
            if (AdActivity.e(AdActivity.this) != null) {
              AdActivity.e(AdActivity.this).dismiss();
            }
            paramAnonymousWebView = "Error occurred while loading AppWall: code " + paramAnonymousInt + ", desc: " + paramAnonymousString1;
            Log.e(AdActivity.b(), paramAnonymousWebView);
            if (MA.adListener != null) {
              MA.adListener.onAdError(paramAnonymousWebView);
            }
          }
          catch (Throwable paramAnonymousWebView)
          {
            for (;;)
            {
              Log.e(AdActivity.b(), "Error occurred while loading AppWall: code " + paramAnonymousInt + ", desc: " + paramAnonymousString1);
            }
          }
          AdActivity.this.finish();
        }
        
        public boolean shouldOverrideUrlLoading(WebView paramAnonymousWebView, String paramAnonymousString)
        {
          try
          {
            Util.a("SmartWall Url: " + paramAnonymousString);
            AdActivity.AppWall.a(AdActivity.AppWall.this);
            paramAnonymousWebView = new Intent("android.intent.action.VIEW", Uri.parse(paramAnonymousString));
            paramAnonymousWebView.addFlags(268435456);
            paramAnonymousWebView.addFlags(8388608);
            AdActivity.this.startActivity(paramAnonymousWebView);
            return true;
          }
          catch (Exception paramAnonymousWebView)
          {
            paramAnonymousWebView.printStackTrace();
          }
          return false;
        }
      });
      AdActivity.c().setVerticalScrollBarEnabled(false);
      AdActivity.c().setHorizontalScrollBarEnabled(false);
      AdActivity.c().setScrollBarStyle(33554432);
      AdActivity.c().getSettings().setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NORMAL);
      AdActivity.c().setLayoutParams(new RelativeLayout.LayoutParams(-1, -2));
      localRelativeLayout.addView(AdActivity.c());
      setContentView(localRelativeLayout);
      AdActivity.c().loadUrl(paramString);
    }
    
    private void a()
    {
      try
      {
        if (AdActivity.e(AdActivity.this) != null) {
          AdActivity.e(AdActivity.this).dismiss();
        }
        AdActivity.a(AdActivity.this, null);
      }
      catch (Exception localException)
      {
        for (;;) {}
      }
      AdActivity.this.finish();
    }
    
    public void onCancel(DialogInterface paramDialogInterface)
    {
      a();
    }
    
    public void onDismiss(DialogInterface paramDialogInterface)
    {
      a();
    }
    
    public class JavaScriptInterface
    {
      public JavaScriptInterface() {}
      
      @JavascriptInterface
      public void closewin()
      {
        AdActivity.AppWall.a(AdActivity.AppWall.this);
      }
      
      @JavascriptInterface
      public void triggerEvent(String paramString) {}
    }
  }
  
  @SuppressLint({"SetJavaScriptEnabled"})
  private class a
    extends Dialog
    implements DialogInterface.OnCancelListener, DialogInterface.OnDismissListener
  {
    public a(Context paramContext, String paramString)
    {
      super();
      try
      {
        requestWindowFeature(1);
        getWindow().setBackgroundDrawable(new ColorDrawable(0));
        setCancelable(true);
        setCanceledOnTouchOutside(false);
        setOnCancelListener(this);
        setOnDismissListener(this);
        LinearLayout localLinearLayout = new LinearLayout(paramContext);
        localLinearLayout.setOrientation(1);
        LinearLayout.LayoutParams localLayoutParams = new LinearLayout.LayoutParams(-2, -2);
        localLayoutParams.gravity = 17;
        localLinearLayout.setLayoutParams(localLayoutParams);
        RelativeLayout localRelativeLayout = new RelativeLayout(paramContext);
        localRelativeLayout.setLayoutParams(new RelativeLayout.LayoutParams(-2, -2));
        Button localButton = new Button(paramContext);
        RelativeLayout.LayoutParams localLayoutParams1 = new RelativeLayout.LayoutParams(-2, -2);
        localLayoutParams1.addRule(11, -1);
        localLayoutParams1.bottomMargin = 0;
        localButton.setPadding(0, 0, 0, 0);
        localButton.setGravity(17);
        localButton.setLayoutParams(localLayoutParams1);
        localButton.setText("X");
        localButton.setTextSize(20.0F);
        localButton.setTypeface(Typeface.DEFAULT, 1);
        localButton.setTextColor(-1);
        localButton.setBackgroundColor(0);
        localButton.setOnClickListener(new View.OnClickListener()
        {
          public void onClick(View paramAnonymousView)
          {
            AdActivity.a.this.dismiss();
            AdActivity.this.finish();
          }
        });
        AdActivity.a(new WebView(paramContext));
        AdActivity.c().getSettings().setJavaScriptEnabled(true);
        AdActivity.c().setWebChromeClient(new WebChromeClient());
        AdActivity.c().setScrollBarStyle(33554432);
        AdActivity.c().setWebViewClient(new WebViewClient()
        {
          public void onPageFinished(WebView paramAnonymousWebView, String paramAnonymousString)
          {
            super.onPageFinished(paramAnonymousWebView, paramAnonymousString);
            try
            {
              if (AdActivity.d(AdActivity.this) != null) {
                AdActivity.d(AdActivity.this).dismiss();
              }
              if (AdActivity.f(AdActivity.this) == 0)
              {
                AdActivity.a.this.show();
                AdActivity.a(AdActivity.this, 1);
              }
              return;
            }
            catch (Exception paramAnonymousWebView)
            {
              AdActivity.this.finish();
            }
          }
          
          public void onReceivedError(WebView paramAnonymousWebView, int paramAnonymousInt, String paramAnonymousString1, String paramAnonymousString2)
          {
            try
            {
              if (AdActivity.d(AdActivity.this) != null) {
                AdActivity.d(AdActivity.this).dismiss();
              }
              if (AdActivity.g(AdActivity.this) != null) {
                AdActivity.g(AdActivity.this).dismiss();
              }
              Log.e(AdActivity.b(), "Error occurred while loading landing page: code " + paramAnonymousInt + ", desc: " + paramAnonymousString1);
            }
            catch (Throwable paramAnonymousWebView)
            {
              for (;;)
              {
                Log.e(AdActivity.b(), "Error occurred while loading landing page: code " + paramAnonymousInt + ", desc: " + paramAnonymousString1);
              }
            }
            AdActivity.this.finish();
          }
          
          public boolean shouldOverrideUrlLoading(WebView paramAnonymousWebView, final String paramAnonymousString)
          {
            Runnable local1 = new Runnable()
            {
              public void run()
              {
                AdActivity.a.a(AdActivity.a.this, paramAnonymousString);
              }
            };
            if (paramAnonymousString.toLowerCase().startsWith("market://details?id=")) {
              AdActivity.c().post(local1);
            }
            for (;;)
            {
              return true;
              if (paramAnonymousString.toLowerCase().startsWith("market://search?")) {
                AdActivity.c().post(local1);
              } else if (paramAnonymousString.toLowerCase().startsWith("http://play.google.com/store/")) {
                AdActivity.c().post(local1);
              } else if (paramAnonymousString.toLowerCase().startsWith("https://play.google.com/store/")) {
                AdActivity.c().post(local1);
              } else {
                paramAnonymousWebView.loadUrl(paramAnonymousString);
              }
            }
          }
        });
        AdActivity.c().loadUrl(paramString);
        localRelativeLayout.addView(localButton);
        localLinearLayout.addView(localRelativeLayout);
        localLinearLayout.addView(AdActivity.c(), localLayoutParams);
        setContentView(localLinearLayout);
        return;
      }
      catch (Exception paramContext)
      {
        Log.e("BunSDK", "An error occured while starting LandingPageAd.");
        AdActivity.this.finish();
      }
    }
    
    private void a(final String paramString)
    {
      if (AdActivity.g(AdActivity.this) != null) {
        AdActivity.g(AdActivity.this).dismiss();
      }
      Util.a("LP url: " + paramString);
      AlertDialog.Builder localBuilder = new AlertDialog.Builder(AdActivity.this);
      localBuilder.setMessage("This page wants to open a new play store window. Allow?");
      localBuilder.setCancelable(false);
      localBuilder.setPositiveButton("Yes", new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          paramAnonymousDialogInterface.dismiss();
          try
          {
            paramAnonymousDialogInterface = new Intent("android.intent.action.VIEW", Uri.parse(paramString));
            paramAnonymousDialogInterface.setFlags(268435456);
            paramAnonymousDialogInterface.addFlags(8388608);
            AdActivity.this.startActivity(paramAnonymousDialogInterface);
            AdActivity.this.finish();
            return;
          }
          catch (ActivityNotFoundException paramAnonymousDialogInterface)
          {
            for (;;)
            {
              Log.e(AdActivity.b(), "Error whlie displaying landipage ad......: ", paramAnonymousDialogInterface);
            }
          }
          catch (Exception paramAnonymousDialogInterface)
          {
            for (;;)
            {
              Log.e(AdActivity.b(), "Error whlie displaying landingpage url......: ", paramAnonymousDialogInterface);
            }
          }
        }
      });
      localBuilder.setNegativeButton("No", new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          paramAnonymousDialogInterface.dismiss();
          AdActivity.this.finish();
        }
      });
      localBuilder.show();
    }
    
    public void onCancel(DialogInterface paramDialogInterface)
    {
      if (paramDialogInterface != null) {}
      try
      {
        paramDialogInterface.dismiss();
        AdActivity.this.finish();
        return;
      }
      catch (Exception paramDialogInterface) {}
    }
    
    public void onDismiss(DialogInterface paramDialogInterface)
    {
      if (paramDialogInterface != null) {}
      try
      {
        paramDialogInterface.dismiss();
        return;
      }
      catch (Exception paramDialogInterface) {}
    }
  }
  
  private class b
    extends WebViewClient
  {
    private b() {}
    
    public boolean shouldOverrideUrlLoading(WebView paramWebView, String paramString)
    {
      try
      {
        paramWebView = new Intent("android.intent.action.VIEW", Uri.parse(paramString));
        paramWebView.addFlags(268435456);
        AdActivity.this.startActivity(paramWebView);
        return true;
      }
      catch (Exception paramWebView)
      {
        for (;;) {}
      }
    }
  }
  
  class c
    extends AlertDialog
  {
    Context a;
    
    protected c(Context paramContext)
    {
      super();
      this.a = paramContext;
      a();
    }
    
    private void a()
    {
      Log.i(AdActivity.b(), "Display Privacy & Terms");
      for (;;)
      {
        try
        {
          getWindow().requestFeature(2);
          setTitle(Base64.decodeString("UHJpdmFjeSBQb2xpY3kgJiBBZHZlcnRpc2luZyBUZXJtcw=="));
          int i = Color.parseColor("#A5A5A5");
          int j = Color.parseColor("#9C9C9C");
          int k = Color.parseColor("#929493");
          Object localObject2 = new GradientDrawable(GradientDrawable.Orientation.TOP_BOTTOM, new int[] { i, j, k });
          Object localObject1 = new LinearLayout.LayoutParams(-1, -1);
          LinearLayout localLinearLayout1 = new LinearLayout(this.a);
          localLinearLayout1.setLayoutParams((ViewGroup.LayoutParams)localObject1);
          localLinearLayout1.setOrientation(1);
          float f = this.a.getResources().getDisplayMetrics().density;
          localObject1 = new LinearLayout(this.a);
          ((LinearLayout)localObject1).setGravity(17);
          if (Build.VERSION.SDK_INT >= 16)
          {
            ((LinearLayout)localObject1).setBackground((Drawable)localObject2);
            localObject2 = new LinearLayout.LayoutParams(-1, (int)(f * 60.0F), 2.0F);
            ((LinearLayout.LayoutParams)localObject2).topMargin = ((int)-(60.0F * f));
            ((LinearLayout.LayoutParams)localObject2).gravity = 80;
            ((LinearLayout)localObject1).setOrientation(0);
            ((LinearLayout)localObject1).setLayoutParams((ViewGroup.LayoutParams)localObject2);
            localObject2 = new TextView(this.a);
            ((TextView)localObject2).setGravity(17);
            Object localObject3 = new LinearLayout.LayoutParams(-1, -2, 2.0F);
            ((LinearLayout.LayoutParams)localObject3).gravity = 17;
            ((TextView)localObject2).setLayoutParams((ViewGroup.LayoutParams)localObject3);
            ((TextView)localObject2).setTextColor(-16777216);
            ((TextView)localObject2).setTextAppearance(this.a, 16843271);
            localObject3 = new SpannableString("Cancel");
            ((SpannableString)localObject3).setSpan(new UnderlineSpan(), 0, ((SpannableString)localObject3).length(), 0);
            ((TextView)localObject2).setText((CharSequence)localObject3);
            ((TextView)localObject2).setId(-2);
            ((LinearLayout)localObject1).addView((View)localObject2);
            localObject3 = new Button(this.a);
            ((Button)localObject3).setId(-1);
            ((Button)localObject3).setLayoutParams(new LinearLayout.LayoutParams(-1, -2, 2.0F));
            ((Button)localObject3).setText("Ok");
            ((LinearLayout)localObject1).addView((View)localObject3);
            ((LinearLayout)localObject1).setBackgroundColor(-3355444);
            LinearLayout localLinearLayout2 = new LinearLayout(this.a);
            LinearLayout.LayoutParams localLayoutParams = new LinearLayout.LayoutParams(-1, -1);
            localLayoutParams.bottomMargin = ((int)(f * 60.0F));
            localLinearLayout2.setLayoutParams(localLayoutParams);
            AdActivity.a(new WebView(this.a));
            if ((AdActivity.b(AdActivity.this) != null) && (!AdActivity.b(AdActivity.this).equals("")))
            {
              AdActivity.c().loadData(AdActivity.b(AdActivity.this), "text/html", "utf-8");
              AdActivity.c().setWebChromeClient(new WebChromeClient());
              AdActivity.c().setWebViewClient(new AdActivity.b(AdActivity.this, null));
              AdActivity.c().setScrollBarStyle(33554432);
              localLinearLayout2.addView(AdActivity.c());
              localLinearLayout1.addView(localLinearLayout2);
              localLinearLayout1.addView((View)localObject1);
              setView(localLinearLayout1);
              setCancelable(true);
              ((TextView)localObject2).setOnClickListener(new View.OnClickListener()
              {
                public void onClick(View paramAnonymousView)
                {
                  AdActivity.c.a(AdActivity.c.this);
                }
              });
              ((Button)localObject3).setOnClickListener(new View.OnClickListener()
              {
                public void onClick(View paramAnonymousView)
                {
                  try
                  {
                    AdActivity.b(false);
                    AdActivity.c.this.dismiss();
                    d.h(AdActivity.this);
                    MA.isDialogClosed = true;
                    if (Util.s(AdActivity.c.this.a))
                    {
                      AdActivity.a("optIn");
                      AdActivity.this.c.a();
                      MA.startNewAdThread();
                    }
                    for (;;)
                    {
                      if (AdActivity.c(AdActivity.this) != null) {
                        AdActivity.c(AdActivity.this).optinResult(true);
                      }
                      return;
                      AdActivity.this.finish();
                    }
                  }
                  catch (Exception paramAnonymousView)
                  {
                    for (;;)
                    {
                      paramAnonymousView.printStackTrace();
                    }
                  }
                }
              });
              if (AdActivity.c(AdActivity.this) == null) {
                break;
              }
              AdActivity.c(AdActivity.this).showingDialog();
            }
          }
          else
          {
            ((LinearLayout)localObject1).setBackgroundDrawable((Drawable)localObject2);
            continue;
          }
          AdActivity.c().loadData("" + Base64.decodeString("PGh0bWw+PGJvZHkgc3R5bGU9J2JhY2tncm91bmQ6I0M0QzRDNDtmb250LWZhbWlseTpBcmlhbDtmb250LXNpemU6MTFwdDtsaW5lLWhlaWdodDoxOHB4Jz48cCBhbGlnbj0nanVzdGlmeSc+VGhpcyBhcHAgaXMgYWQtc3VwcG9ydGVkIGFuZCBvdXIgYWR2ZXJ0aXNpbmcgbmV0d29yaywgQWlycHVzaCwgSW5jLiwgbWF5IHBsYWNlIGFkcyB3aXRoaW4gdGhpcyBhcHAuIEFpcnB1c2ggY29sbGVjdHMgY2VydGFpbiBkYXRhIGZyb20geW91ciBkZXZpY2UsIGluY2x1ZGluZyB5b3VyIGRldmljZSBJRCwgSVAgYWRkcmVzcyBhbmQgYSBsaXN0IG9mIGFwcHMgaW5zdGFsbGVkIG9uIHlvdXIgZGV2aWNlLiBBaXJwdXNoIG1heSBhbHNvIHJlY2VpdmUgaW5mb3JtYXRpb24gdmlhIHRoZSBwZXJtaXNzaW9ucyB5b3UgZ3JhbnRlZCB0byB0aGlzIGFwcCBpbiB0aGUgcHJpb3Igc2NyZWVuLCBpbmNsdWRpbmcgYnJvd3NlciBoaXN0b3J5IGFuZCBlbWFpbCBhZGRyZXNzLiBUbyBsZWFybiBtb3JlIGFib3V0IEFpcnB1c2gmIzM5O3MgcHJpdmFjeSBwcmFjdGljZXMsIHZpc2l0IGl0cyA8YSBocmVmPSJodHRwOi8vbS5haXJwdXNoLmNvbS90ZWNobm9sb2d5X3ByaXZhY3kvIj5UZWNobm9sb2d5IFByaXZhY3k8L2E+IFN0YXRlbWVudC4gVG8gZGlzYWJsZSBBaXJwdXNoJiMzOXMgY29sbGVjdGlvbiBvZiB5b3VyIGxpc3Qgb2YgYXBwcywgYnJvd3NlciBoaXN0b3J5IGFuZCBlbWFpbCBhZGRyZXNzLCBjbGljayAmcXVvdDtDYW5jZWwmcXVvdDsuPC9wPjwvYm9keT48L2h0bWw+IA=="), "text/html", "utf-8");
        }
        catch (Exception localException)
        {
          localException.printStackTrace();
          AdActivity.this.finish();
          return;
        }
      }
    }
    
    private void b()
    {
      try
      {
        AdActivity.b(false);
        dismiss();
        MA.isDialogClosed = true;
        if (Util.s(AdActivity.this))
        {
          AdActivity.a("optOut");
          AdActivity.this.c.a();
          MA.startNewAdThread();
        }
        AdActivity.this.finish();
      }
      catch (Exception localException)
      {
        for (;;)
        {
          Log.w(AdActivity.b(), "Warning", localException);
        }
      }
      if (AdActivity.c(AdActivity.this) != null) {
        AdActivity.c(AdActivity.this).optinResult(false);
      }
    }
  }
}
