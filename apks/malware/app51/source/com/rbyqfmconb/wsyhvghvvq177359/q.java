package com.rbyqfmconb.wsyhvghvvq177359;

import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Environment;
import android.util.Log;
import java.io.File;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.xmlpull.v1.XmlPullParserException;

class q
  implements a<String>
{
  private static final String TAG = "BunVast";
  private static XmlParser a;
  private Context b;
  
  public q(Context paramContext)
  {
    this.b = paramContext;
  }
  
  static boolean a(Context paramContext)
  {
    boolean bool = true;
    try
    {
      if (paramContext.checkCallingOrSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") == 0) {}
      for (int i = 1;; i = 0)
      {
        if (i == 0)
        {
          Log.e("BunSDK", "Required permission WRITE_EXTERNAL_STORAGE not found in Manifest. Please add.");
          MA.sendIntegrationError("Required permission WRITE_EXTERNAL_STORAGE not found in Manifest. Please add.");
          bool = false;
        }
        if (!bool) {
          new n(paramContext, 110);
        }
        return bool;
      }
      return false;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  static XmlParser b()
  {
    return a;
  }
  
  private void b(final String paramString1, final String paramString2)
  {
    for (;;)
    {
      try
      {
        String str = Environment.getExternalStorageState();
        if ((!str.equals("mounted")) || (str.equals("mounted_ro"))) {
          break label104;
        }
        bool = true;
        if (!Boolean.valueOf(bool).booleanValue())
        {
          paramString1 = "SD Card  is not available for caching video. SD Card storage state: " + str;
          Log.e("BunVast", paramString1);
          MA.sendAdError(paramString1);
          return;
        }
        paramString1 = new a()
        {
          String a = "";
          
          public void a()
          {
            try
            {
              File localFile = new File(Environment.getExternalStorageDirectory(), "ap_video");
              if ((localFile.exists()) && (localFile.isDirectory()))
              {
                VU.a(localFile);
                localFile.mkdirs();
                this.a = localFile.getAbsolutePath();
              }
              for (;;)
              {
                new Thread(new Runnable()
                {
                  /* Error */
                  public void run()
                  {
                    // Byte code:
                    //   0: new 30	java/net/URL
                    //   3: dup
                    //   4: aload_0
                    //   5: getfield 16	com/rbyqfmconb/wsyhvghvvq177359/q$1$1:a	Lcom/rbyqfmconb/wsyhvghvvq177359/q$1;
                    //   8: getfield 34	com/rbyqfmconb/wsyhvghvvq177359/q$1:c	Ljava/lang/String;
                    //   11: invokespecial 37	java/net/URL:<init>	(Ljava/lang/String;)V
                    //   14: invokevirtual 41	java/net/URL:openConnection	()Ljava/net/URLConnection;
                    //   17: astore_2
                    //   18: aload_2
                    //   19: sipush 7000
                    //   22: invokevirtual 47	java/net/URLConnection:setConnectTimeout	(I)V
                    //   25: aload_2
                    //   26: sipush 7000
                    //   29: invokevirtual 50	java/net/URLConnection:setReadTimeout	(I)V
                    //   32: aload_2
                    //   33: invokevirtual 53	java/net/URLConnection:connect	()V
                    //   36: ldc 55
                    //   38: new 57	java/lang/StringBuilder
                    //   41: dup
                    //   42: invokespecial 58	java/lang/StringBuilder:<init>	()V
                    //   45: ldc 60
                    //   47: invokevirtual 64	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
                    //   50: aload_2
                    //   51: invokevirtual 68	java/net/URLConnection:getContentLength	()I
                    //   54: invokevirtual 71	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
                    //   57: invokevirtual 75	java/lang/StringBuilder:toString	()Ljava/lang/String;
                    //   60: invokestatic 81	android/util/Log:i	(Ljava/lang/String;Ljava/lang/String;)I
                    //   63: pop
                    //   64: aload_2
                    //   65: invokevirtual 85	java/net/URLConnection:getInputStream	()Ljava/io/InputStream;
                    //   68: astore_2
                    //   69: new 87	java/io/File
                    //   72: dup
                    //   73: aload_0
                    //   74: getfield 16	com/rbyqfmconb/wsyhvghvvq177359/q$1$1:a	Lcom/rbyqfmconb/wsyhvghvvq177359/q$1;
                    //   77: getfield 89	com/rbyqfmconb/wsyhvghvvq177359/q$1:a	Ljava/lang/String;
                    //   80: ldc 91
                    //   82: invokespecial 94	java/io/File:<init>	(Ljava/lang/String;Ljava/lang/String;)V
                    //   85: astore_3
                    //   86: aload_3
                    //   87: invokevirtual 98	java/io/File:exists	()Z
                    //   90: ifeq +8 -> 98
                    //   93: aload_3
                    //   94: invokevirtual 101	java/io/File:delete	()Z
                    //   97: pop
                    //   98: new 103	java/io/FileOutputStream
                    //   101: dup
                    //   102: aload_3
                    //   103: invokespecial 106	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
                    //   106: astore 4
                    //   108: sipush 1024
                    //   111: newarray byte
                    //   113: astore 5
                    //   115: aload_2
                    //   116: aload 5
                    //   118: invokevirtual 112	java/io/InputStream:read	([B)I
                    //   121: istore_1
                    //   122: iload_1
                    //   123: ifle +50 -> 173
                    //   126: aload 4
                    //   128: aload 5
                    //   130: iconst_0
                    //   131: iload_1
                    //   132: invokevirtual 116	java/io/FileOutputStream:write	([BII)V
                    //   135: goto -20 -> 115
                    //   138: astore_2
                    //   139: aload_2
                    //   140: invokevirtual 119	java/net/SocketTimeoutException:printStackTrace	()V
                    //   143: aload_0
                    //   144: getfield 16	com/rbyqfmconb/wsyhvghvvq177359/q$1$1:a	Lcom/rbyqfmconb/wsyhvghvvq177359/q$1;
                    //   147: aconst_null
                    //   148: invokevirtual 121	com/rbyqfmconb/wsyhvghvvq177359/q$1:a	(Ljava/lang/String;)V
                    //   151: return
                    //   152: astore 4
                    //   154: aload 4
                    //   156: invokevirtual 122	java/lang/Exception:printStackTrace	()V
                    //   159: goto -61 -> 98
                    //   162: astore_2
                    //   163: aload_2
                    //   164: invokevirtual 123	java/net/MalformedURLException:printStackTrace	()V
                    //   167: goto -24 -> 143
                    //   170: astore_2
                    //   171: aload_2
                    //   172: athrow
                    //   173: aload 4
                    //   175: invokevirtual 126	java/io/FileOutputStream:close	()V
                    //   178: aload_0
                    //   179: getfield 16	com/rbyqfmconb/wsyhvghvvq177359/q$1$1:a	Lcom/rbyqfmconb/wsyhvghvvq177359/q$1;
                    //   182: aload_3
                    //   183: invokevirtual 129	java/io/File:getAbsolutePath	()Ljava/lang/String;
                    //   186: invokevirtual 121	com/rbyqfmconb/wsyhvghvvq177359/q$1:a	(Ljava/lang/String;)V
                    //   189: return
                    //   190: astore_2
                    //   191: aload_2
                    //   192: invokevirtual 130	java/io/IOException:printStackTrace	()V
                    //   195: goto -52 -> 143
                    // Local variable table:
                    //   start	length	slot	name	signature
                    //   0	198	0	this	1
                    //   121	11	1	i	int
                    //   17	99	2	localObject1	Object
                    //   138	2	2	localSocketTimeoutException	java.net.SocketTimeoutException
                    //   162	2	2	localMalformedURLException	java.net.MalformedURLException
                    //   170	2	2	localObject2	Object
                    //   190	2	2	localIOException	java.io.IOException
                    //   85	98	3	localFile	File
                    //   106	21	4	localFileOutputStream	java.io.FileOutputStream
                    //   152	22	4	localException	Exception
                    //   113	16	5	arrayOfByte	byte[]
                    // Exception table:
                    //   from	to	target	type
                    //   0	86	138	java/net/SocketTimeoutException
                    //   86	98	138	java/net/SocketTimeoutException
                    //   98	115	138	java/net/SocketTimeoutException
                    //   115	122	138	java/net/SocketTimeoutException
                    //   126	135	138	java/net/SocketTimeoutException
                    //   154	159	138	java/net/SocketTimeoutException
                    //   173	189	138	java/net/SocketTimeoutException
                    //   86	98	152	java/lang/Exception
                    //   0	86	162	java/net/MalformedURLException
                    //   86	98	162	java/net/MalformedURLException
                    //   98	115	162	java/net/MalformedURLException
                    //   115	122	162	java/net/MalformedURLException
                    //   126	135	162	java/net/MalformedURLException
                    //   154	159	162	java/net/MalformedURLException
                    //   173	189	162	java/net/MalformedURLException
                    //   0	86	170	finally
                    //   86	98	170	finally
                    //   98	115	170	finally
                    //   115	122	170	finally
                    //   126	135	170	finally
                    //   139	143	170	finally
                    //   154	159	170	finally
                    //   163	167	170	finally
                    //   173	189	170	finally
                    //   191	195	170	finally
                    //   0	86	190	java/io/IOException
                    //   86	98	190	java/io/IOException
                    //   98	115	190	java/io/IOException
                    //   115	122	190	java/io/IOException
                    //   126	135	190	java/io/IOException
                    //   154	159	190	java/io/IOException
                    //   173	189	190	java/io/IOException
                  }
                }, "dwn_video").start();
                return;
                if (localFile.mkdirs()) {
                  this.a = localFile.getAbsolutePath();
                }
              }
              return;
            }
            catch (Exception localException)
            {
              localException.printStackTrace();
              return;
            }
            catch (Throwable localThrowable) {}
          }
          
          public void a(String paramAnonymousString)
          {
            Util.a("Video file: " + paramAnonymousString);
            if (paramAnonymousString != null)
            {
              try
              {
                if (paramAnonymousString.equals("")) {
                  break label176;
                }
                if (MA.enableCaching)
                {
                  if (new b(q.a(q.this)).a(AdListener.AdType.video, paramString1, paramAnonymousString))
                  {
                    MA.sendAdCached(AdListener.AdType.video);
                    return;
                  }
                  if (MA.adListener == null) {
                    return;
                  }
                  MA.sendAdError("Video ad not cached.");
                  return;
                }
              }
              catch (Exception paramAnonymousString)
              {
                Log.e("BunVast", "Error occured while download video", paramAnonymousString);
                return;
              }
              Intent localIntent = new Intent(q.a(q.this), VActivity.class);
              localIntent.setAction("play_video");
              localIntent.setFlags(268435456);
              localIntent.addFlags(8388608);
              localIntent.addFlags(536870912);
              localIntent.setData(Uri.parse(paramAnonymousString));
              q.a(q.this).startActivity(localIntent);
              d.d(q.a(q.this));
              return;
            }
            label176:
            Log.e("BunVast", "Not able to download video");
          }
        };
        if (Util.s(this.b))
        {
          paramString1.a();
          return;
        }
      }
      catch (Exception paramString1)
      {
        paramString1.printStackTrace();
      }
      return;
      label104:
      boolean bool = false;
    }
  }
  
  public void a()
  {
    try
    {
      ArrayList localArrayList = new ArrayList();
      new Thread(new l(this.b, this, localArrayList, "aHR0cHM6Ly9hcGkuYWlycHVzaC5jb20vVmFzdC92YXN0YWRjYWxsLnBocA==", 0L, true), "vast").start();
      return;
    }
    catch (NullPointerException localNullPointerException)
    {
      Log.e("BunVast", "Video ad", localNullPointerException);
      return;
    }
    catch (Exception localException)
    {
      Log.e("BunVast", "Error occurred while fetching Video ad", localException);
    }
  }
  
  public void a(String paramString)
  {
    Log.i("BunVast", "Video Ad: " + paramString);
    if ((paramString == null) || (paramString.equals("")))
    {
      Log.w("BunVast", "Video ad response is null");
      return;
    }
    b(paramString);
  }
  
  void a(String paramString1, String paramString2)
  {
    try
    {
      a = new XmlParser(new StringReader(paramString1));
      Log.i("BunVast", "Showing ad from caching; " + paramString2);
      paramString1 = new Intent(this.b, VActivity.class);
      paramString1.setAction("play_video");
      paramString1.setFlags(268435456);
      paramString1.addFlags(8388608);
      paramString1.addFlags(536870912);
      paramString1.setData(Uri.parse(paramString2));
      this.b.startActivity(paramString1);
      d.d(this.b);
      return;
    }
    catch (Throwable paramString1)
    {
      Log.e("BunVast", "Error occurred while showing video from cache", paramString1);
    }
  }
  
  void b(String paramString)
  {
    try
    {
      d.d(this.b);
      a = new XmlParser(new StringReader(paramString));
      Object localObject = (HashMap)((XmlParser.Creative)a.m().get(0)).getMediaFiles().get(0);
      str = ((HashMap)localObject).get("MediaFile").toString();
      localObject = ((HashMap)localObject).get("delivery").toString();
      if ((str != null) && (!str.equals("")))
      {
        if ((localObject != null) && (((String)localObject).equals("progressive")))
        {
          b(paramString, str);
          return;
        }
        if (MA.enableCaching)
        {
          new b(this.b).a(AdListener.AdType.video, paramString, str);
          MA.sendAdCached(AdListener.AdType.video);
          return;
        }
      }
    }
    catch (XmlParser.VastException paramString)
    {
      String str;
      Log.e("BunVast", paramString.getMessage());
      MA.validateStatusCode(paramString.getCode(), paramString.getMessage());
      return;
      Log.e("BunVast", "deleviery type streaming " + str);
      paramString = new Intent(this.b, VActivity.class);
      paramString.setAction("play_video");
      paramString.setFlags(268435456);
      paramString.addFlags(8388608);
      paramString.addFlags(536870912);
      paramString.setData(Uri.parse(str));
      this.b.startActivity(paramString);
      d.d(this.b);
      return;
      Log.e("BunVast", "Ad url is invalid: " + str);
      return;
    }
    catch (XmlPullParserException paramString)
    {
      paramString.printStackTrace();
      return;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
      return;
    }
    catch (Throwable paramString)
    {
      paramString.printStackTrace();
      return;
    }
    catch (XmlParser.InvalidVastXML paramString) {}
  }
}
