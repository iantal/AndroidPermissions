package com.ironsource.mobilcore;

import android.content.Context;
import android.text.TextUtils;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

final class w
{
  private static w a;
  private String b;
  private String c;
  private HashMap<String, JSONObject> d = new HashMap();
  
  private w()
  {
    File localFile = new File(MobileCore.c().getFilesDir().getPath(), "cached_feeds");
    if (!localFile.exists()) {
      localFile.mkdirs();
    }
    this.b = localFile.getAbsolutePath();
    localFile = new File(MobileCore.c().getFilesDir().getPath(), "cached_media");
    if (!localFile.exists()) {
      localFile.mkdirs();
    }
    this.c = localFile.getAbsolutePath();
  }
  
  public static w a()
  {
    if (a == null) {
      a = new w();
    }
    return a;
  }
  
  private static JSONArray a(JSONObject paramJSONObject)
    throws JSONException
  {
    JSONArray localJSONArray = new JSONArray();
    paramJSONObject = paramJSONObject.optJSONArray("ads");
    int i = 0;
    while (i < paramJSONObject.length())
    {
      Object localObject1 = paramJSONObject.optJSONObject(i);
      Object localObject2 = ((JSONObject)localObject1).optString("img");
      if (!TextUtils.isEmpty((CharSequence)localObject2)) {
        localJSONArray.put(aO.a((String)localObject2));
      }
      localObject1 = ((JSONObject)localObject1).optJSONArray("extra");
      if (localObject1 != null)
      {
        int j = 0;
        for (;;)
        {
          if (j < ((JSONArray)localObject1).length())
          {
            localObject2 = ((JSONArray)localObject1).optJSONObject(j);
            try
            {
              String str = ((JSONObject)localObject2).getString("value");
              if ("img".equalsIgnoreCase(((JSONObject)localObject2).getString("type"))) {
                localJSONArray.put(aO.a(str));
              }
              j += 1;
            }
            catch (JSONException localJSONException)
            {
              for (;;)
              {
                localJSONException.printStackTrace();
              }
            }
          }
        }
      }
      i += 1;
    }
    return localJSONArray;
  }
  
  private static boolean a(JSONObject paramJSONObject, long paramLong, String paramString)
  {
    boolean bool = false;
    try
    {
      long l1 = paramJSONObject.getJSONObject("expirations").getLong(paramString);
      long l2 = System.currentTimeMillis();
      if (l2 - paramLong > l1) {
        bool = true;
      }
      return bool;
    }
    catch (JSONException paramJSONObject) {}
    return false;
  }
  
  private JSONObject d(String paramString)
  {
    A.a(getClass().getName() + "| loadFeedFromCache | " + paramString, 55);
    paramString = String.format("cache_%s.json", new Object[] { paramString });
    try
    {
      paramString = new File(this.b, paramString);
      Object localObject = new FileInputStream(paramString);
      String str = aE.a((InputStream)localObject);
      ((FileInputStream)localObject).close();
      localObject = new JSONObject(str);
      if (a((JSONObject)localObject, paramString.lastModified(), "hard_expiration"))
      {
        A.a(getClass().getName() + "| loadFeedFromCache | feed is expired", 55);
        return null;
      }
      return localObject;
    }
    catch (JSONException paramString)
    {
      aE.a(MobileCore.c(), getClass().getName(), paramString);
      return null;
    }
    catch (Exception paramString) {}
    return null;
  }
  
  public final void a(String paramString)
  {
    JSONObject localJSONObject = d(paramString);
    this.d.put(paramString, localJSONObject);
  }
  
  public final void a(String paramString1, String paramString2)
  {
    A.a(getClass().getName() + "| cacheFeed | " + paramString1, 55);
    String str = String.format("cache_%s.json", new Object[] { paramString1 });
    try
    {
      aE.a(aE.i(paramString2), this.b, str);
      this.d.put(paramString1, new JSONObject(paramString2));
      return;
    }
    catch (IOException paramString1)
    {
      aE.a(MobileCore.c(), getClass().getName(), paramString1);
      return;
    }
    catch (JSONException paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public final void a(JSONObject paramJSONObject, aE.d paramD)
  {
    for (;;)
    {
      int i;
      try
      {
        paramD = new aO.a(paramD);
        paramJSONObject = a(paramJSONObject);
        String str1 = this.c;
        i = 0;
        if (i < paramJSONObject.length())
        {
          JSONObject localJSONObject = paramJSONObject.getJSONObject(i);
          String str2 = localJSONObject.getString("filename");
          if (!new File(str1 + "/" + str2).exists()) {
            paramD.a(localJSONObject);
          }
        }
        else
        {
          paramD.b(str1);
          return;
        }
      }
      catch (JSONException paramJSONObject)
      {
        paramJSONObject.printStackTrace();
        return;
      }
      i += 1;
    }
  }
  
  public final String b()
  {
    return this.c;
  }
  
  public final JSONObject b(String paramString)
  {
    return (JSONObject)this.d.get(paramString);
  }
  
  public final boolean c(String paramString)
  {
    A.a(getClass().getName() + "| loadFeedFromCache | " + paramString, 55);
    JSONObject localJSONObject = (JSONObject)this.d.get(paramString);
    if (localJSONObject != null)
    {
      paramString = String.format("cache_%s.json", new Object[] { paramString });
      return !a(localJSONObject, new File(this.b, paramString).lastModified(), "soft_expiration");
    }
    return false;
  }
  
  public static abstract interface a
  {
    public abstract void a(JSONObject paramJSONObject);
  }
}
