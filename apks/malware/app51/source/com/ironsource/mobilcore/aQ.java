package com.ironsource.mobilcore;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.os.AsyncTask;
import android.os.Handler;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.LayoutInflater;
import android.view.OrientationEventListener;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewParent;
import android.view.Window;
import android.view.WindowManager;
import android.view.WindowManager.LayoutParams;
import android.view.inputmethod.InputMethodManager;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

class aQ
  extends l
  implements MCISliderAPI
{
  private static aQ x;
  private ArrayList<w.a> A;
  private long B;
  private long C;
  private Activity e;
  private String f;
  private boolean g;
  private aH h;
  private HashMap<String, G> i;
  private Z j;
  private boolean k;
  private String l;
  private ArrayList<a> m;
  private OrientationEventListener n;
  private int o = -1;
  private int[] p = { 5000, 22000, 42000 };
  private int q;
  private Runnable r;
  private ai s;
  private V t;
  private R u;
  private ImageView v;
  private ProgressBar w;
  private boolean y = false;
  private int z;
  
  private aQ() {}
  
  private G a(ViewGroup paramViewGroup, String paramString)
  {
    if ((!TextUtils.isEmpty(paramString)) && (this.i.containsKey(paramString)))
    {
      paramString = (G)this.i.get(paramString);
      paramString.a(this.e);
      if (paramString != null)
      {
        View localView = paramString.i();
        ViewParent localViewParent = localView.getParent();
        if ((localViewParent != null) && ((localViewParent instanceof ViewGroup))) {
          ((ViewGroup)localViewParent).removeView(localView);
        }
        paramViewGroup.addView(localView);
        return paramString;
      }
    }
    return null;
  }
  
  private String a(int paramInt)
  {
    Object localObject4 = this.d + "/sliderConfig.json";
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      localObject4 = new FileInputStream((String)localObject4);
      localObject1 = localObject2;
      localObject2 = aE.a((InputStream)localObject4);
      localObject1 = localObject2;
      ((FileInputStream)localObject4).close();
      localObject1 = localObject2;
    }
    catch (IOException localIOException)
    {
      try
      {
        localObject2 = aE.a(MobileCore.c().getResources().openRawResource(paramInt));
        localObject4 = localObject2;
        if (!TextUtils.isEmpty((CharSequence)localObject2)) {
          break label125;
        }
        localObject1 = localObject2;
        try
        {
          InputStream localInputStream = MobileCore.class.getResourceAsStream("fallback/slider_fallback.json");
          localObject1 = localObject2;
          localObject4 = aE.a(localInputStream);
          localObject1 = localObject4;
          localInputStream.close();
          label125:
          return localObject4;
        }
        catch (Exception localException2)
        {
          Object localObject3;
          aE.a(MobileCore.c(), aQ.class.getName(), localException2);
        }
        localIOException = localIOException;
        A.a("Couldn't find sliderConfig.json. using fallback (should be the case on the first app run)", 55);
      }
      catch (Exception localException1)
      {
        for (;;)
        {
          aE.a(MobileCore.c(), aQ.class.getName(), localException1);
          localObject3 = localObject1;
        }
      }
    }
    localObject4 = localObject1;
    if (TextUtils.isEmpty(localObject1))
    {
      localObject2 = localObject1;
      if (-1 == paramInt) {}
    }
    return localObject1;
  }
  
  private void a(LinearLayout paramLinearLayout)
  {
    if (paramLinearLayout == null) {}
    for (;;)
    {
      return;
      paramLinearLayout.removeAllViews();
      Object localObject1;
      if (!this.g)
      {
        this.w = new ProgressBar(MobileCore.c());
        localObject1 = new LinearLayout.LayoutParams(-2, -2);
        ((LinearLayout.LayoutParams)localObject1).topMargin = 20;
        ((LinearLayout.LayoutParams)localObject1).gravity = 1;
        this.w.setLayoutParams((ViewGroup.LayoutParams)localObject1);
        paramLinearLayout.addView(this.w);
        I.a(MobileCore.c(), "slider", "slider_features", "progress_added", new I.a[0]);
        return;
      }
      if (this.j != null)
      {
        B.a(this.t, this.j.d().m());
        int i1;
        label178:
        Object localObject3;
        Object localObject2;
        int i3;
        if (this.v != null)
        {
          if (this.j.a())
          {
            this.v.setVisibility(0);
            this.v.setImageDrawable(this.j.d().k());
          }
        }
        else
        {
          JSONArray localJSONArray = this.j.c();
          if (localJSONArray == null) {
            continue;
          }
          localObject1 = null;
          i1 = 0;
          if (i1 >= localJSONArray.length()) {
            break label415;
          }
          localObject3 = localJSONArray.optJSONArray(i1);
          localObject2 = localObject1;
          if (localObject3 != null)
          {
            i3 = ((JSONArray)localObject3).length();
            if (i3 != 1) {
              break label302;
            }
            localObject3 = a(paramLinearLayout, ((JSONArray)localObject3).optString(0));
            if (localObject3 == null) {
              break label295;
            }
            ((G)localObject3).a(i1);
            localObject2 = localObject3;
            if (!(localObject3 instanceof X)) {
              break label299;
            }
            if (localObject1 == null) {
              break label295;
            }
            ((G)localObject1).a((X)localObject3);
            localObject2 = localObject1;
          }
        }
        for (;;)
        {
          i1 += 1;
          localObject1 = localObject2;
          break label178;
          this.v.setVisibility(8);
          break;
          label295:
          localObject2 = localObject1;
          label299:
          continue;
          label302:
          localObject2 = new LinearLayout(MobileCore.c());
          ((LinearLayout)localObject2).setOrientation(0);
          int i2 = 0;
          while (i2 < i3)
          {
            Object localObject4 = a((ViewGroup)localObject2, ((JSONArray)localObject3).optString(i2));
            if (localObject4 != null)
            {
              ((G)localObject4).a(i1);
              localObject4 = ((G)localObject4).i();
              LinearLayout.LayoutParams localLayoutParams = (LinearLayout.LayoutParams)((View)localObject4).getLayoutParams();
              localLayoutParams.width = -1;
              localLayoutParams.height = -1;
              localLayoutParams.weight = 1.0F;
              ((View)localObject4).setLayoutParams(localLayoutParams);
            }
            i2 += 1;
          }
          paramLinearLayout.addView((View)localObject2);
          localObject2 = localObject1;
        }
        label415:
        if (!MobileCore.a(MobileCore.AD_UNITS.OFFERWALL))
        {
          paramLinearLayout = this.i.values().iterator();
          while (paramLinearLayout.hasNext())
          {
            localObject1 = (G)paramLinearLayout.next();
            if (((G)localObject1).a() == "ironsourceOfferWallOpener") {
              ((G)localObject1).a(false);
            }
          }
        }
      }
    }
  }
  
  private void a(String paramString, int paramInt, boolean paramBoolean)
  {
    if (paramBoolean) {
      this.m.add(new d(paramString, paramInt));
    }
    if ((this.g) && (this.i.containsKey(paramString)))
    {
      paramString = (G)this.i.get(paramString);
      if ((paramString != null) && ((paramString instanceof H))) {
        ((H)paramString).b(paramInt);
      }
      I.a(MobileCore.c(), "slider", "widget", "dynamic_widget_change", new I.a[] { new I.a("change_type", "icon"), new I.a("widget_type", paramString.a()) });
    }
  }
  
  private void a(String paramString1, MCEWidgetTextProperties paramMCEWidgetTextProperties, String paramString2, boolean paramBoolean)
  {
    if (paramBoolean) {
      this.m.add(new e(paramString1, paramMCEWidgetTextProperties, paramString2));
    }
    G localG;
    if ((this.g) && (this.i.containsKey(paramString1)))
    {
      localG = (G)this.i.get(paramString1);
      if ((localG != null) && ((localG instanceof H)))
      {
        ((H)localG).a(paramMCEWidgetTextProperties, paramString2);
        paramString1 = null;
        switch (9.a[paramMCEWidgetTextProperties.ordinal()])
        {
        }
      }
    }
    for (;;)
    {
      if (!TextUtils.isEmpty(paramString1)) {
        I.a(MobileCore.c(), "slider", "widget", "dynamic_widget_change", new I.a[] { new I.a("change_type", paramString1), new I.a("widget_type", localG.a()) });
      }
      return;
      paramString1 = "text";
      continue;
      paramString1 = "secondary_text";
      continue;
      paramString1 = "badge_text";
    }
  }
  
  private void b(String paramString)
  {
    for (;;)
    {
      int i1;
      try
      {
        paramString = new JSONObject(paramString).getJSONObject("slider");
        Object localObject = this.i.keySet().iterator();
        String str;
        if (((Iterator)localObject).hasNext())
        {
          str = (String)((Iterator)localObject).next();
          this.i.get(str);
          continue;
        }
        a(this.u);
      }
      catch (JSONException paramString)
      {
        aE.a(MobileCore.c(), aQ.class.getName(), paramString);
        A.a("Error parsing slider configuration", 3);
        return;
        this.i.clear();
        this.j = new Z(MobileCore.c(), paramString);
        paramString = paramString.getJSONArray("widgets");
        i1 = 0;
        if (i1 < paramString.length())
        {
          localObject = paramString.getJSONObject(i1);
          localObject = this.h.a((JSONObject)localObject, this.j.d());
          if (localObject == null) {
            break label303;
          }
          str = ((G)localObject).h();
          if ((str == "") || (this.i.containsKey(str))) {
            break label303;
          }
          this.i.put(str, localObject);
          break label303;
        }
        this.g = true;
        paramString = this.m.iterator();
        if (paramString.hasNext())
        {
          ((a)paramString.next()).a();
          continue;
        }
      }
      finally {}
      if (this.s != null) {
        this.s.removeCallbacks(this.r);
      }
      this.q = -1;
      this.r = null;
      if ((this.j.b()) && (!aE.d().getBoolean("sliderOpenedByUser", false)))
      {
        q();
        continue;
        label303:
        i1 += 1;
      }
    }
  }
  
  public static aQ h()
  {
    try
    {
      if (x == null) {
        x = new aQ();
      }
      aQ localAQ = x;
      return localAQ;
    }
    finally {}
  }
  
  public static JSONObject k()
  {
    return w.a().b("slider-feed");
  }
  
  private boolean n()
  {
    return !TextUtils.isEmpty(this.f);
  }
  
  private void o()
  {
    double d2 = 0.5D;
    int i1;
    if (this.e != null)
    {
      Display localDisplay = this.e.getWindowManager().getDefaultDisplay();
      DisplayMetrics localDisplayMetrics = new DisplayMetrics();
      localDisplay.getMetrics(localDisplayMetrics);
      i1 = localDisplayMetrics.widthPixels;
      d1 = d2;
      switch (MobileCore.c().getResources().getConfiguration().orientation)
      {
      }
    }
    for (double d1 = d2;; d1 = 0.8D)
    {
      this.z = ((int)(d1 * i1));
      this.s.c(this.z);
      return;
    }
  }
  
  private void p()
  {
    if (this.v == null) {
      return;
    }
    this.v.postDelayed(new Runnable()
    {
      public final void run()
      {
        Object localObject1 = aQ.m(aQ.this).getParent();
        if (!(localObject1 instanceof View)) {
          return;
        }
        localObject1 = (View)localObject1;
        Object localObject2 = aQ.j(aQ.this).getWindowManager().getDefaultDisplay();
        DisplayMetrics localDisplayMetrics = new DisplayMetrics();
        ((Display)localObject2).getMetrics(localDisplayMetrics);
        aQ.m(aQ.this).measure(0, 0);
        int i = localDisplayMetrics.heightPixels;
        localObject2 = new RelativeLayout.LayoutParams(-2, -2);
        ((RelativeLayout.LayoutParams)localObject2).addRule(9);
        int j = aQ.m(aQ.this).getHeight();
        j = ((View)localObject1).getHeight() / 2 - j / 2;
        ((RelativeLayout.LayoutParams)localObject2).topMargin = j;
        if ((j <= 0) || (j > i)) {
          ((RelativeLayout.LayoutParams)localObject2).addRule(15);
        }
        aQ.m(aQ.this).setLayoutParams((ViewGroup.LayoutParams)localObject2);
      }
    }, 100L);
  }
  
  private void q()
  {
    this.q += 1;
    A.a("SliderMenuManager , addFTUERunnable() | mFTUEIntervalArrIndex:" + this.q, 55);
    if (this.q < this.p.length)
    {
      this.r = new Runnable()
      {
        public final void run()
        {
          if (!aE.n(MobileCore.c()).getBoolean("sliderOpenedByUser", false)) {}
          for (int i = 1;; i = 0)
          {
            if (i != 0)
            {
              if (!o.a)
              {
                aQ.n(aQ.this).d();
                I.a(MobileCore.c(), "slider", "slider_features", "ftue_shown", new I.a[0]);
              }
              aQ.o(aQ.this);
            }
            return;
          }
        }
      };
      int i1 = this.p[this.q];
      this.s.postDelayed(this.r, i1);
    }
  }
  
  private static void r()
  {
    aE.d().edit().putBoolean("sliderOpenedByUser", true).commit();
  }
  
  public final void a(w.a paramA)
  {
    try
    {
      a("registerOnUpdateListener");
      if (!this.A.contains(paramA)) {
        this.A.add(paramA);
      }
      return;
    }
    finally
    {
      paramA = finally;
      throw paramA;
    }
  }
  
  protected final boolean a()
  {
    return !this.y;
  }
  
  protected final l.a b()
  {
    return new l.a("slider", "SLIDER_assets", "slider-feed", b.a, new c());
  }
  
  public void closeSliderMenu(boolean paramBoolean)
  {
    if (this.s != null) {
      this.s.b(paramBoolean);
    }
  }
  
  protected final void d()
  {
    super.d();
    this.y = true;
    a("Slider", "initMembers");
    this.g = false;
    this.h = new aH(this.a);
    this.i = new HashMap();
    this.m = new ArrayList();
    this.k = false;
    this.B = 0L;
    this.C = 0L;
    l();
    this.A = new ArrayList();
  }
  
  public final void g()
  {
    if (System.currentTimeMillis() - this.B >= this.C)
    {
      this.B = System.currentTimeMillis();
      super.g();
    }
  }
  
  public String getWidgetTextProperty(String paramString, MCEWidgetTextProperties paramMCEWidgetTextProperties)
  {
    paramString = (G)this.i.get(paramString);
    if ((paramString != null) && ((paramString instanceof H)))
    {
      paramMCEWidgetTextProperties = ((H)paramString).a(paramMCEWidgetTextProperties);
      paramString = paramMCEWidgetTextProperties;
      if (paramMCEWidgetTextProperties == null) {
        paramString = "";
      }
      return paramString;
    }
    return "";
  }
  
  public void hideWidget(String paramString)
  {
    if (this.i.containsKey(paramString))
    {
      paramString = (G)this.i.get(paramString);
      if (paramString != null) {
        paramString.a(false);
      }
    }
  }
  
  public final String i()
  {
    return this.b;
  }
  
  public boolean isSliderMenuOpen()
  {
    if (this.s != null) {
      return this.s.c();
    }
    return false;
  }
  
  public final String j()
  {
    return this.c;
  }
  
  @SuppressLint({"NewApi"})
  public final void l()
  {
    aE.a(new x(new x.a()
    {
      public final void a(String paramAnonymousString)
      {
        if (aQ.k(aQ.this) != null) {}
        for (int i = 1;; i = 0)
        {
          aQ.a(aQ.this, paramAnonymousString);
          if (i != 0) {
            aQ.b(aQ.this, paramAnonymousString);
          }
          return;
        }
      }
    }, this.d, "sliderConfig.json"));
  }
  
  public final int m()
  {
    return this.z;
  }
  
  public void openSliderMenu(boolean paramBoolean)
  {
    if (this.s != null)
    {
      this.s.a(paramBoolean);
      r();
    }
  }
  
  public void setContentViewWithSlider(Activity paramActivity, int paramInt)
  {
    setContentViewWithSlider(paramActivity, paramInt, -1);
  }
  
  public void setContentViewWithSlider(Activity paramActivity, final int paramInt1, int paramInt2)
  {
    this.e = paramActivity;
    this.t = new V(this.e);
    this.t.setVerticalScrollBarEnabled(false);
    this.t.setLayoutParams(new ViewGroup.LayoutParams(-1, -1));
    this.u = new R(this.e, new R.a()
    {
      public final boolean a()
      {
        if (aQ.this.isSliderMenuOpen())
        {
          aQ.this.closeSliderMenu(true);
          return true;
        }
        return false;
      }
    });
    Object localObject = new LinearLayout.LayoutParams(-1, -1);
    this.u.setLayoutParams((ViewGroup.LayoutParams)localObject);
    this.u.setOrientation(1);
    this.u.setFocusableInTouchMode(true);
    this.t.addView(this.u);
    this.s = ai.a(this.e, 1);
    localObject = paramActivity.getLayoutInflater().inflate(paramInt1, null);
    ((View)localObject).setLayoutParams(new RelativeLayout.LayoutParams(-1, -1));
    if (((View)localObject).getBackground() == null)
    {
      b("getMainActivityView", "No background set. setting default default");
      ((View)localObject).setBackgroundColor(-1);
    }
    this.v = new ImageView(paramActivity);
    paramActivity = new RelativeLayout(paramActivity);
    paramActivity.addView((View)localObject);
    paramActivity.addView(this.v);
    this.v.setOnClickListener(new View.OnClickListener()
    {
      public final void onClick(View paramAnonymousView)
      {
        aQ.this.toggleSliderMenu(true);
      }
    });
    this.s.b(paramActivity);
    this.s.a(this.t);
    o();
    p();
    if (this.n == null) {
      this.n = new OrientationEventListener(MobileCore.c(), 3)
      {
        public final void onOrientationChanged(int paramAnonymousInt)
        {
          paramAnonymousInt = MobileCore.c().getResources().getConfiguration().orientation;
          if (paramAnonymousInt == aQ.a(aQ.this)) {}
          while (!aE.i(MobileCore.c())) {
            return;
          }
          aQ.a(aQ.this, paramAnonymousInt);
          aQ.b(aQ.this);
          aQ.c(aQ.this);
        }
      };
    }
    this.n.enable();
    paramInt1 = this.e.getWindow().getAttributes().softInputMode;
    this.s.a(new ai.a()
    {
      public final void a(int paramAnonymousInt)
      {
        if ((paramAnonymousInt == 4) || (paramAnonymousInt == 2))
        {
          aQ.a(aQ.this, G.a.c);
          aQ.d(aQ.this);
        }
        label374:
        for (;;)
        {
          return;
          if ((paramAnonymousInt == 0) || (paramAnonymousInt == 8))
          {
            ((InputMethodManager)MobileCore.c().getSystemService("input_method")).hideSoftInputFromWindow(aQ.e(aQ.this).getWindowToken(), 0);
            Object localObject;
            if ((!aQ.f(aQ.this)) && (!TextUtils.isEmpty(aQ.g(aQ.this))) && (aQ.h(aQ.this).containsKey(aQ.g(aQ.this))))
            {
              localObject = (G)aQ.h(aQ.this).get(aQ.g(aQ.this));
              if ((localObject != null) && ((localObject instanceof H)))
              {
                ((H)localObject).n();
                aQ.a(aQ.this, true);
              }
            }
            if (paramAnonymousInt == 8)
            {
              A.a("onDrawerStateChange | Clearing download in progress flags when slider opens", 55);
              aQ.a(aQ.this, G.a.a);
              if (aQ.i(aQ.this))
              {
                Context localContext = MobileCore.c();
                localObject = MobileCore.c();
                if (localObject == null)
                {
                  localObject = null;
                  I.a(localContext, "slider", "slider_features", "opened", new I.a[] { localObject });
                }
              }
              else
              {
                paramAnonymousInt = 32;
              }
            }
            for (;;)
            {
              if ((aQ.j(aQ.this) == null) || (paramAnonymousInt == -1)) {
                break label374;
              }
              aQ.j(aQ.this).getWindow().setSoftInputMode(paramAnonymousInt);
              return;
              switch (((Context)localObject).getResources().getConfiguration().orientation)
              {
              default: 
                localObject = "orientation_undefined";
              }
              for (;;)
              {
                localObject = new I.a("orientation", (String)localObject);
                break;
                localObject = "orientation_portrait";
                continue;
                localObject = "orientation_landscape";
                continue;
                localObject = "orientation_square";
              }
              if (paramAnonymousInt == 0)
              {
                aQ.a(aQ.this, G.a.b);
                if (aQ.i(aQ.this)) {
                  I.a(MobileCore.c(), "slider", "slider_features", "closed", new I.a[0]);
                }
                paramAnonymousInt = paramInt1;
              }
              else
              {
                paramAnonymousInt = -1;
              }
            }
          }
        }
      }
    });
    if (n())
    {
      b(this.f);
      return;
    }
    aE.a(new AsyncTask() {}, new Integer[] { Integer.valueOf(paramInt2) });
  }
  
  public void setEmphasizedWidget(String paramString)
  {
    this.l = paramString;
  }
  
  public void setWidgetIconResource(String paramString, int paramInt)
  {
    a(paramString, paramInt, true);
  }
  
  public void setWidgetTextProperty(String paramString1, MCEWidgetTextProperties paramMCEWidgetTextProperties, String paramString2)
  {
    a(paramString1, paramMCEWidgetTextProperties, paramString2, true);
  }
  
  public void showWidget(String paramString)
  {
    if (this.i.containsKey(paramString))
    {
      paramString = (G)this.i.get(paramString);
      if (paramString != null) {
        paramString.a(true);
      }
    }
  }
  
  public void toggleSliderMenu(boolean paramBoolean)
  {
    if (this.s != null)
    {
      this.s.c(paramBoolean);
      r();
    }
  }
  
  private abstract class a
  {
    protected String a;
    
    public a(String paramString)
    {
      this.a = paramString;
    }
    
    public abstract void a();
  }
  
  protected static enum b
    implements l.c
  {
    private String b;
    
    private b(String paramString)
    {
      this.b = paramString;
    }
    
    public final String a()
    {
      return this.b;
    }
  }
  
  private final class c
    implements aF.a
  {
    public c() {}
    
    public final String getInstalledAppPackages()
    {
      return aE.b();
    }
    
    public final String getMobileParams()
    {
      aQ.this.a("JSFlowBridge , getMobileParams");
      return aE.k(MobileCore.c());
    }
    
    public final double getScreenSize()
    {
      return aE.e(MobileCore.c());
    }
    
    public final void init(String paramString1, String paramString2)
    {
      aQ.this.a("JSFlowBridge , init", "flow:" + paramString1 + " , flowName:" + paramString2);
      aQ.this.c = paramString2;
      aQ.this.b = paramString1;
    }
    
    public final void processFeed(String paramString)
    {
      aQ.this.a("JSFlowBridge , processFeed");
      w.a().a("slider-feed", paramString);
      try
      {
        paramString = new JSONObject(paramString);
        w.a().a(paramString, new aQ.f(aQ.this, paramString));
        return;
      }
      catch (JSONException paramString)
      {
        aE.a(MobileCore.c(), aQ.class.getName(), paramString);
      }
    }
    
    public final void reportFeedRequestError() {}
    
    public final void setMinTimeBetweenRefresh(int paramInt)
    {
      aQ.a(aQ.this, paramInt);
    }
  }
  
  private final class d
    extends aQ.a
  {
    protected int c;
    
    public d(String paramString, int paramInt)
    {
      super(paramString);
      this.c = paramInt;
    }
    
    public final void a()
    {
      aQ.a(aQ.this, this.a, this.c, false);
    }
  }
  
  private final class e
    extends aQ.a
  {
    private MCEWidgetTextProperties d;
    private String e;
    
    public e(String paramString1, MCEWidgetTextProperties paramMCEWidgetTextProperties, String paramString2)
    {
      super(paramString1);
      this.d = paramMCEWidgetTextProperties;
      this.e = paramString2;
    }
    
    public final void a()
    {
      aQ.a(aQ.this, this.a, this.d, this.e, false);
    }
  }
  
  final class f
    extends aE.e
  {
    private JSONObject b;
    
    public f(JSONObject paramJSONObject)
    {
      this.b = paramJSONObject;
    }
    
    public final void a(boolean paramBoolean)
    {
      if (paramBoolean) {
        MobileCore.b().post(new Runnable()
        {
          public final void run()
          {
            Iterator localIterator = aQ.p(aQ.this).iterator();
            while (localIterator.hasNext()) {
              ((w.a)localIterator.next()).a(aQ.f.a(aQ.f.this));
            }
          }
        });
      }
    }
  }
}
