package com.ironsource.mobilcore;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences.Editor;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Build.VERSION;
import android.widget.Toast;
import java.math.BigInteger;
import java.util.List;
import java.util.Locale;

final class z
{
  private static z a = null;
  private static final String[] b = { "android.permission.ACCESS_NETWORK_STATE" };
  private static final String[] c = { "android.permission.ACCESS_WIFI_STATE", "android.permission.READ_PHONE_STATE", "android.permission.WRITE_EXTERNAL_STORAGE" };
  private boolean d;
  private Context e;
  private int f = -1;
  private int g = -1;
  
  z() {}
  
  protected static z a()
  {
    if (a == null) {
      a = new z();
    }
    return a;
  }
  
  private void a(String paramString, a paramA)
  {
    if (paramA == a.a)
    {
      A.a("Warning: " + paramString, 1);
      return;
    }
    A.a("Error: " + paramString, 2);
    try
    {
      paramString = Toast.makeText(this.e, paramString, 1);
      paramString.setGravity(17, 0, 0);
      paramString.show();
      return;
    }
    catch (Exception paramString) {}
  }
  
  private boolean e()
  {
    PackageManager localPackageManager = this.e.getPackageManager();
    try
    {
      boolean bool = localPackageManager.getReceiverInfo(new ComponentName(this.e, InstallationTracker.class), 2).enabled;
      if (bool) {
        return true;
      }
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      A.a("ImpVerifier crashed: " + localNameNotFoundException.getLocalizedMessage(), 55);
      a("mobileCore's receiver is not declared in your manifest, see mobileCore documentation for more details.", a.b);
    }
    return false;
  }
  
  protected final void a(int paramInt)
  {
    if (this.f == -1) {
      this.f = paramInt;
    }
    do
    {
      do
      {
        return;
      } while (this.g != -1);
      this.g = paramInt;
    } while (this.f != this.g - 1);
    a("It is generally advised not to call mobileCore's showOfferwall directly after calling init", a.a);
  }
  
  protected final void a(Context paramContext)
  {
    if ((Build.VERSION.SDK_INT <= 10) && (!aE.a(paramContext, "android.permission.INTERNET")))
    {
      A.a("Error: mobileCore has detected a critical, missing permission: android.permission.INTERNET. Please add it to your manifest for mobileCore to work correctly.", 2);
      paramContext = Thread.currentThread().getStackTrace();
      int j = paramContext.length;
      int i = 0;
      while (i < j)
      {
        A.a(paramContext[i].toString(), 2);
        i += 1;
      }
    }
  }
  
  protected final void a(Context paramContext, MobileCore.LOG_TYPE paramLOG_TYPE)
  {
    if (paramLOG_TYPE == MobileCore.LOG_TYPE.DEBUG) {}
    for (boolean bool = true;; bool = false)
    {
      this.d = bool;
      this.e = paramContext;
      return;
    }
  }
  
  protected final void a(StackTraceElement[] paramArrayOfStackTraceElement)
  {
    int i = 0;
    try
    {
      for (;;)
      {
        if (i < paramArrayOfStackTraceElement.length)
        {
          if (!paramArrayOfStackTraceElement[i].getMethodName().toLowerCase(Locale.US).contains("oncreate")) {
            break label68;
          }
          if ((paramArrayOfStackTraceElement[(i - 1)] != null) && (paramArrayOfStackTraceElement[(i - 1)].getMethodName().toLowerCase(Locale.US).contains("showofferwall"))) {
            a("Calling mobileCore's showOfferwall command in the onCreate event is not optimal, more time will allow better offers to load.", a.a);
          }
        }
        return;
        label68:
        i += 1;
      }
      return;
    }
    catch (Exception paramArrayOfStackTraceElement) {}
  }
  
  protected final boolean a(String paramString, Context paramContext, SharedPreferences.Editor paramEditor)
  {
    String str = new BigInteger(paramString, 36).toString(16);
    if (str.length() > 32)
    {
      paramString = str.substring(32);
      A.a("Account name in init. " + paramString, 55);
      paramEditor.putString("s#ge1%dms#ga1%dns#g_1%dt1%dn1%du1%dos#gcs#gcs#gas#g_1%dss#gfs#ge1%dr1%dp", y.a(paramString));
      return true;
    }
    a("The developer hash used is invalid(" + paramString + ")", a.b);
    aE.a(paramContext, MobileCore.class.getName(), "Can't extract affiliateAccount from the token passed", paramString);
    return false;
  }
  
  protected final boolean b()
  {
    int k = 1;
    int j;
    int i;
    try
    {
      localPackageManager = this.e.getPackageManager();
      j = 0;
      i = 0;
      if (j >= b.length) {
        break label182;
      }
      str = b[j];
      if (localPackageManager.checkPermission(str, this.e.getPackageName()) == 0) {
        break label175;
      }
      a("mobileCore requires permission: " + str, a.b);
      i = 1;
    }
    catch (Exception localException)
    {
      PackageManager localPackageManager;
      String str;
      label76:
      A.a("ImpVerifier crashed: " + localException.getLocalizedMessage(), 55);
      return false;
    }
    if (j < c.length)
    {
      str = c[j];
      if (localPackageManager.checkPermission(str, this.e.getPackageName()) != 0) {
        a("mobileCore can potentially work better with: " + str, a.a);
      }
    }
    for (;;)
    {
      int m = e();
      return m & j;
      label175:
      j += 1;
      break;
      label182:
      j = 0;
      break label76;
      j += 1;
      break label76;
      j = k;
      if (i != 0) {
        j = 0;
      }
    }
  }
  
  protected final boolean c()
  {
    boolean bool2 = false;
    boolean bool1;
    if (this.e.getPackageManager().queryIntentServices(new Intent(this.e, MobileCoreReport.class), 65536).size() > 0)
    {
      bool1 = true;
      return bool1;
    }
    StackTraceElement[] arrayOfStackTraceElement = Thread.currentThread().getStackTrace();
    A.a("Error: mobileCore's service not detected. Please register according to updated documentation.", 2);
    int j = arrayOfStackTraceElement.length;
    int i = 0;
    for (;;)
    {
      bool1 = bool2;
      if (i >= j) {
        break;
      }
      A.a(arrayOfStackTraceElement[i].toString(), 2);
      i += 1;
    }
  }
  
  protected final boolean d()
  {
    return this.d;
  }
  
  private static enum a
  {
    private a() {}
  }
}
