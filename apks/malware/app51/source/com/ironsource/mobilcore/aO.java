package com.ironsource.mobilcore;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.SharedPreferences;
import android.os.AsyncTask;
import android.os.Build.VERSION;
import android.text.TextUtils;
import android.util.Pair;
import java.io.File;
import java.net.URI;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

class aO
{
  aO() {}
  
  public static String a()
  {
    File localFile = new File(MobileCore.c().getFilesDir().getPath(), "cached_images");
    if (!localFile.exists()) {
      localFile.mkdirs();
    }
    return localFile.getAbsolutePath();
  }
  
  public static String a(String paramString, aE.c paramC)
  {
    if (TextUtils.isEmpty(paramString)) {
      return null;
    }
    String str1 = aE.h(paramString);
    str1 = aE.b(paramString) + str1;
    A.a("ResourceManager | preloadMediaResource : going to Download file name: " + str1 + " from: " + paramString, 55);
    String str2 = a();
    try
    {
      paramC.a(a(paramString));
      a(paramString, new q.c(str2, str1, paramC));
      return "file://" + str2 + "/" + str1;
    }
    catch (JSONException paramC)
    {
      for (;;)
      {
        A.a("ResourceManager | preloadMediaResource : failed to preload resource: " + str1 + " from: " + paramString, 55);
        aE.a(MobileCore.c(), aO.class.getName(), paramC);
      }
    }
  }
  
  public static String a(String paramString1, String paramString2)
  {
    return paramString1 + "/" + b(paramString2);
  }
  
  public static JSONObject a(String paramString)
    throws JSONException
  {
    JSONObject localJSONObject = new JSONObject();
    String str = b(paramString);
    localJSONObject.put("id", str);
    localJSONObject.put("location", paramString);
    localJSONObject.put("filename", str);
    localJSONObject.put("type", "img");
    localJSONObject.put("mandatory", false);
    return localJSONObject;
  }
  
  public static JSONObject a(JSONObject paramJSONObject, String paramString)
  {
    try
    {
      paramJSONObject = paramJSONObject.getJSONArray("data");
      int i = 0;
      while (i < paramJSONObject.length())
      {
        JSONObject localJSONObject = paramJSONObject.getJSONObject(i);
        boolean bool = localJSONObject.optString("id").equals(paramString);
        if (bool) {
          return localJSONObject;
        }
        i += 1;
      }
      return null;
    }
    catch (JSONException paramJSONObject)
    {
      aE.a(MobileCore.c(), aO.class.getName(), paramJSONObject);
    }
  }
  
  @SuppressLint({"NewApi"})
  public static void a(String paramString, final aE.b paramB)
  {
    A.a(paramString, 55);
    paramString = new AsyncTask()
    {
      private Boolean a()
      {
        if (TextUtils.isEmpty(this.a))
        {
          A.a("ResourceManager | Trying to download empty URL!", 2);
          return Boolean.valueOf(false);
        }
        A.a("ResourceManager | Downloading: " + this.a, 55);
        try
        {
          Object localObject = aE.a();
          DefaultHttpClient localDefaultHttpClient = (DefaultHttpClient)localObject;
          BasicHttpParams localBasicHttpParams = new BasicHttpParams();
          HttpConnectionParams.setConnectionTimeout(localBasicHttpParams, 10000);
          HttpConnectionParams.setSoTimeout(localBasicHttpParams, 10000);
          localDefaultHttpClient.setParams(localBasicHttpParams);
          localObject = ((HttpClient)localObject).execute(aE.a(new URI(this.a.replace(" ", "%20"))));
          if (((HttpResponse)localObject).getStatusLine().getStatusCode() != 200)
          {
            aE.b(MobileCore.c(), aO.class.getName(), "ResourceManager | getAndProcessFile failed, " + this.a + "(" + ((HttpResponse)localObject).getStatusLine().getStatusCode() + ")");
            if (paramB != null) {
              paramB.a(((HttpResponse)localObject).getStatusLine().getStatusCode());
            }
            return Boolean.valueOf(false);
          }
          paramB.a((HttpResponse)localObject);
          A.a("ResourceManager | Downloaded: " + this.a, 55);
          return Boolean.valueOf(true);
        }
        catch (Exception localException)
        {
          aE.b(MobileCore.c(), aO.class.getName(), "ResourceManager | getAndProcessFile exception, " + this.a);
          aE.a(MobileCore.c(), aO.class.getName(), localException);
          if (paramB != null) {
            paramB.a(localException);
          }
        }
        return Boolean.valueOf(false);
      }
    };
    if (Build.VERSION.SDK_INT >= 11)
    {
      paramString.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new Void[0]);
      return;
    }
    paramString.execute(new Void[0]);
  }
  
  public static void a(JSONObject paramJSONObject, String paramString1, String paramString2, aE.d paramD)
  {
    for (;;)
    {
      int i;
      try
      {
        paramJSONObject = paramJSONObject.getJSONArray("data");
        paramD = new a(paramD);
        i = 0;
        if (i < paramJSONObject.length())
        {
          JSONObject localJSONObject = paramJSONObject.getJSONObject(i);
          String str1 = localJSONObject.optString("id");
          String str2 = localJSONObject.optString("version", null);
          String str3 = localJSONObject.optString("filename");
          if ((!aE.d().contains(str1)) || (!new File(paramString2, str3).exists()) || (!aE.d().getString(str1, "").equals(str2)) || (TextUtils.isEmpty(str2))) {
            paramD.a(localJSONObject);
          }
        }
        else
        {
          paramD.b(paramString1);
          return;
        }
      }
      catch (JSONException paramJSONObject)
      {
        aE.a(MobileCore.c(), aO.class.getName(), paramJSONObject);
        return;
      }
      i += 1;
    }
  }
  
  private static String b(String paramString)
  {
    String str = aE.h(paramString);
    return aE.b(paramString) + str;
  }
  
  public static final class a
    implements aE.c
  {
    private HashMap<String, Pair<String, JSONObject>> a = new HashMap();
    private HashMap<String, String> b = new HashMap();
    private String c = "pending";
    private aE.d d = null;
    
    public a(aE.d paramD)
    {
      this.d = paramD;
    }
    
    private void a()
    {
      for (;;)
      {
        try
        {
          boolean bool = this.c.equals("all-complete-called");
          if (bool) {
            return;
          }
          Iterator localIterator = this.a.entrySet().iterator();
          int i;
          if (localIterator.hasNext())
          {
            Object localObject2 = (String)((Pair)((Map.Entry)localIterator.next()).getValue()).first;
            if ((!"finished".equals(localObject2)) && (!"failed".equals(localObject2)) && (!"failed-ignored".equals(localObject2)))
            {
              i = 0;
              if (i != 0) {
                if (!this.c.equals("failed"))
                {
                  this.c = "finished";
                  try
                  {
                    localIterator = this.a.entrySet().iterator();
                    if (localIterator.hasNext())
                    {
                      localObject2 = (Pair)((Map.Entry)localIterator.next()).getValue();
                      if ((String)((Pair)localObject2).first != "finished") {
                        continue;
                      }
                      Object localObject3 = (JSONObject)((Pair)localObject2).second;
                      localObject2 = ((JSONObject)localObject3).getString("id");
                      localObject3 = ((JSONObject)localObject3).optString("version");
                      if (localObject3 == null) {
                        continue;
                      }
                      aO.b((String)localObject2, (String)localObject3);
                      continue;
                    }
                    b();
                  }
                  catch (JSONException localJSONException)
                  {
                    aE.a(MobileCore.c(), getClass().getName(), localJSONException);
                    this.c = "failed";
                  }
                }
              }
            }
          }
          else
          {
            i = 1;
          }
        }
        finally {}
      }
    }
    
    private void b()
    {
      try
      {
        if (!this.c.equals("all-complete-called"))
        {
          this.d.a("finished".equals(this.c));
          this.c = "all-complete-called";
        }
        return;
      }
      finally
      {
        localObject = finally;
        throw localObject;
      }
    }
    
    private boolean c(String paramString)
    {
      paramString = (String)this.b.get(paramString);
      return ((JSONObject)((Pair)this.a.get(paramString)).second).optBoolean("mandatory", true);
    }
    
    public final void a(String paramString)
    {
      paramString = (String)this.b.get(paramString);
      JSONObject localJSONObject = (JSONObject)((Pair)this.a.get(paramString)).second;
      this.a.put(paramString, new Pair("pending", localJSONObject));
    }
    
    @SuppressLint({"DefaultLocale"})
    public final void a(String paramString, int paramInt)
    {
      if (this.c.equals("all-complete-called")) {
        return;
      }
      String str = (String)this.b.get(paramString);
      boolean bool = c(paramString);
      JSONObject localJSONObject = (JSONObject)((Pair)this.a.get(str)).second;
      paramString = "failed";
      if ((!bool) && (paramInt >= 400) && (paramInt < 500)) {
        paramString = "failed-ignored";
      }
      for (;;)
      {
        this.a.put(str, new Pair(paramString, localJSONObject));
        paramString = this.d;
        a();
        return;
        this.c = "failed";
        b();
      }
    }
    
    public final void a(String paramString, Exception paramException)
    {
      if (this.c.equals("all-complete-called")) {
        return;
      }
      A.a("ResourceManager | processException " + paramString, 2);
      paramException = (String)this.b.get(paramString);
      JSONObject localJSONObject = (JSONObject)((Pair)this.a.get(paramException)).second;
      boolean bool = c(paramString);
      paramString = "failed";
      if (!bool) {
        paramString = "failed-ignored";
      }
      for (;;)
      {
        this.a.put(paramException, new Pair(paramString, localJSONObject));
        paramString = this.d;
        a();
        return;
        this.c = "failed";
        b();
      }
    }
    
    public final void a(String paramString, boolean paramBoolean)
    {
      if (this.c.equals("all-complete-called")) {
        return;
      }
      Object localObject = new StringBuilder("ResourceManager | processComplete ").append(paramString).append(" - ");
      String str;
      HashMap localHashMap;
      if (paramBoolean)
      {
        str = "OK";
        A.a(str, 55);
        str = (String)this.b.get(paramString);
        localObject = (JSONObject)((Pair)this.a.get(str)).second;
        localHashMap = this.a;
        if (!paramBoolean) {
          break label145;
        }
      }
      label145:
      for (paramString = "finished";; paramString = "failed")
      {
        localHashMap.put(str, new Pair(paramString, localObject));
        if (!paramBoolean)
        {
          this.c = "failed";
          b();
        }
        paramString = this.d;
        a();
        return;
        str = "NEY";
        break;
      }
    }
    
    public final void a(JSONObject paramJSONObject)
      throws JSONException
    {
      if (this.c.equals("all-complete-called")) {
        return;
      }
      String str1 = paramJSONObject.getString("id");
      String str2 = paramJSONObject.getString("filename");
      this.a.put(str1, new Pair("pending", paramJSONObject));
      this.b.put(str2, str1);
    }
    
    public final void a(JSONObject paramJSONObject, String paramString, boolean paramBoolean)
    {
      a(paramString, paramBoolean);
      if (paramBoolean) {
        paramJSONObject = this.d;
      }
    }
    
    public final void b(String paramString)
      throws JSONException
    {
      this.c = "started";
      Iterator localIterator = this.a.entrySet().iterator();
      if (!localIterator.hasNext())
      {
        this.c = "finished";
        b();
        return;
      }
      label41:
      Object localObject1;
      Object localObject2;
      String str;
      while (localIterator.hasNext())
      {
        localObject1 = (Pair)((Map.Entry)localIterator.next()).getValue();
        if ("pending".equals(((Pair)localObject1).first))
        {
          localObject2 = (JSONObject)((Pair)localObject1).second;
          str = ((JSONObject)localObject2).getString("location");
          localObject1 = ((JSONObject)localObject2).getString("filename");
          localObject2 = ((JSONObject)localObject2).getString("type");
          if (!"feed".equals(localObject2)) {
            break label225;
          }
          str = str + "?" + this.d.a();
        }
      }
      label225:
      for (;;)
      {
        if ("zip".equals(localObject2)) {
          localObject1 = new q.d(paramString, (String)localObject1, this);
        }
        for (;;)
        {
          aO.a(str, (aE.b)localObject1);
          break label41;
          break;
          if ("feed".equals(localObject2)) {
            localObject1 = new q.a(paramString, (String)localObject1, this);
          } else {
            localObject1 = new q.c(paramString, (String)localObject1, this);
          }
        }
      }
    }
  }
}
