package com.ironsource.mobilcore;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.GradientDrawable;
import android.graphics.drawable.GradientDrawable.Orientation;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.animation.Interpolator;

@SuppressLint({"NewApi"})
final class am
  extends af
{
  am(Activity paramActivity, int paramInt)
  {
    super(paramActivity, paramInt);
  }
  
  private void f(int paramInt)
  {
    float f;
    if ((this.n) && (this.A != 0))
    {
      k = this.A;
      f = (k + paramInt) / k;
      if (!p) {
        break label73;
      }
      if (paramInt != 0)
      {
        paramInt = (int)(k * f * 0.25F);
        this.y.setTranslationX(paramInt);
      }
    }
    else
    {
      return;
    }
    this.y.setTranslationX(-k);
    return;
    label73:
    int i = getWidth();
    int j = this.y.getRight();
    int k = (int)(k * f * 0.25F);
    this.y.offsetLeftAndRight(k + i - j);
    ac localAc = this.y;
    if (paramInt == 0) {}
    for (paramInt = 4;; paramInt = 0)
    {
      localAc.setVisibility(paramInt);
      return;
    }
  }
  
  protected final void a()
  {
    int i = -this.A / 3;
    this.k.a(0, 0, i, 0, 1000);
  }
  
  public final void a(int paramInt)
  {
    this.s = new GradientDrawable(GradientDrawable.Orientation.LEFT_RIGHT, new int[] { -16777216, 0 });
    invalidate();
  }
  
  protected final void a(Canvas paramCanvas, int paramInt)
  {
    int i = getHeight();
    paramInt = getWidth() + paramInt;
    int j = this.t;
    this.s.setBounds(paramInt, 0, j + paramInt, i);
    this.s.draw(paramCanvas);
  }
  
  public final void a(boolean paramBoolean)
  {
    a(-this.A, 0, paramBoolean);
  }
  
  protected final boolean a(float paramFloat)
  {
    int i = getWidth();
    int j = (int)this.f;
    return ((!this.C) && (j >= i - this.F) && (paramFloat < 0.0F)) || ((this.C) && (j <= i + this.d));
  }
  
  protected final boolean a(MotionEvent paramMotionEvent)
  {
    return paramMotionEvent.getX() < getWidth() + this.d;
  }
  
  protected final void b(float paramFloat)
  {
    c(Math.max(Math.min(this.d + paramFloat, 0.0F), -this.A));
  }
  
  protected final void b(int paramInt)
  {
    if (p)
    {
      this.z.setTranslationX(paramInt);
      f(paramInt);
      invalidate();
      return;
    }
    this.z.offsetLeftAndRight(paramInt - this.z.getLeft());
    f(paramInt);
    invalidate();
  }
  
  protected final void b(Canvas paramCanvas, int paramInt)
  {
    int i = getHeight();
    int j = getWidth();
    float f = Math.abs(paramInt) / this.A;
    this.q.setBounds(j + paramInt, 0, j, i);
    this.q.setAlpha((int)(185.0F * (1.0F - f)));
    this.q.draw(paramCanvas);
  }
  
  protected final void b(MotionEvent paramMotionEvent)
  {
    int i = (int)this.d;
    int j = getWidth();
    if (this.e)
    {
      this.l.computeCurrentVelocity(1000, this.m);
      j = (int)this.l.getXVelocity();
      this.h = paramMotionEvent.getX();
      if (this.l.getXVelocity() > 0.0F)
      {
        i = 0;
        a(i, j, true);
      }
    }
    while ((!this.C) || (paramMotionEvent.getX() >= i + j)) {
      for (;;)
      {
        return;
        i = -this.A;
      }
    }
    b(true);
  }
  
  public final void b(boolean paramBoolean)
  {
    a(0, 0, paramBoolean);
  }
  
  protected final boolean b()
  {
    int i = getWidth();
    int j = (int)this.f;
    return ((!this.C) && (j >= i - this.F)) || ((this.C) && (j <= i + this.d));
  }
  
  protected final void c(Canvas paramCanvas, int paramInt)
  {
    if ((this.v != null) && (this.v.getParent() != null) && (this.w == 0))
    {
      int j = getWidth();
      int k = this.A;
      int i = this.u.getWidth();
      j += paramInt;
      float f = Math.abs(paramInt) / k;
      this.v.getDrawingRect(this.x);
      offsetDescendantRectToMyCoords(this.v, this.x);
      paramInt = (int)((1.0F - a.getInterpolation(1.0F - f)) * i) + j;
      k = this.x.top;
      int m = (this.x.height() - this.u.getHeight()) / 2;
      paramCanvas.save();
      paramCanvas.clipRect(j, 0, paramInt, getHeight());
      paramCanvas.drawBitmap(this.u, paramInt - i, k + m, null);
      paramCanvas.restore();
    }
  }
  
  protected final void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    paramInt1 = paramInt3 - paramInt1;
    paramInt2 = paramInt4 - paramInt2;
    paramInt3 = (int)this.d;
    this.y.layout(paramInt1 - this.A, 0, paramInt1, paramInt2);
    f(paramInt3);
    if (p)
    {
      this.z.layout(0, 0, paramInt1, paramInt2);
      return;
    }
    this.z.layout(paramInt3, 0, paramInt1 + paramInt3, paramInt2);
  }
}
