package com.ironsource.mobilcore;

import android.app.Activity;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Handler;
import android.text.TextUtils;
import android.widget.Toast;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

final class aL
  extends l
  implements aP.a
{
  private static aL l;
  private b e;
  private aP f;
  private boolean g;
  private boolean h;
  private Runnable i;
  private i j;
  private JSONObject k;
  private OnReadyListener m;
  
  private aL()
  {
    a(b.a);
  }
  
  private void a(CallbackResponse paramCallbackResponse, boolean paramBoolean, String paramString)
  {
    if (paramBoolean) {
      Toast.makeText(this.a, "There was an error", 1).show();
    }
    for (;;)
    {
      if (paramCallbackResponse != null) {
        paramCallbackResponse.onConfirmation(CallbackResponse.TYPE.OFFERWALL_SHOW_ERROR);
      }
      aE.b(this.a, getClass().getName(), paramString);
      return;
      b("handleErrorAccordingToForceShow", paramString);
    }
  }
  
  private void a(b paramB)
  {
    try
    {
      a("setState", "from:" + this.e + " , to:" + paramB);
      this.e = paramB;
      return;
    }
    finally
    {
      paramB = finally;
      throw paramB;
    }
  }
  
  public static aL h()
  {
    try
    {
      if (l == null) {
        l = new aL();
      }
      aL localAL = l;
      return localAL;
    }
    finally {}
  }
  
  private void m()
  {
    try
    {
      if (this.m != null)
      {
        this.m.onReady(MobileCore.AD_UNITS.OFFERWALL);
        this.m = null;
      }
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  private void n()
  {
    if (this.i != null)
    {
      MobileCore.b().removeCallbacks(this.i);
      this.i = null;
    }
  }
  
  private String o()
  {
    String str = aE.d().getString("offerwall-cached-url", "");
    if (!TextUtils.isEmpty(str))
    {
      this.k = w.a().b("offerwall-feed");
      return str + "&fallback=1";
    }
    return "http://os.scmpacdn.com/files/mobile/0.9.2/offerwall_site/fallback/?sdk=1&fallback=1&ts=" + System.currentTimeMillis();
  }
  
  private void p()
  {
    if (!this.g)
    {
      a(b.c);
      j.b();
    }
  }
  
  public final void a(Activity paramActivity, final CallbackResponse paramCallbackResponse, final boolean paramBoolean)
  {
    Object localObject;
    switch (2.a[this.e.ordinal()])
    {
    default: 
    case 1: 
    case 2: 
    case 3: 
    case 4: 
      do
      {
        do
        {
          return;
          if (paramCallbackResponse != null) {
            paramCallbackResponse.onConfirmation(CallbackResponse.TYPE.OFFERWALL_NOT_READY);
          }
          a(paramCallbackResponse, paramBoolean, "showOfferwall called when in error state");
          b("showOfferwall", "Trying to show offerwall when not init.");
          return;
          localObject = o();
          this.j.a((String)localObject);
          b("showOfferwall", "Error showing offerwall. Trying to show again.");
          if (this.f != null) {
            this.f.a();
          }
          localObject = this.j.a();
          if (localObject != null) {
            break;
          }
        } while (paramCallbackResponse == null);
        paramCallbackResponse.onConfirmation(CallbackResponse.TYPE.OFFERWALL_SHOW_ERROR);
        return;
        this.f = new aP(paramActivity, (aW)localObject, "web", "offerWall", paramCallbackResponse, this);
        this.h = true;
        j.a(paramActivity);
        n();
        this.i = new Runnable()
        {
          public final void run()
          {
            if (aL.a(aL.this))
            {
              aL.a(aL.this, false);
              j.b();
              aL.b(aL.this);
              aL.a(aL.this, paramCallbackResponse, paramBoolean, "Got fallback offerwall timeout");
            }
          }
        };
        MobileCore.b().postDelayed(this.i, 10000L);
        return;
      } while (paramCallbackResponse == null);
      paramCallbackResponse.onConfirmation(CallbackResponse.TYPE.OFFERWALL_ALREADY_SHOWING);
      return;
    }
    if (this.f != null) {
      this.f.a();
    }
    paramBoolean = this.g;
    if (paramBoolean)
    {
      localObject = this.b;
      label252:
      if (!paramBoolean) {
        break label298;
      }
    }
    aW localAW;
    label298:
    for (String str = this.c;; str = "web")
    {
      localAW = this.j.a();
      if (localAW != null) {
        break label306;
      }
      if (paramCallbackResponse == null) {
        break;
      }
      paramCallbackResponse.onConfirmation(CallbackResponse.TYPE.OFFERWALL_SHOW_ERROR);
      return;
      localObject = "offerWall";
      break label252;
    }
    label306:
    this.f = new aP(paramActivity, localAW, str, (String)localObject, paramCallbackResponse, this);
    if (paramBoolean)
    {
      a(a.b);
      return;
    }
    this.f.b();
  }
  
  public final void a(OnReadyListener paramOnReadyListener)
  {
    try
    {
      a("setOnReadyListener");
      this.m = paramOnReadyListener;
      return;
    }
    finally
    {
      paramOnReadyListener = finally;
      throw paramOnReadyListener;
    }
  }
  
  protected final boolean a()
  {
    return this.e == b.a;
  }
  
  protected final l.a b()
  {
    return new l.a("offerWall", "offerwall", "offerwall-feed", a.a, new c());
  }
  
  protected final void d()
  {
    super.d();
    String str = o();
    a(b.b);
    this.j = new i(str, new d(), new d());
    a("Offerwall", "initMembers");
    this.h = false;
    this.m = null;
    this.g = false;
  }
  
  protected final void e()
  {
    p();
  }
  
  protected final void f()
  {
    super.f();
    aN.a(u.a.a);
  }
  
  public final void i()
  {
    a(b.e);
  }
  
  public final void j()
  {
    a(b.d);
    g();
  }
  
  public final boolean k()
  {
    return this.e == b.e;
  }
  
  public final boolean l()
  {
    return this.g;
  }
  
  private static enum a
    implements l.c
  {
    private String c;
    
    private a(String paramString)
    {
      this.c = paramString;
    }
    
    public final String a()
    {
      return this.c;
    }
  }
  
  private static enum b
  {
    private b() {}
  }
  
  private final class c
    implements aF.a
  {
    public c() {}
    
    public final void cacheFeed(String paramString)
    {
      aL.this.a("JSFlowBridge , cacheFeed");
      w.a().a("offerwall-feed", paramString);
    }
    
    public final String getInstalledAppPackages()
    {
      return aE.b();
    }
    
    public final String getMobileParams()
    {
      aL.this.a("JSFlowBridge , getMobileParams");
      return aE.k(aL.this.a);
    }
    
    public final double getScreenSize()
    {
      return aE.e(MobileCore.c());
    }
    
    public final String getSharedPref(String paramString1, String paramString2)
    {
      return aE.d().getString(paramString1, paramString2);
    }
    
    public final void init(String paramString1, String paramString2)
    {
      aL.this.a("JSFlowBridge , init", "flow:" + paramString1 + " , flowName:" + paramString2);
      aL.this.c = paramString2;
      aL.this.b = paramString1;
    }
    
    public final void loadOfferwallUrl(String paramString)
    {
      aL.a(aL.this, paramString);
      boolean bool = aL.c(aL.this).b(paramString);
      aL localAL = aL.this;
      StringBuilder localStringBuilder = new StringBuilder("check if already loading a url:");
      if (!bool) {}
      for (bool = true;; bool = false)
      {
        localAL.a("JSFlowBridge , loadOfferwallUrl", bool + " , offerwallUrl:" + paramString);
        return;
      }
    }
    
    public final void openReport(String paramString1, String paramString2)
    {
      aL.d(aL.this).b(paramString1, paramString2);
    }
    
    public final void openReportOffers(String paramString1, String paramString2)
    {
      try
      {
        paramString2 = aN.a(new JSONArray(paramString2));
        aE.a(MobileCore.c(), aL.this.b, aL.this.b, aJ.a.a(paramString1), "", paramString2);
        return;
      }
      catch (Exception paramString1)
      {
        paramString1.printStackTrace();
      }
    }
    
    public final void setSharedPref(String paramString1, String paramString2)
    {
      SharedPreferences.Editor localEditor = aE.d().edit();
      localEditor.putString(paramString1, paramString2);
      localEditor.commit();
    }
    
    public final void show()
    {
      aL.this.a("JSFlowBridge , show");
      aL.d(aL.this).b();
    }
  }
  
  public final class d
    extends aW.c
  {
    public d() {}
    
    public final String getFallbackOfferwallJson()
    {
      aL.this.a("JSOfferwallBridge , getFallbackOfferwallJson");
      if (aL.e(aL.this) == null) {
        return "";
      }
      return aL.e(aL.this).toString();
    }
    
    public final String getMobileParams()
    {
      aL.this.a("JSOfferwallBridge , getMobileParams");
      return aE.k(aL.this.a);
    }
    
    public final String getOfferwallJson()
    {
      aL.this.a("JSOfferwallBridge , getOfferwallJson");
      return w.a().b("offerwall-feed").toString();
    }
    
    public final double getScreenSize()
    {
      return aE.e(MobileCore.c());
    }
    
    public final void handleClickedOffer(String paramString)
    {
      aL.this.a("JSOfferwallBridge , handleClickedOffer", "offerJsonStr:" + paramString);
      try
      {
        paramString = new JSONObject(paramString);
        aL.d(aL.this).a(paramString);
        aN.a(u.a.b, new I.a[] { new I.a("offer", aN.b(paramString)) });
        aN.a(u.a.c);
        return;
      }
      catch (JSONException paramString) {}
    }
    
    public final void handleFeedFailure()
    {
      aL.this.a("JSOfferwallBridge , handleFeedFailure");
      aL.b(aL.this);
    }
    
    public final void handleResourceFailure(String paramString)
    {
      aL.this.a("JSOfferwallBridge , handleResourceFailure, " + paramString);
      aL.b(aL.this);
    }
    
    public final void hide(String paramString)
    {
      aL.this.a("JSOfferwallBridge , hide");
      aL.d(aL.this).a(aJ.a.d, paramString);
      aL.d(aL.this).a(CallbackResponse.TYPE.OFFERWALL_QUIT);
    }
    
    public final void openReport(String paramString1, String paramString2)
    {
      aL.d(aL.this).b(paramString1, paramString2);
    }
    
    public final void ready(boolean paramBoolean)
    {
      aL.this.a("JSOfferwallBridge , ready");
      if ((aL.f(aL.this) == aL.b.b) || (aL.f(aL.this) == aL.b.c))
      {
        aL.a(aL.this, aL.b.d);
        if (aL.a(aL.this))
        {
          aL.a(aL.this, false);
          j.b();
          aL.d(aL.this).b();
          aL.g(aL.this);
        }
      }
      if ((!paramBoolean) && (!aL.h(aL.this)))
      {
        aL.this.a("JSOfferwallBridge , ready", "setting mReadyToShowOfferwallFromFlow to true");
        aL.b(aL.this, true);
        aN.a(u.a.a, new I.a[0]);
        aL.i(aL.this);
      }
      a();
    }
    
    public final void reportBack(String paramString)
    {
      aL.d(aL.this).a(aJ.a.c, paramString);
    }
    
    public final void reportImpressions(String paramString)
    {
      aL.this.a("JSOfferwallBridge , reportImpressions");
      aE.a(new aP.4(aL.d(aL.this)), new String[] { paramString });
      aN.a(u.a.b);
    }
    
    public final void reportOfferwallShow(String paramString1, String paramString2)
    {
      aL.d(aL.this).a(paramString1, paramString2);
    }
  }
}
