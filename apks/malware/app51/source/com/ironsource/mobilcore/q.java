package com.ironsource.mobilcore;

import android.content.Context;
import android.os.Handler;
import android.text.TextUtils;
import android.webkit.WebView;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.zip.GZIPInputStream;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONTokener;

final class q
{
  public static final class a
    extends q.c
  {
    private static boolean d = false;
    private long e;
    
    a(String paramString1, String paramString2, aE.c paramC)
    {
      super(paramString2, paramC);
    }
    
    private String a(String paramString)
    {
      if (TextUtils.isEmpty(paramString)) {
        return null;
      }
      String str1 = aE.h(paramString);
      str1 = aE.b(paramString) + str1;
      String str2 = aO.a() + "/" + str1;
      File localFile = new File(str2);
      if (!localFile.exists()) {
        aO.a(paramString, this.c);
      }
      for (;;)
      {
        return "file://" + str2;
        localFile.setLastModified(System.currentTimeMillis());
        A.a("ResourceManager |  resource: " + str1 + " is already here - updated timestamp", 55);
      }
    }
    
    private void a()
    {
      long l = System.currentTimeMillis();
      Object localObject1 = new File(aO.a());
      if (((File)localObject1).exists())
      {
        localObject1 = ((File)localObject1).listFiles();
        int j = localObject1.length;
        int i = 0;
        while (i < j)
        {
          Object localObject2 = localObject1[i];
          if (l - localObject2.lastModified() > this.e) {
            localObject2.delete();
          }
          i += 1;
        }
      }
    }
    
    private void a(JSONObject paramJSONObject, JSONArray paramJSONArray)
    {
      if (paramJSONArray == null) {
        return;
      }
      for (;;)
      {
        JSONArray localJSONArray;
        int i;
        JSONObject localJSONObject;
        String str1;
        String str2;
        String str3;
        try
        {
          localJSONArray = new JSONArray();
          i = 0;
          if (i >= paramJSONArray.length()) {
            break label178;
          }
          localJSONObject = paramJSONArray.optJSONObject(i);
          str1 = localJSONObject.getString("value");
          str2 = localJSONObject.getString("name");
          str3 = localJSONObject.getString("type");
          if (("img".equalsIgnoreCase(str3)) || ("audio".equalsIgnoreCase(str3)) || ("video".equalsIgnoreCase(str3))) {
            break label195;
          }
          if (!"file".equalsIgnoreCase(str3)) {
            break label208;
          }
        }
        catch (JSONException paramJSONObject) {}
        if (j != 0)
        {
          paramJSONObject.putOpt(str2, a(str1));
        }
        else
        {
          if ("report".equalsIgnoreCase(str3))
          {
            localJSONArray.put(localJSONObject);
            break label201;
            if (this.c == null) {
              break;
            }
            this.c.a(this.a, paramJSONObject);
            return;
          }
          paramJSONObject.putOpt(str2, str1);
          break label201;
          label178:
          paramJSONObject.remove("extra");
          paramJSONObject.put("extra", localJSONArray);
          return;
          label195:
          j = 1;
          continue;
        }
        label201:
        i += 1;
        continue;
        label208:
        int j = 0;
      }
    }
    
    private boolean a(JSONObject paramJSONObject)
    {
      for (;;)
      {
        long l4;
        long l2;
        long l1;
        try
        {
          a(paramJSONObject, paramJSONObject.optJSONArray("extra"));
          localObject = paramJSONObject.optJSONObject("expirations");
          if (localObject != null) {
            break label313;
          }
          localObject = new JSONObject();
          paramJSONObject.putOpt("expirations", localObject);
          l4 = System.currentTimeMillis();
          long l3 = ((JSONObject)localObject).optLong("soft_expiration", -1L);
          l2 = ((JSONObject)localObject).optLong("hard_expiration", -1L);
          A.a("FeedExpiration | processed feed. expirationTimeSoft:" + l3 + " , expirationTimeHard:" + l2, 55);
          l1 = l3;
          if (l3 > 0L) {
            break label316;
          }
          l1 = -1L;
        }
        catch (Exception paramJSONObject)
        {
          Object localObject;
          JSONArray localJSONArray;
          int i;
          JSONObject localJSONObject;
          if (this.c == null) {
            continue;
          }
          this.c.a(this.a, paramJSONObject);
          return false;
        }
        ((JSONObject)localObject).putOpt("soft_expiration", Long.valueOf(l1));
        ((JSONObject)localObject).putOpt("hard_expiration", Long.valueOf(l2));
        this.e = ((JSONObject)localObject).optLong("media_expiration", 86400000L);
        if (!d)
        {
          a();
          d = true;
        }
        localObject = paramJSONObject.optJSONArray("ads");
        localJSONArray = new JSONArray();
        i = 0;
        if (i < ((JSONArray)localObject).length())
        {
          localJSONObject = ((JSONArray)localObject).optJSONObject(i);
          localJSONArray.put(localJSONObject);
          localJSONObject.putOpt("img", a(localJSONObject.optString("img")));
          localJSONObject.putOpt("cover_img", a(localJSONObject.optString("cover_img")));
          a(localJSONObject, localJSONObject.optJSONArray("extra"));
          i += 1;
        }
        else
        {
          paramJSONObject.put("ads", localJSONArray);
          return true;
          for (;;)
          {
            break label328;
            label313:
            break;
            label316:
            if (l2 <= 0L) {
              l2 = -1L;
            }
          }
          label328:
          if (l1 != -1L) {}
          for (l1 += l4;; l1 = -1L)
          {
            if (l2 == -1L) {
              break label367;
            }
            l2 += l4;
            break;
          }
          label367:
          l2 = -1L;
        }
      }
    }
    
    public final boolean a(HttpResponse paramHttpResponse)
    {
      boolean bool2 = true;
      for (;;)
      {
        Object localObject1;
        Object localObject2;
        try
        {
          localObject1 = paramHttpResponse.getEntity().getContent();
          paramHttpResponse = paramHttpResponse.getFirstHeader("Content-Encoding");
          if ((paramHttpResponse == null) || (!paramHttpResponse.getValue().equalsIgnoreCase("gzip"))) {
            break label305;
          }
          paramHttpResponse = new GZIPInputStream((InputStream)localObject1);
          paramHttpResponse = new BufferedReader(new InputStreamReader(paramHttpResponse, "UTF-8"));
          localObject1 = new StringBuilder();
          localObject2 = paramHttpResponse.readLine();
          if (localObject2 != null)
          {
            ((StringBuilder)localObject1).append((String)localObject2).append("\n");
            continue;
          }
          localObject1 = new JSONObject(new JSONTokener(((StringBuilder)localObject1).toString()));
        }
        catch (Exception paramHttpResponse)
        {
          if (this.c != null) {
            this.c.a(this.a, paramHttpResponse);
          }
          bool2 = false;
          return bool2;
        }
        if (((JSONObject)localObject1).optString("id", null) == null) {
          aE.b(MobileCore.c(), MobileCore.class.getName(), "Feed is missing field 'id'");
        }
        paramHttpResponse = ((JSONObject)localObject1).optJSONArray("ads");
        int i;
        if ((paramHttpResponse == null) || (paramHttpResponse.length() <= 0))
        {
          localObject2 = MobileCore.c();
          String str = MobileCore.class.getName();
          if (paramHttpResponse == null)
          {
            paramHttpResponse = "missing";
            aE.b((Context)localObject2, str, String.format("Feed ads are invalid (%s)", new Object[] { paramHttpResponse }));
            i = 0;
            label248:
            if ((i == 0) || (!a((JSONObject)localObject1))) {
              break label300;
            }
          }
        }
        label300:
        for (boolean bool1 = true;; bool1 = false)
        {
          if (this.c == null) {
            break label303;
          }
          this.c.a((JSONObject)localObject1, this.a, bool1);
          return true;
          paramHttpResponse = "empty";
          break;
          i = 1;
          break label248;
        }
        label303:
        continue;
        label305:
        paramHttpResponse = (HttpResponse)localObject1;
      }
    }
  }
  
  public static final class b
    extends q.c
  {
    private WebView d;
    private String e;
    
    b(WebView paramWebView, String paramString1, String paramString2, String paramString3, aE.c paramC)
    {
      super(paramString2, paramC);
      this.d = paramWebView;
      this.e = paramString3;
    }
    
    public static String a(String paramString1, String paramString2, String paramString3)
    {
      paramString2 = "file://" + paramString1 + "/" + paramString2;
      paramString1 = paramString2;
      if (!TextUtils.isEmpty(paramString3)) {
        paramString1 = paramString2 + "?action=" + paramString3;
      }
      return paramString1;
    }
    
    public final boolean a(HttpResponse paramHttpResponse)
    {
      boolean bool = false;
      paramHttpResponse = super.b(paramHttpResponse);
      if (paramHttpResponse == null)
      {
        A.a("FlowFileHandler | processFile | failed to get flow file from web. will use fallback", 3);
        return false;
      }
      MobileCore.b().post(new Runnable()
      {
        public final void run()
        {
          String str = q.b.a(q.b.this.b, q.b.this.a, q.b.a(q.b.this));
          A.a("FlowFileHandler | executeFlow | localUrl: " + str, 55);
          q.b.b(q.b.this).loadUrl(str);
        }
      });
      if (this.c != null)
      {
        aE.c localC = this.c;
        String str = this.a;
        if (paramHttpResponse != null) {
          bool = true;
        }
        localC.a(str, bool);
      }
      return true;
    }
  }
  
  public static class c
    implements aE.b
  {
    protected String a;
    protected String b;
    protected aE.c c;
    
    c(String paramString1, String paramString2, aE.c paramC)
    {
      this.a = paramString2;
      this.b = paramString1;
      this.c = paramC;
    }
    
    private File a(InputStream paramInputStream)
    {
      if (this.c != null) {
        this.c.a(this.a);
      }
      Object localObject = null;
      try
      {
        paramInputStream = aE.a(paramInputStream, this.b, this.a);
        if (this.c != null)
        {
          localObject = this.c;
          localObject = this.a;
        }
        return paramInputStream;
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          paramInputStream = (InputStream)localObject;
          if (this.c != null)
          {
            this.c.a(this.a, localIOException);
            paramInputStream = (InputStream)localObject;
          }
        }
      }
    }
    
    public final void a(int paramInt)
    {
      if (this.c != null) {
        this.c.a(this.a, paramInt);
      }
    }
    
    public final void a(Exception paramException)
    {
      if (this.c != null) {
        this.c.a(this.a, paramException);
      }
    }
    
    public boolean a(HttpResponse paramHttpResponse)
    {
      paramHttpResponse = b(paramHttpResponse);
      aE.c localC;
      String str;
      if (this.c != null)
      {
        localC = this.c;
        str = this.a;
        if (paramHttpResponse == null) {
          break label45;
        }
      }
      label45:
      for (boolean bool = true;; bool = false)
      {
        localC.a(str, bool);
        if (paramHttpResponse == null) {
          break;
        }
        return true;
      }
      return false;
    }
    
    protected final File b(HttpResponse paramHttpResponse)
    {
      for (;;)
      {
        InputStream localInputStream;
        try
        {
          localInputStream = paramHttpResponse.getEntity().getContent();
          paramHttpResponse = paramHttpResponse.getFirstHeader("Content-Encoding");
          if ((paramHttpResponse != null) && (paramHttpResponse.getValue().equalsIgnoreCase("gzip")))
          {
            paramHttpResponse = new GZIPInputStream(localInputStream);
            paramHttpResponse = a(paramHttpResponse);
            return paramHttpResponse;
          }
        }
        catch (Exception paramHttpResponse)
        {
          if (this.c != null) {
            this.c.a(this.a, paramHttpResponse);
          }
          return null;
        }
        paramHttpResponse = localInputStream;
      }
    }
  }
  
  public static final class d
    extends q.c
  {
    d(String paramString1, String paramString2, aE.c paramC)
    {
      super(paramString2, paramC);
    }
    
    public final boolean a(HttpResponse paramHttpResponse)
    {
      paramHttpResponse = super.b(paramHttpResponse);
      boolean bool2 = aX.a(this.b, paramHttpResponse);
      aE.c localC;
      String str;
      if (this.c != null)
      {
        localC = this.c;
        str = this.a;
        if (paramHttpResponse == null) {
          break label52;
        }
      }
      label52:
      for (boolean bool1 = true;; bool1 = false)
      {
        localC.a(str, bool1);
        return bool2;
      }
    }
  }
}
