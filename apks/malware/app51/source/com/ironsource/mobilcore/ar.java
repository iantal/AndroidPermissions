package com.ironsource.mobilcore;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.view.View;
import android.view.View.MeasureSpec;

abstract class ar
  extends ai
{
  private al a;
  
  ar(Activity paramActivity, int paramInt, al paramAl)
  {
    super(paramActivity, paramInt);
    this.a = paramAl;
  }
  
  public final void a(boolean paramBoolean) {}
  
  public final void b(boolean paramBoolean) {}
  
  public final void c(int paramInt)
  {
    this.A = paramInt;
    this.B = true;
    requestLayout();
    invalidate();
  }
  
  public final void c(boolean paramBoolean) {}
  
  public final boolean c()
  {
    return true;
  }
  
  public final void d() {}
  
  protected void dispatchDraw(Canvas paramCanvas)
  {
    super.dispatchDraw(paramCanvas);
    int i = getWidth();
    int j = getHeight();
    int k = this.A;
    int m = this.t;
    switch (1.a[this.a.ordinal()])
    {
    default: 
      this.s.draw(paramCanvas);
      if ((this.v != null) && (this.v.getParent() != null) && (this.w == 0))
      {
        j = getWidth();
        k = getHeight();
        i = this.u.getWidth();
        m = this.u.getHeight();
        this.v.getDrawingRect(this.x);
        offsetDescendantRectToMyCoords(this.v, this.x);
        paramCanvas.save();
        switch (1.a[this.a.ordinal()])
        {
        }
      }
      break;
    }
    for (;;)
    {
      paramCanvas.restore();
      return;
      this.s.setBounds(k - m, 0, k, j);
      break;
      this.s.setBounds(0, k - m, i, k);
      break;
      this.s.setBounds(i - k, 0, i - k + m, j);
      break;
      this.s.setBounds(0, j - k, i, j - k + m);
      break;
      j = this.x.top + (this.x.height() - m) / 2;
      m = this.A;
      i = m - i;
      paramCanvas.clipRect(i, j, m, k);
      paramCanvas.drawBitmap(this.u, i, j, null);
      continue;
      k = this.A;
      m = k - m;
      int n = this.x.left;
      i = (this.x.width() - i) / 2 + n;
      paramCanvas.clipRect(i, m, j, k);
      paramCanvas.drawBitmap(this.u, i, m, null);
      continue;
      n = this.x.top;
      m = (this.x.height() - m) / 2 + n;
      j -= this.A;
      paramCanvas.clipRect(j, m, i + j, k);
      paramCanvas.drawBitmap(this.u, j, m, null);
      continue;
      k -= this.A;
      n = this.x.left;
      i = (this.x.width() - i) / 2 + n;
      paramCanvas.clipRect(i, k, j, m + k);
      paramCanvas.drawBitmap(this.u, i, k, null);
    }
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    paramInt1 = paramInt3 - paramInt1;
    paramInt2 = paramInt4 - paramInt2;
    switch (1.a[this.a.ordinal()])
    {
    default: 
      return;
    case 1: 
      this.y.layout(0, 0, this.A, paramInt2);
      this.z.layout(this.A, 0, paramInt1, paramInt2);
      return;
    case 3: 
      this.y.layout(paramInt1 - this.A, 0, paramInt1, paramInt2);
      this.z.layout(0, 0, paramInt1 - this.A, paramInt2);
      return;
    case 2: 
      this.y.layout(0, 0, paramInt1, this.A);
      this.z.layout(0, this.A, paramInt1, paramInt2);
      return;
    }
    this.y.layout(0, paramInt2 - this.A, paramInt1, paramInt2);
    this.z.layout(0, 0, paramInt1, paramInt2 - this.A);
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int i = View.MeasureSpec.getMode(paramInt1);
    int j = View.MeasureSpec.getMode(paramInt2);
    if ((i != 1073741824) || (j != 1073741824)) {
      throw new IllegalStateException("Must measure with an exact size");
    }
    paramInt1 = View.MeasureSpec.getSize(paramInt1);
    paramInt2 = View.MeasureSpec.getSize(paramInt2);
    if (!this.B) {
      this.A = ((int)(paramInt2 * 0.25F));
    }
    switch (1.a[this.a.ordinal()])
    {
    }
    for (;;)
    {
      setMeasuredDimension(paramInt1, paramInt2);
      return;
      i = View.MeasureSpec.makeMeasureSpec(paramInt2, 1073741824);
      int k = this.A;
      j = View.MeasureSpec.makeMeasureSpec(k, 1073741824);
      k = View.MeasureSpec.makeMeasureSpec(paramInt1 - k, 1073741824);
      this.z.measure(k, i);
      this.y.measure(j, i);
      continue;
      i = View.MeasureSpec.makeMeasureSpec(paramInt1, 1073741824);
      k = this.A;
      j = View.MeasureSpec.makeMeasureSpec(k, 1073741824);
      k = View.MeasureSpec.makeMeasureSpec(paramInt2 - k, 1073741824);
      this.z.measure(i, k);
      this.y.measure(i, j);
    }
  }
}
