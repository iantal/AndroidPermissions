package com.ironsource.mobilcore;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.LightingColorFilter;
import android.graphics.Paint;
import android.graphics.drawable.Drawable;
import android.os.Handler;
import android.util.TypedValue;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.OvershootInterpolator;
import android.view.animation.ScaleAnimation;
import android.view.animation.Transformation;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import java.util.HashMap;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

final class aR
  extends RelativeLayout
{
  Animation.AnimationListener a = new Animation.AnimationListener()
  {
    public final void onAnimationEnd(Animation paramAnonymousAnimation)
    {
      aR.a(aR.this, aS.h().p());
    }
    
    public final void onAnimationRepeat(Animation paramAnonymousAnimation) {}
    
    public final void onAnimationStart(Animation paramAnonymousAnimation) {}
  };
  private b b;
  private aT.b c;
  private int d;
  private AlphaAnimation e;
  private Animation f;
  private int g;
  private Drawable h;
  private Drawable i;
  private Drawable j;
  private ImageView k;
  private ImageView l;
  private LightingColorFilter m;
  private LinearLayout n;
  private aM o;
  private LinearLayout p;
  private LinearLayout q;
  private RelativeLayout r;
  private Handler s;
  private Runnable t;
  private aS.e u;
  private JSONArray v;
  private HashMap<Integer, Boolean> w;
  private ScaleAnimation x;
  
  @SuppressLint({"UseSparseArrays"})
  public aR(Activity paramActivity, b paramB, aS.e paramE)
  {
    super(paramActivity);
    this.b = paramB;
    this.c = aT.b.a;
    this.w = new HashMap();
    this.d = aE.f(paramActivity);
    this.u = paramE;
    this.m = new LightingColorFilter(-1, 4473924);
    this.x = new ScaleAnimation(0.0F, 1.0F, 0.0F, 1.0F, 1, 0.0F, 1, 0.7F);
    this.x.setDuration(500L);
    this.x.setInterpolator(new OvershootInterpolator());
    this.x.setFillAfter(true);
    this.x.setAnimationListener(this.a);
    this.g = ((int)TypedValue.applyDimension(1, 70.0F, getResources().getDisplayMetrics()));
    this.f = new Animation()
    {
      protected final void applyTransformation(float paramAnonymousFloat, Transformation paramAnonymousTransformation)
      {
        paramAnonymousTransformation = (LinearLayout.LayoutParams)aR.a(aR.this).getLayoutParams();
        paramAnonymousTransformation.leftMargin = ((int)(aR.b(aR.this) * (1.0F - paramAnonymousFloat)));
        aR.a(aR.this).setLayoutParams(paramAnonymousTransformation);
      }
    };
    this.f.setFillAfter(true);
    this.f.setDuration(500L);
    this.f.setAnimationListener(new Animation.AnimationListener()
    {
      public final void onAnimationEnd(Animation paramAnonymousAnimation)
      {
        B.a(aS.o(aR.c(aR.this).a));
        aR.this.c();
      }
      
      public final void onAnimationRepeat(Animation paramAnonymousAnimation) {}
      
      public final void onAnimationStart(Animation paramAnonymousAnimation) {}
    });
    this.e = new AlphaAnimation(1.0F, 0.0F);
    this.e.setDuration(500L);
    this.e.setFillAfter(true);
    setLayoutParams(new RelativeLayout.LayoutParams(-1, -1));
    setGravity(80);
    this.k = new ImageView(paramActivity);
    paramB = new RelativeLayout.LayoutParams(-2, -2);
    this.k.setLayoutParams(paramB);
    B.a(this.k, aS.n(this.u.a));
    this.r = new RelativeLayout(paramActivity);
    paramB = new RelativeLayout.LayoutParams(-2, -2);
    this.r.setId(10);
    this.r.setLayoutParams(paramB);
    this.r.setOnClickListener(new View.OnClickListener()
    {
      public final void onClick(View paramAnonymousView)
      {
        aR.e(aR.this);
      }
    });
    paramB = new RelativeLayout(paramActivity);
    paramE = new RelativeLayout.LayoutParams(-2, -2);
    paramE.addRule(12, -1);
    paramB.setLayoutParams(paramE);
    paramB.addView(this.k);
    if (aS.h().n())
    {
      this.l = new ImageView(paramActivity);
      this.l.setClickable(true);
      paramE = new RelativeLayout.LayoutParams(-2, -2);
      paramE.addRule(11, this.r.getId());
      paramE.addRule(10, this.r.getId());
      this.l.setLayoutParams(paramE);
      this.l.setOnClickListener(new View.OnClickListener()
      {
        public final void onClick(View paramAnonymousView)
        {
          A.a(getClass().getName() + "| 'X' clicked", 55);
          aS.h().m();
        }
      });
      B.a(this.l, this.j);
      this.r.addView(this.l);
    }
    for (;;)
    {
      paramB.addView(this.r);
      this.o = new aM(paramActivity, null, this.d);
      paramE = new LinearLayout.LayoutParams(-1, -2);
      paramE.setMargins(this.g, 0, 0, 0);
      this.o.setLayoutParams(paramE);
      this.o.setHorizontalScrollBarEnabled(false);
      this.o.a(new aM.a()
      {
        public final void a(int paramAnonymousInt)
        {
          aR.a(aR.this, paramAnonymousInt);
          int i = 0;
          if (i < aR.f(aR.this).getChildCount())
          {
            ImageView localImageView = (ImageView)aR.f(aR.this).getChildAt(i);
            if (i == paramAnonymousInt) {
              localImageView.clearColorFilter();
            }
            for (;;)
            {
              i += 1;
              break;
              localImageView.setColorFilter(aR.g(aR.this));
            }
          }
        }
      });
      this.n = new LinearLayout(paramActivity);
      this.n.setVisibility(8);
      this.n.setOrientation(1);
      paramE = new RelativeLayout.LayoutParams(-1, -2);
      paramE.addRule(12, -1);
      this.n.setLayoutParams(paramE);
      this.q = new LinearLayout(paramActivity);
      this.q.setOrientation(0);
      this.q.setGravity(17);
      int i1 = (int)TypedValue.applyDimension(1, 5.0F, getResources().getDisplayMetrics());
      this.q.setPadding(0, i1, 0, i1);
      paramE = new RelativeLayout.LayoutParams(-1, -2);
      paramE.addRule(2, this.o.getId());
      paramE.addRule(14, -1);
      paramE.addRule(12, -1);
      this.q.setLayoutParams(paramE);
      this.n.addView(this.o);
      this.n.addView(this.q);
      addView(this.n);
      addView(paramB);
      this.p = new LinearLayout(paramActivity);
      this.p.setLayoutParams(new RelativeLayout.LayoutParams(-2, -2));
      this.o.addView(this.p);
      return;
      A.a("StickeezContainer | setupLayout | mXDrawable == null, can't add 'X' button to a stickee", 55);
    }
  }
  
  private void a(int paramInt)
  {
    if ((this.w.containsKey(Integer.valueOf(paramInt))) && (((Boolean)this.w.get(Integer.valueOf(paramInt))).booleanValue())) {
      return;
    }
    try
    {
      this.b.b(this.v.getJSONObject(paramInt));
      this.w.put(Integer.valueOf(paramInt), Boolean.valueOf(true));
      return;
    }
    catch (JSONException localJSONException)
    {
      localJSONException.printStackTrace();
    }
  }
  
  private void a(Runnable paramRunnable, long paramLong)
  {
    if (this.s == null) {
      this.s = new Handler();
    }
    if (this.t != null) {
      this.s.removeCallbacks(this.t);
    }
    this.t = paramRunnable;
    this.s.postDelayed(paramRunnable, paramLong);
  }
  
  private void b(a paramA)
  {
    if ((this.n.getVisibility() == 8) && (this.k.getVisibility() == 8)) {
      paramA.a();
    }
  }
  
  private void e()
  {
    LinearLayout.LayoutParams localLayoutParams = (LinearLayout.LayoutParams)this.o.getLayoutParams();
    localLayoutParams.setMargins(this.g, 0, 0, 0);
    this.o.setLayoutParams(localLayoutParams);
    this.n.setVisibility(0);
    this.o.startAnimation(this.x);
    this.b.a();
  }
  
  private void f()
  {
    A.a(getClass().getName() + "| doTriggerHandle", 55);
    if (aS.h().o()) {
      aS.h().l();
    }
    for (;;)
    {
      return;
      if (this.n.getVisibility() == 8) {}
      for (int i1 = 1; i1 != 0; i1 = 0)
      {
        if (this.l != null) {
          this.l.setVisibility(8);
        }
        if (!aS.h().p()) {
          break label157;
        }
        B.a(this.k, aS.o(this.u.a));
        ImageView localImageView = this.k;
        B.b(aS.o(this.u.a));
        a(new Runnable()
        {
          public final void run()
          {
            B.a(aS.o(aR.c(aR.this).a));
            aR.this.c();
            aR.a(aR.this, new aR.a()
            {
              public final void a()
              {
                aR.d(aR.this);
              }
            });
          }
        }, j.a(aS.o(this.u.a)));
        return;
      }
    }
    label157:
    e();
  }
  
  public final void a()
  {
    if (this.k != null) {
      B.a(this.k, null);
    }
  }
  
  public final void a(Drawable paramDrawable)
  {
    A.a(getClass().getName() + "| setXDrawable", 55);
    this.j = paramDrawable;
    B.a(this.l, this.j);
  }
  
  public final void a(Drawable paramDrawable1, Drawable paramDrawable2)
  {
    A.a(getClass().getName() + "| setHandleDrawables", 55);
    B.a(this.k, aS.n(this.u.a));
    this.k.measure(0, 0);
    this.r.getLayoutParams().width = this.k.getMeasuredHeight();
    this.r.getLayoutParams().height = this.k.getMeasuredHeight();
    this.h = paramDrawable1;
    this.i = paramDrawable2;
  }
  
  public final void a(final a paramA)
  {
    A.a(getClass().getName() + "| dismissHandle", 55);
    if (this.k.getVisibility() == 0)
    {
      if ((this.l != null) && (this.l.getVisibility() == 0)) {
        this.l.setVisibility(8);
      }
      B.a(aS.n(this.u.a));
      B.a(aS.m(this.u.a));
      B.a(this.k, aS.o(this.u.a));
      ImageView localImageView = this.k;
      B.b(aS.o(this.u.a));
      a(new Runnable()
      {
        public final void run()
        {
          B.a(aS.o(aR.c(aR.this).a));
          aR.this.c();
          aR.a(aR.this, paramA);
        }
      }, j.a(aS.o(this.u.a)) + 100);
    }
    for (;;)
    {
      if (this.n.getVisibility() != 8)
      {
        this.e.setAnimationListener(new Animation.AnimationListener()
        {
          public final void onAnimationEnd(Animation paramAnonymousAnimation)
          {
            aR.i(aR.this).clearAnimation();
            aR.i(aR.this).setVisibility(8);
            aR.a(aR.this, paramA);
          }
          
          public final void onAnimationRepeat(Animation paramAnonymousAnimation) {}
          
          public final void onAnimationStart(Animation paramAnonymousAnimation) {}
        });
        this.n.startAnimation(this.e);
      }
      return;
      b(paramA);
    }
  }
  
  public final void a(JSONArray paramJSONArray)
  {
    this.w.clear();
    this.v = paramJSONArray;
    this.p.removeAllViews();
    this.q.removeAllViews();
    int i2 = (int)TypedValue.applyDimension(1, 10.0F, getResources().getDisplayMetrics());
    int i1 = 0;
    for (;;)
    {
      if (i1 < this.v.length()) {
        paramJSONArray = this.v.optJSONObject(i1);
      }
      for (;;)
      {
        try
        {
          paramJSONArray.put("index", i1);
          paramJSONArray = new aT.a(aT.b.a, this.h, this.i, paramJSONArray);
          Object localObject1 = this.p;
          localObject2 = (Activity)getContext();
          localObject3 = this.b;
          switch (aT.1.a[paramJSONArray.a().ordinal()])
          {
          case 1: 
            ((LinearLayout)localObject1).addView(paramJSONArray);
            paramJSONArray = this.q;
            localObject1 = new ImageView(getContext());
            localObject2 = Bitmap.createBitmap(i2, i2, Bitmap.Config.ARGB_8888);
            localObject3 = new Canvas((Bitmap)localObject2);
            Paint localPaint = new Paint();
            localPaint.setAntiAlias(true);
            localPaint.setColor(-1);
            ((Canvas)localObject3).drawCircle(i2 / 2, i2 / 2, i2 / 2, localPaint);
            localPaint.setColor(-7829368);
            int i3 = (int)TypedValue.applyDimension(1, 1.0F, getResources().getDisplayMetrics());
            ((Canvas)localObject3).drawCircle(i2 / 2, i2 / 2, i2 / 2 - i3, localPaint);
            ((ImageView)localObject1).setAdjustViewBounds(true);
            ((ImageView)localObject1).setImageBitmap((Bitmap)localObject2);
            ((ImageView)localObject1).setPadding((int)TypedValue.applyDimension(1, 2.0F, getResources().getDisplayMetrics()), 0, 0, 0);
            paramJSONArray.addView((View)localObject1);
          }
        }
        catch (JSONException paramJSONArray)
        {
          Object localObject2;
          Object localObject3;
          paramJSONArray.printStackTrace();
        }
        paramJSONArray = new aU((Context)localObject2, paramJSONArray, (b)localObject3);
        continue;
        this.o.a(0);
        ((ImageView)this.q.getChildAt(0)).clearColorFilter();
        i1 = 1;
        while (i1 < this.q.getChildCount())
        {
          ((ImageView)this.q.getChildAt(i1)).setColorFilter(this.m);
          i1 += 1;
        }
        return;
        paramJSONArray = null;
      }
      i1 += 1;
    }
  }
  
  public final void b()
  {
    A.a(getClass().getName() + "| showHandle", 55);
    B.a(this.k, aS.n(this.u.a));
    this.k.setVisibility(0);
    if (this.l != null) {
      this.l.setVisibility(0);
    }
    ImageView localImageView = this.k;
    B.b(aS.n(this.u.a));
    a(new Runnable()
    {
      public final void run()
      {
        B.a(aR.h(aR.this), aS.m(aR.c(aR.this).a));
        B.a(aS.n(aR.c(aR.this).a));
        aR.h(aR.this);
        B.b(aS.m(aR.c(aR.this).a));
      }
    }, j.a(aS.n(this.u.a)));
  }
  
  public final void c()
  {
    A.a(getClass().getName() + "| hideHandle", 55);
    if (this.k.getVisibility() == 0)
    {
      this.k.setVisibility(8);
      this.r.setVisibility(8);
    }
  }
  
  public final void d()
  {
    A.a(getClass().getName() + "| triggerHandle", 55);
    f();
  }
  
  protected final void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    A.a(getClass().getName() + "| onAttachedToWindow", 55);
    b localB = this.b;
  }
  
  protected final void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    A.a(getClass().getName() + "| onDetachedFromWindow", 55);
    this.b.c();
    this.n.setVisibility(8);
  }
  
  public static abstract interface a
  {
    public abstract void a();
  }
  
  public static abstract interface b
  {
    public abstract void a();
    
    public abstract void a(JSONObject paramJSONObject);
    
    public abstract void b();
    
    public abstract void b(JSONObject paramJSONObject);
    
    public abstract void c();
  }
}
